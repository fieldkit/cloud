// Code generated by goa v3.2.4, DO NOT EDIT.
//
// records client
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package records

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "records" service client.
type Client struct {
	DataEndpoint     goa.Endpoint
	MetaEndpoint     goa.Endpoint
	ResolvedEndpoint goa.Endpoint
}

// NewClient initializes a "records" service client given the endpoints.
func NewClient(data, meta, resolved goa.Endpoint) *Client {
	return &Client{
		DataEndpoint:     data,
		MetaEndpoint:     meta,
		ResolvedEndpoint: resolved,
	}
}

// Data calls the "data" endpoint of the "records" service.
func (c *Client) Data(ctx context.Context, p *DataPayload) (res *DataResult, err error) {
	var ires interface{}
	ires, err = c.DataEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DataResult), nil
}

// Meta calls the "meta" endpoint of the "records" service.
func (c *Client) Meta(ctx context.Context, p *MetaPayload) (res *MetaResult, err error) {
	var ires interface{}
	ires, err = c.MetaEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*MetaResult), nil
}

// Resolved calls the "resolved" endpoint of the "records" service.
func (c *Client) Resolved(ctx context.Context, p *ResolvedPayload) (res *ResolvedResult, err error) {
	var ires interface{}
	ires, err = c.ResolvedEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ResolvedResult), nil
}
