// Code generated by goa v3.2.4, DO NOT EDIT.
//
// firmware views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Firmwares is the viewed result type that is projected based on a view.
type Firmwares struct {
	// Type to project
	Projected *FirmwaresView
	// View to render
	View string
}

// FirmwaresView is a type that runs validations on a projected type.
type FirmwaresView struct {
	Firmwares FirmwareSummaryCollectionView
}

// FirmwareSummaryCollectionView is a type that runs validations on a projected
// type.
type FirmwareSummaryCollectionView []*FirmwareSummaryView

// FirmwareSummaryView is a type that runs validations on a projected type.
type FirmwareSummaryView struct {
	ID          *int32
	Time        *string
	Etag        *string
	Module      *string
	Profile     *string
	URL         *string
	Meta        map[string]interface{}
	BuildNumber *int32
	BuildTime   *int64
}

var (
	// FirmwaresMap is a map of attribute names in result type Firmwares indexed by
	// view name.
	FirmwaresMap = map[string][]string{
		"default": []string{
			"firmwares",
		},
	}
	// FirmwareSummaryCollectionMap is a map of attribute names in result type
	// FirmwareSummaryCollection indexed by view name.
	FirmwareSummaryCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"time",
			"etag",
			"module",
			"profile",
			"url",
			"meta",
			"buildNumber",
			"buildTime",
		},
	}
	// FirmwareSummaryMap is a map of attribute names in result type
	// FirmwareSummary indexed by view name.
	FirmwareSummaryMap = map[string][]string{
		"default": []string{
			"id",
			"time",
			"etag",
			"module",
			"profile",
			"url",
			"meta",
			"buildNumber",
			"buildTime",
		},
	}
)

// ValidateFirmwares runs the validations defined on the viewed result type
// Firmwares.
func ValidateFirmwares(result *Firmwares) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFirmwaresView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateFirmwaresView runs the validations defined on FirmwaresView using
// the "default" view.
func ValidateFirmwaresView(result *FirmwaresView) (err error) {

	if result.Firmwares != nil {
		if err2 := ValidateFirmwareSummaryCollectionView(result.Firmwares); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFirmwareSummaryCollectionView runs the validations defined on
// FirmwareSummaryCollectionView using the "default" view.
func ValidateFirmwareSummaryCollectionView(result FirmwareSummaryCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateFirmwareSummaryView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFirmwareSummaryView runs the validations defined on
// FirmwareSummaryView using the "default" view.
func ValidateFirmwareSummaryView(result *FirmwareSummaryView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Time == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("time", "result"))
	}
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	if result.Module == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("module", "result"))
	}
	if result.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("profile", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "result"))
	}
	if result.BuildNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildNumber", "result"))
	}
	if result.BuildTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("buildTime", "result"))
	}
	return
}
