// Code generated by goa v3.2.4, DO NOT EDIT.
//
// firmware service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package firmware

import (
	"context"
	"io"

	firmwareviews "github.com/fieldkit/cloud/server/api/gen/firmware/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the firmware service interface.
type Service interface {
	// Download implements download.
	Download(context.Context, *DownloadPayload) (res *DownloadResult, body io.ReadCloser, err error)
	// Add implements add.
	Add(context.Context, *AddPayload) (err error)
	// List implements list.
	List(context.Context, *ListPayload) (res *Firmwares, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "firmware"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"download", "add", "list", "delete"}

// DownloadPayload is the payload type of the firmware service download method.
type DownloadPayload struct {
	FirmwareID int32
}

// DownloadResult is the result type of the firmware service download method.
type DownloadResult struct {
	Length      int64
	ContentType string
}

// AddPayload is the payload type of the firmware service add method.
type AddPayload struct {
	Auth     *string
	Firmware *AddFirmwarePayload
}

// ListPayload is the payload type of the firmware service list method.
type ListPayload struct {
	Auth     *string
	Module   *string
	Profile  *string
	PageSize *int32
	Page     *int32
}

// Firmwares is the result type of the firmware service list method.
type Firmwares struct {
	Firmwares FirmwareSummaryCollection
}

// DeletePayload is the payload type of the firmware service delete method.
type DeletePayload struct {
	Auth       *string
	FirmwareID int32
}

type AddFirmwarePayload struct {
	Etag    string
	Module  string
	Profile string
	URL     string
	Meta    string
}

type FirmwareSummaryCollection []*FirmwareSummary

type FirmwareSummary struct {
	ID          int32
	Time        string
	Etag        string
	Module      string
	Profile     string
	URL         string
	Meta        map[string]interface{}
	BuildNumber int32
	BuildTime   int64
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad-request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewFirmwares initializes result type Firmwares from viewed result type
// Firmwares.
func NewFirmwares(vres *firmwareviews.Firmwares) *Firmwares {
	return newFirmwares(vres.Projected)
}

// NewViewedFirmwares initializes viewed result type Firmwares from result type
// Firmwares using the given view.
func NewViewedFirmwares(res *Firmwares, view string) *firmwareviews.Firmwares {
	p := newFirmwaresView(res)
	return &firmwareviews.Firmwares{Projected: p, View: "default"}
}

// newFirmwares converts projected type Firmwares to service type Firmwares.
func newFirmwares(vres *firmwareviews.FirmwaresView) *Firmwares {
	res := &Firmwares{}
	if vres.Firmwares != nil {
		res.Firmwares = newFirmwareSummaryCollection(vres.Firmwares)
	}
	return res
}

// newFirmwaresView projects result type Firmwares to projected type
// FirmwaresView using the "default" view.
func newFirmwaresView(res *Firmwares) *firmwareviews.FirmwaresView {
	vres := &firmwareviews.FirmwaresView{}
	if res.Firmwares != nil {
		vres.Firmwares = newFirmwareSummaryCollectionView(res.Firmwares)
	}
	return vres
}

// newFirmwareSummaryCollection converts projected type
// FirmwareSummaryCollection to service type FirmwareSummaryCollection.
func newFirmwareSummaryCollection(vres firmwareviews.FirmwareSummaryCollectionView) FirmwareSummaryCollection {
	res := make(FirmwareSummaryCollection, len(vres))
	for i, n := range vres {
		res[i] = newFirmwareSummary(n)
	}
	return res
}

// newFirmwareSummaryCollectionView projects result type
// FirmwareSummaryCollection to projected type FirmwareSummaryCollectionView
// using the "default" view.
func newFirmwareSummaryCollectionView(res FirmwareSummaryCollection) firmwareviews.FirmwareSummaryCollectionView {
	vres := make(firmwareviews.FirmwareSummaryCollectionView, len(res))
	for i, n := range res {
		vres[i] = newFirmwareSummaryView(n)
	}
	return vres
}

// newFirmwareSummary converts projected type FirmwareSummary to service type
// FirmwareSummary.
func newFirmwareSummary(vres *firmwareviews.FirmwareSummaryView) *FirmwareSummary {
	res := &FirmwareSummary{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Time != nil {
		res.Time = *vres.Time
	}
	if vres.Etag != nil {
		res.Etag = *vres.Etag
	}
	if vres.Module != nil {
		res.Module = *vres.Module
	}
	if vres.Profile != nil {
		res.Profile = *vres.Profile
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	if vres.BuildNumber != nil {
		res.BuildNumber = *vres.BuildNumber
	}
	if vres.BuildTime != nil {
		res.BuildTime = *vres.BuildTime
	}
	if vres.Meta != nil {
		res.Meta = make(map[string]interface{}, len(vres.Meta))
		for key, val := range vres.Meta {
			tk := key
			tv := val
			res.Meta[tk] = tv
		}
	}
	return res
}

// newFirmwareSummaryView projects result type FirmwareSummary to projected
// type FirmwareSummaryView using the "default" view.
func newFirmwareSummaryView(res *FirmwareSummary) *firmwareviews.FirmwareSummaryView {
	vres := &firmwareviews.FirmwareSummaryView{
		ID:          &res.ID,
		Time:        &res.Time,
		Etag:        &res.Etag,
		Module:      &res.Module,
		Profile:     &res.Profile,
		URL:         &res.URL,
		BuildNumber: &res.BuildNumber,
		BuildTime:   &res.BuildTime,
	}
	if res.Meta != nil {
		vres.Meta = make(map[string]interface{}, len(res.Meta))
		for key, val := range res.Meta {
			tk := key
			tv := val
			vres.Meta[tk] = tv
		}
	}
	return vres
}
