// Code generated by goa v3.2.4, DO NOT EDIT.
//
// notifications service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package notifications

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the notifications service interface.
type Service interface {
	// Listen implements listen.
	Listen(context.Context, ListenServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "notifications"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"listen"}

// ListenServerStream is the interface a "listen" endpoint server stream must
// satisfy.
type ListenServerStream interface {
	// Send streams instances of "map[string]interface{}".
	Send(map[string]interface{}) error
	// Recv reads instances of "map[string]interface{}" from the stream.
	Recv() (map[string]interface{}, error)
	// Close closes the stream.
	Close() error
}

// ListenClientStream is the interface a "listen" endpoint client stream must
// satisfy.
type ListenClientStream interface {
	// Send streams instances of "map[string]interface{}".
	Send(map[string]interface{}) error
	// Recv reads instances of "map[string]interface{}" from the stream.
	Recv() (map[string]interface{}, error)
	// Close closes the stream.
	Close() error
}

// credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad-request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
