// Code generated by goa v3.2.4, DO NOT EDIT.
//
// notifications service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package notifications

import (
	"context"

	notificationsviews "github.com/fieldkit/cloud/server/api/gen/notifications/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the notifications service interface.
type Service interface {
	// Listen implements listen.
	Listen(context.Context, ListenServerStream) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "notifications"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"listen"}

// ListenServerStream is the interface a "listen" endpoint server stream must
// satisfy.
type ListenServerStream interface {
	// Send streams instances of "Notification".
	Send(*Notification) error
	// Close closes the stream.
	Close() error
}

// ListenClientStream is the interface a "listen" endpoint client stream must
// satisfy.
type ListenClientStream interface {
	// Recv reads instances of "Notification" from the stream.
	Recv() (*Notification, error)
}

// Notification is the result type of the notifications service listen method.
type Notification struct {
	ID int64
}

// credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "credentials are invalid"
}

// ErrorName returns "unauthorized".
func (e Unauthorized) ErrorName() string {
	return "unauthorized"
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad-request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewNotification initializes result type Notification from viewed result type
// Notification.
func NewNotification(vres *notificationsviews.Notification) *Notification {
	return newNotification(vres.Projected)
}

// NewViewedNotification initializes viewed result type Notification from
// result type Notification using the given view.
func NewViewedNotification(res *Notification, view string) *notificationsviews.Notification {
	p := newNotificationView(res)
	return &notificationsviews.Notification{Projected: p, View: "default"}
}

// newNotification converts projected type Notification to service type
// Notification.
func newNotification(vres *notificationsviews.NotificationView) *Notification {
	res := &Notification{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	return res
}

// newNotificationView projects result type Notification to projected type
// NotificationView using the "default" view.
func newNotificationView(res *Notification) *notificationsviews.NotificationView {
	vres := &notificationsviews.NotificationView{
		ID: &res.ID,
	}
	return vres
}
