// Code generated by goa v3.2.4, DO NOT EDIT.
//
// notifications views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Notification is the viewed result type that is projected based on a view.
type Notification struct {
	// Type to project
	Projected *NotificationView
	// View to render
	View string
}

// NotificationView is a type that runs validations on a projected type.
type NotificationView struct {
	ID *int64
}

var (
	// NotificationMap is a map of attribute names in result type Notification
	// indexed by view name.
	NotificationMap = map[string][]string{
		"default": []string{
			"id",
		},
	}
)

// ValidateNotification runs the validations defined on the viewed result type
// Notification.
func ValidateNotification(result *Notification) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateNotificationView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateNotificationView runs the validations defined on NotificationView
// using the "default" view.
func ValidateNotificationView(result *NotificationView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	return
}
