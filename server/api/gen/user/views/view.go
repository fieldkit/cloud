// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// AvailableRoles is the viewed result type that is projected based on a view.
type AvailableRoles struct {
	// Type to project
	Projected *AvailableRolesView
	// View to render
	View string
}

// DownloadedPhoto is the viewed result type that is projected based on a view.
type DownloadedPhoto struct {
	// Type to project
	Projected *DownloadedPhotoView
	// View to render
	View string
}

// User is the viewed result type that is projected based on a view.
type User struct {
	// Type to project
	Projected *UserView
	// View to render
	View string
}

// ProjectUsers is the viewed result type that is projected based on a view.
type ProjectUsers struct {
	// Type to project
	Projected *ProjectUsersView
	// View to render
	View string
}

// TransmissionToken is the viewed result type that is projected based on a
// view.
type TransmissionToken struct {
	// Type to project
	Projected *TransmissionTokenView
	// View to render
	View string
}

// ProjectRoleCollection is the viewed result type that is projected based on a
// view.
type ProjectRoleCollection struct {
	// Type to project
	Projected ProjectRoleCollectionView
	// View to render
	View string
}

// AvailableRolesView is a type that runs validations on a projected type.
type AvailableRolesView struct {
	Roles []*AvailableRoleView
}

// AvailableRoleView is a type that runs validations on a projected type.
type AvailableRoleView struct {
	ID   *int32
	Name *string
}

// DownloadedPhotoView is a type that runs validations on a projected type.
type DownloadedPhotoView struct {
	Length      *int64
	ContentType *string
	Etag        *string
	Body        []byte
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	ID        *int32
	Name      *string
	Email     *string
	Bio       *string
	Photo     *UserPhotoView
	Admin     *bool
	UpdatedAt *int64
}

// UserPhotoView is a type that runs validations on a projected type.
type UserPhotoView struct {
	URL *string
}

// ProjectUsersView is a type that runs validations on a projected type.
type ProjectUsersView struct {
	Users ProjectUserCollectionView
}

// ProjectUserCollectionView is a type that runs validations on a projected
// type.
type ProjectUserCollectionView []*ProjectUserView

// ProjectUserView is a type that runs validations on a projected type.
type ProjectUserView struct {
	User       *UserView
	Role       *string
	Membership *string
	Invited    *bool
	Accepted   *bool
	Rejected   *bool
}

// TransmissionTokenView is a type that runs validations on a projected type.
type TransmissionTokenView struct {
	Token *string
	URL   *string
}

// ProjectRoleCollectionView is a type that runs validations on a projected
// type.
type ProjectRoleCollectionView []*ProjectRoleView

// ProjectRoleView is a type that runs validations on a projected type.
type ProjectRoleView struct {
	ID   *int32
	Name *string
}

var (
	// AvailableRolesMap is a map of attribute names in result type AvailableRoles
	// indexed by view name.
	AvailableRolesMap = map[string][]string{
		"default": []string{
			"roles",
		},
	}
	// DownloadedPhotoMap is a map of attribute names in result type
	// DownloadedPhoto indexed by view name.
	DownloadedPhotoMap = map[string][]string{
		"default": []string{
			"length",
			"body",
			"contentType",
			"etag",
		},
	}
	// UserMap is a map of attribute names in result type User indexed by view name.
	UserMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"email",
			"bio",
			"photo",
			"admin",
			"updatedAt",
		},
	}
	// ProjectUsersMap is a map of attribute names in result type ProjectUsers
	// indexed by view name.
	ProjectUsersMap = map[string][]string{
		"default": []string{
			"users",
		},
	}
	// TransmissionTokenMap is a map of attribute names in result type
	// TransmissionToken indexed by view name.
	TransmissionTokenMap = map[string][]string{
		"default": []string{
			"token",
			"url",
		},
	}
	// ProjectRoleCollectionMap is a map of attribute names in result type
	// ProjectRoleCollection indexed by view name.
	ProjectRoleCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
	// ProjectUserCollectionMap is a map of attribute names in result type
	// ProjectUserCollection indexed by view name.
	ProjectUserCollectionMap = map[string][]string{
		"default": []string{
			"user",
			"role",
			"membership",
			"invited",
			"accepted",
			"rejected",
		},
	}
	// ProjectUserMap is a map of attribute names in result type ProjectUser
	// indexed by view name.
	ProjectUserMap = map[string][]string{
		"default": []string{
			"user",
			"role",
			"membership",
			"invited",
			"accepted",
			"rejected",
		},
	}
	// ProjectRoleMap is a map of attribute names in result type ProjectRole
	// indexed by view name.
	ProjectRoleMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
)

// ValidateAvailableRoles runs the validations defined on the viewed result
// type AvailableRoles.
func ValidateAvailableRoles(result *AvailableRoles) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAvailableRolesView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateDownloadedPhoto runs the validations defined on the viewed result
// type DownloadedPhoto.
func ValidateDownloadedPhoto(result *DownloadedPhoto) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateDownloadedPhotoView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUser runs the validations defined on the viewed result type User.
func ValidateUser(result *User) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateProjectUsers runs the validations defined on the viewed result type
// ProjectUsers.
func ValidateProjectUsers(result *ProjectUsers) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateProjectUsersView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTransmissionToken runs the validations defined on the viewed result
// type TransmissionToken.
func ValidateTransmissionToken(result *TransmissionToken) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTransmissionTokenView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateProjectRoleCollection runs the validations defined on the viewed
// result type ProjectRoleCollection.
func ValidateProjectRoleCollection(result ProjectRoleCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateProjectRoleCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAvailableRolesView runs the validations defined on
// AvailableRolesView using the "default" view.
func ValidateAvailableRolesView(result *AvailableRolesView) (err error) {
	if result.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("roles", "result"))
	}
	for _, e := range result.Roles {
		if e != nil {
			if err2 := ValidateAvailableRoleView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAvailableRoleView runs the validations defined on AvailableRoleView.
func ValidateAvailableRoleView(result *AvailableRoleView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateDownloadedPhotoView runs the validations defined on
// DownloadedPhotoView using the "default" view.
func ValidateDownloadedPhotoView(result *DownloadedPhotoView) (err error) {
	if result.Length == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("length", "result"))
	}
	if result.ContentType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("contentType", "result"))
	}
	if result.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "result"))
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Bio == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bio", "result"))
	}
	if result.Admin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("admin", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updatedAt", "result"))
	}
	if result.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.name", *result.Name, "\\S"))
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 256, false))
		}
	}
	if result.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.email", *result.Email, goa.FormatEmail))
	}
	if result.Email != nil {
		if utf8.RuneCountInString(*result.Email) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.email", *result.Email, utf8.RuneCountInString(*result.Email), 40, false))
		}
	}
	return
}

// ValidateUserPhotoView runs the validations defined on UserPhotoView.
func ValidateUserPhotoView(result *UserPhotoView) (err error) {

	return
}

// ValidateProjectUsersView runs the validations defined on ProjectUsersView
// using the "default" view.
func ValidateProjectUsersView(result *ProjectUsersView) (err error) {

	if result.Users != nil {
		if err2 := ValidateProjectUserCollectionView(result.Users); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProjectUserCollectionView runs the validations defined on
// ProjectUserCollectionView using the "default" view.
func ValidateProjectUserCollectionView(result ProjectUserCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateProjectUserView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProjectUserView runs the validations defined on ProjectUserView
// using the "default" view.
func ValidateProjectUserView(result *ProjectUserView) (err error) {
	if result.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "result"))
	}
	if result.Membership == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("membership", "result"))
	}
	if result.Invited == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("invited", "result"))
	}
	if result.Accepted == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accepted", "result"))
	}
	if result.Rejected == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rejected", "result"))
	}
	if result.User != nil {
		if err2 := ValidateUserView(result.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTransmissionTokenView runs the validations defined on
// TransmissionTokenView using the "default" view.
func ValidateTransmissionTokenView(result *TransmissionTokenView) (err error) {
	if result.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	return
}

// ValidateProjectRoleCollectionView runs the validations defined on
// ProjectRoleCollectionView using the "default" view.
func ValidateProjectRoleCollectionView(result ProjectRoleCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateProjectRoleView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateProjectRoleView runs the validations defined on ProjectRoleView
// using the "default" view.
func ValidateProjectRoleView(result *ProjectRoleView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}
