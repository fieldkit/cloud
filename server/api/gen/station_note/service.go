// Code generated by goa v3.2.4, DO NOT EDIT.
//
// station_note service
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package stationnote

import (
	"context"

	stationnoteviews "github.com/fieldkit/cloud/server/api/gen/station_note/views"
	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the station_note service interface.
type Service interface {
	// Station implements station.
	Station(context.Context, *StationPayload) (res *StationNotes, err error)
	// AddNote implements add note.
	AddNote(context.Context, *AddNotePayload) (res *StationNote, err error)
	// UpdateNote implements update note.
	UpdateNote(context.Context, *UpdateNotePayload) (res *StationNote, err error)
	// DeleteNote implements delete note.
	DeleteNote(context.Context, *DeleteNotePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "station_note"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"station", "add note", "update note", "delete note"}

// StationPayload is the payload type of the station_note service station
// method.
type StationPayload struct {
	Auth      *string
	StationID int32
}

// StationNotes is the result type of the station_note service station method.
type StationNotes struct {
	Notes []*StationNote
}

// AddNotePayload is the payload type of the station_note service add note
// method.
type AddNotePayload struct {
	Auth      string
	UserID    int32
	Body      string
	StationID int32
}

// StationNote is the result type of the station_note service add note method.
type StationNote struct {
	ID        int32
	CreatedAt int64
	UpdatedAt int64
	Author    *StationNoteAuthor
	Body      string
}

// UpdateNotePayload is the payload type of the station_note service update
// note method.
type UpdateNotePayload struct {
	Auth          string
	StationID     int32
	StationNoteID int32
	Body          string
}

// DeleteNotePayload is the payload type of the station_note service delete
// note method.
type DeleteNotePayload struct {
	Auth          string
	StationID     int32
	StationNoteID int32
}

type StationNoteAuthor struct {
	ID    int32
	Name  string
	Photo *StationNoteAuthorPhoto
}

type StationNoteAuthorPhoto struct {
	URL string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeForbidden builds a goa.ServiceError from an error.
func MakeForbidden(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "forbidden",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not-found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad-request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewStationNotes initializes result type StationNotes from viewed result type
// StationNotes.
func NewStationNotes(vres *stationnoteviews.StationNotes) *StationNotes {
	return newStationNotes(vres.Projected)
}

// NewViewedStationNotes initializes viewed result type StationNotes from
// result type StationNotes using the given view.
func NewViewedStationNotes(res *StationNotes, view string) *stationnoteviews.StationNotes {
	p := newStationNotesView(res)
	return &stationnoteviews.StationNotes{Projected: p, View: "default"}
}

// NewStationNote initializes result type StationNote from viewed result type
// StationNote.
func NewStationNote(vres *stationnoteviews.StationNote) *StationNote {
	return newStationNote(vres.Projected)
}

// NewViewedStationNote initializes viewed result type StationNote from result
// type StationNote using the given view.
func NewViewedStationNote(res *StationNote, view string) *stationnoteviews.StationNote {
	p := newStationNoteView(res)
	return &stationnoteviews.StationNote{Projected: p, View: "default"}
}

// newStationNotes converts projected type StationNotes to service type
// StationNotes.
func newStationNotes(vres *stationnoteviews.StationNotesView) *StationNotes {
	res := &StationNotes{}
	if vres.Notes != nil {
		res.Notes = make([]*StationNote, len(vres.Notes))
		for i, val := range vres.Notes {
			res.Notes[i] = transformStationnoteviewsStationNoteViewToStationNote(val)
		}
	}
	return res
}

// newStationNotesView projects result type StationNotes to projected type
// StationNotesView using the "default" view.
func newStationNotesView(res *StationNotes) *stationnoteviews.StationNotesView {
	vres := &stationnoteviews.StationNotesView{}
	if res.Notes != nil {
		vres.Notes = make([]*stationnoteviews.StationNoteView, len(res.Notes))
		for i, val := range res.Notes {
			vres.Notes[i] = transformStationNoteToStationnoteviewsStationNoteView(val)
		}
	}
	return vres
}

// newStationNote converts projected type StationNote to service type
// StationNote.
func newStationNote(vres *stationnoteviews.StationNoteView) *StationNote {
	res := &StationNote{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	if vres.Body != nil {
		res.Body = *vres.Body
	}
	if vres.Author != nil {
		res.Author = transformStationnoteviewsStationNoteAuthorViewToStationNoteAuthor(vres.Author)
	}
	return res
}

// newStationNoteView projects result type StationNote to projected type
// StationNoteView using the "default" view.
func newStationNoteView(res *StationNote) *stationnoteviews.StationNoteView {
	vres := &stationnoteviews.StationNoteView{
		ID:        &res.ID,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
		Body:      &res.Body,
	}
	if res.Author != nil {
		vres.Author = transformStationNoteAuthorToStationnoteviewsStationNoteAuthorView(res.Author)
	}
	return vres
}

// transformStationnoteviewsStationNoteViewToStationNote builds a value of type
// *StationNote from a value of type *stationnoteviews.StationNoteView.
func transformStationnoteviewsStationNoteViewToStationNote(v *stationnoteviews.StationNoteView) *StationNote {
	if v == nil {
		return nil
	}
	res := &StationNote{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
		Body:      *v.Body,
	}
	if v.Author != nil {
		res.Author = transformStationnoteviewsStationNoteAuthorViewToStationNoteAuthor(v.Author)
	}

	return res
}

// transformStationnoteviewsStationNoteAuthorViewToStationNoteAuthor builds a
// value of type *StationNoteAuthor from a value of type
// *stationnoteviews.StationNoteAuthorView.
func transformStationnoteviewsStationNoteAuthorViewToStationNoteAuthor(v *stationnoteviews.StationNoteAuthorView) *StationNoteAuthor {
	res := &StationNoteAuthor{
		ID:   *v.ID,
		Name: *v.Name,
	}
	if v.Photo != nil {
		res.Photo = transformStationnoteviewsStationNoteAuthorPhotoViewToStationNoteAuthorPhoto(v.Photo)
	}

	return res
}

// transformStationnoteviewsStationNoteAuthorPhotoViewToStationNoteAuthorPhoto
// builds a value of type *StationNoteAuthorPhoto from a value of type
// *stationnoteviews.StationNoteAuthorPhotoView.
func transformStationnoteviewsStationNoteAuthorPhotoViewToStationNoteAuthorPhoto(v *stationnoteviews.StationNoteAuthorPhotoView) *StationNoteAuthorPhoto {
	if v == nil {
		return nil
	}
	res := &StationNoteAuthorPhoto{
		URL: *v.URL,
	}

	return res
}

// transformStationNoteToStationnoteviewsStationNoteView builds a value of type
// *stationnoteviews.StationNoteView from a value of type *StationNote.
func transformStationNoteToStationnoteviewsStationNoteView(v *StationNote) *stationnoteviews.StationNoteView {
	res := &stationnoteviews.StationNoteView{
		ID:        &v.ID,
		CreatedAt: &v.CreatedAt,
		UpdatedAt: &v.UpdatedAt,
		Body:      &v.Body,
	}
	if v.Author != nil {
		res.Author = transformStationNoteAuthorToStationnoteviewsStationNoteAuthorView(v.Author)
	}

	return res
}

// transformStationNoteAuthorToStationnoteviewsStationNoteAuthorView builds a
// value of type *stationnoteviews.StationNoteAuthorView from a value of type
// *StationNoteAuthor.
func transformStationNoteAuthorToStationnoteviewsStationNoteAuthorView(v *StationNoteAuthor) *stationnoteviews.StationNoteAuthorView {
	res := &stationnoteviews.StationNoteAuthorView{
		ID:   &v.ID,
		Name: &v.Name,
	}
	if v.Photo != nil {
		res.Photo = transformStationNoteAuthorPhotoToStationnoteviewsStationNoteAuthorPhotoView(v.Photo)
	}

	return res
}

// transformStationNoteAuthorPhotoToStationnoteviewsStationNoteAuthorPhotoView
// builds a value of type *stationnoteviews.StationNoteAuthorPhotoView from a
// value of type *StationNoteAuthorPhoto.
func transformStationNoteAuthorPhotoToStationnoteviewsStationNoteAuthorPhotoView(v *StationNoteAuthorPhoto) *stationnoteviews.StationNoteAuthorPhotoView {
	if v == nil {
		return nil
	}
	res := &stationnoteviews.StationNoteAuthorPhotoView{
		URL: &v.URL,
	}

	return res
}
