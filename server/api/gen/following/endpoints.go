// Code generated by goa v3.2.4, DO NOT EDIT.
//
// following endpoints
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package following

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "following" service endpoints.
type Endpoints struct {
	Follow    goa.Endpoint
	Unfollow  goa.Endpoint
	Followers goa.Endpoint
}

// NewEndpoints wraps the methods of the "following" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Follow:    NewFollowEndpoint(s, a.JWTAuth),
		Unfollow:  NewUnfollowEndpoint(s, a.JWTAuth),
		Followers: NewFollowersEndpoint(s),
	}
}

// Use applies the given middleware to all the "following" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Follow = m(e.Follow)
	e.Unfollow = m(e.Unfollow)
	e.Followers = m(e.Followers)
}

// NewFollowEndpoint returns an endpoint function that calls the method
// "follow" of service "following".
func NewFollowEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FollowPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Auth != nil {
			token = *p.Auth
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Follow(ctx, p)
	}
}

// NewUnfollowEndpoint returns an endpoint function that calls the method
// "unfollow" of service "following".
func NewUnfollowEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UnfollowPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Auth != nil {
			token = *p.Auth
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Unfollow(ctx, p)
	}
}

// NewFollowersEndpoint returns an endpoint function that calls the method
// "followers" of service "following".
func NewFollowersEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FollowersPayload)
		res, err := s.Followers(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFollowersPage(res, "default")
		return vres, nil
	}
}
