// Code generated by goa v3.2.4, DO NOT EDIT.
//
// collection views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Collection is the viewed result type that is projected based on a view.
type Collection struct {
	// Type to project
	Projected *CollectionView
	// View to render
	View string
}

// Collections is the viewed result type that is projected based on a view.
type Collections struct {
	// Type to project
	Projected *CollectionsView
	// View to render
	View string
}

// CollectionView is a type that runs validations on a projected type.
type CollectionView struct {
	ID          *int32
	Name        *string
	Description *string
	Tags        *string
	Private     *bool
}

// CollectionsView is a type that runs validations on a projected type.
type CollectionsView struct {
	Collections CollectionCollectionView
}

// CollectionCollectionView is a type that runs validations on a projected type.
type CollectionCollectionView []*CollectionView

var (
	// CollectionMap is a map of attribute names in result type Collection indexed
	// by view name.
	CollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"description",
			"tags",
			"private",
		},
	}
	// CollectionsMap is a map of attribute names in result type Collections
	// indexed by view name.
	CollectionsMap = map[string][]string{
		"default": []string{
			"collections",
		},
	}
	// CollectionCollectionMap is a map of attribute names in result type
	// CollectionCollection indexed by view name.
	CollectionCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"description",
			"tags",
			"private",
		},
	}
)

// ValidateCollection runs the validations defined on the viewed result type
// Collection.
func ValidateCollection(result *Collection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCollections runs the validations defined on the viewed result type
// Collections.
func ValidateCollections(result *Collections) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCollectionsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCollectionView runs the validations defined on CollectionView using
// the "default" view.
func ValidateCollectionView(result *CollectionView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Private == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("private", "result"))
	}
	if result.Tags == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tags", "result"))
	}
	return
}

// ValidateCollectionsView runs the validations defined on CollectionsView
// using the "default" view.
func ValidateCollectionsView(result *CollectionsView) (err error) {

	if result.Collections != nil {
		if err2 := ValidateCollectionCollectionView(result.Collections); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCollectionCollectionView runs the validations defined on
// CollectionCollectionView using the "default" view.
func ValidateCollectionCollectionView(result CollectionCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCollectionView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
