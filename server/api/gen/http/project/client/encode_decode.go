// Code generated by goa v3.2.4, DO NOT EDIT.
//
// project HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"strings"

	project "github.com/fieldkit/cloud/server/api/gen/project"
	projectviews "github.com/fieldkit/cloud/server/api/gen/project/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAddUpdateRequest instantiates a HTTP request object with method and
// path set to call the "project" service "add update" endpoint
func (c *Client) BuildAddUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.AddUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "add update", "*project.AddUpdatePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddUpdateProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "add update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddUpdateRequest returns an encoder for requests sent to the project
// add update server.
func EncodeAddUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AddUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "add update", "*project.AddUpdatePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "add update", err)
		}
		return nil
	}
}

// DecodeAddUpdateResponse returns a decoder for responses returned by the
// project add update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddUpdateResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAddUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddUpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			p := NewAddUpdateProjectUpdateOK(&body)
			view := "default"
			vres := &projectviews.ProjectUpdate{Projected: p, View: view}
			if err = projectviews.ValidateProjectUpdate(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "add update", err)
			}
			res := project.NewProjectUpdate(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AddUpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			err = ValidateAddUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add update", err)
			}
			return nil, NewAddUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddUpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			err = ValidateAddUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add update", err)
			}
			return nil, NewAddUpdateForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddUpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			err = ValidateAddUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add update", err)
			}
			return nil, NewAddUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AddUpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add update", err)
			}
			err = ValidateAddUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add update", err)
			}
			return nil, NewAddUpdateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "add update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteUpdateRequest instantiates a HTTP request object with method and
// path set to call the "project" service "delete update" endpoint
func (c *Client) BuildDeleteUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		updateID  int64
	)
	{
		p, ok := v.(*project.DeleteUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "delete update", "*project.DeleteUpdatePayload", v)
		}
		projectID = p.ProjectID
		updateID = p.UpdateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteUpdateProjectPath(projectID, updateID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "delete update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteUpdateRequest returns an encoder for requests sent to the
// project delete update server.
func EncodeDeleteUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.DeleteUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "delete update", "*project.DeleteUpdatePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteUpdateResponse returns a decoder for responses returned by the
// project delete update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteUpdateResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeleteUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteUpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			err = ValidateDeleteUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteUpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			err = ValidateDeleteUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeleteUpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			err = ValidateDeleteUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteUpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete update", err)
			}
			err = ValidateDeleteUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete update", err)
			}
			return nil, NewDeleteUpdateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "delete update", resp.StatusCode, string(body))
		}
	}
}

// BuildModifyUpdateRequest instantiates a HTTP request object with method and
// path set to call the "project" service "modify update" endpoint
func (c *Client) BuildModifyUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		updateID  int64
	)
	{
		p, ok := v.(*project.ModifyUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "modify update", "*project.ModifyUpdatePayload", v)
		}
		projectID = p.ProjectID
		updateID = p.UpdateID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ModifyUpdateProjectPath(projectID, updateID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "modify update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeModifyUpdateRequest returns an encoder for requests sent to the
// project modify update server.
func EncodeModifyUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.ModifyUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "modify update", "*project.ModifyUpdatePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewModifyUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "modify update", err)
		}
		return nil
	}
}

// DecodeModifyUpdateResponse returns a decoder for responses returned by the
// project modify update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeModifyUpdateResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeModifyUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ModifyUpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			p := NewModifyUpdateProjectUpdateOK(&body)
			view := "default"
			vres := &projectviews.ProjectUpdate{Projected: p, View: view}
			if err = projectviews.ValidateProjectUpdate(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "modify update", err)
			}
			res := project.NewProjectUpdate(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ModifyUpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			err = ValidateModifyUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "modify update", err)
			}
			return nil, NewModifyUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ModifyUpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			err = ValidateModifyUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "modify update", err)
			}
			return nil, NewModifyUpdateForbidden(&body)
		case http.StatusNotFound:
			var (
				body ModifyUpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			err = ValidateModifyUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "modify update", err)
			}
			return nil, NewModifyUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ModifyUpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "modify update", err)
			}
			err = ValidateModifyUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "modify update", err)
			}
			return nil, NewModifyUpdateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "modify update", resp.StatusCode, string(body))
		}
	}
}

// BuildInvitesRequest instantiates a HTTP request object with method and path
// set to call the "project" service "invites" endpoint
func (c *Client) BuildInvitesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InvitesProjectPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "invites", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInvitesRequest returns an encoder for requests sent to the project
// invites server.
func EncodeInvitesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.InvitesPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "invites", "*project.InvitesPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeInvitesResponse returns a decoder for responses returned by the
// project invites endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeInvitesResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeInvitesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InvitesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			p := NewInvitesPendingInvitesOK(&body)
			view := "default"
			vres := &projectviews.PendingInvites{Projected: p, View: view}
			if err = projectviews.ValidatePendingInvites(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "invites", err)
			}
			res := project.NewPendingInvites(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body InvitesUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			err = ValidateInvitesUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invites", err)
			}
			return nil, NewInvitesUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body InvitesForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			err = ValidateInvitesForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invites", err)
			}
			return nil, NewInvitesForbidden(&body)
		case http.StatusNotFound:
			var (
				body InvitesNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			err = ValidateInvitesNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invites", err)
			}
			return nil, NewInvitesNotFound(&body)
		case http.StatusBadRequest:
			var (
				body InvitesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invites", err)
			}
			err = ValidateInvitesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invites", err)
			}
			return nil, NewInvitesBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "invites", resp.StatusCode, string(body))
		}
	}
}

// BuildLookupInviteRequest instantiates a HTTP request object with method and
// path set to call the "project" service "lookup invite" endpoint
func (c *Client) BuildLookupInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		token string
	)
	{
		p, ok := v.(*project.LookupInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "lookup invite", "*project.LookupInvitePayload", v)
		}
		token = p.Token
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LookupInviteProjectPath(token)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "lookup invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLookupInviteRequest returns an encoder for requests sent to the
// project lookup invite server.
func EncodeLookupInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.LookupInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "lookup invite", "*project.LookupInvitePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeLookupInviteResponse returns a decoder for responses returned by the
// project lookup invite endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeLookupInviteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeLookupInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LookupInviteResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			p := NewLookupInvitePendingInvitesOK(&body)
			view := "default"
			vres := &projectviews.PendingInvites{Projected: p, View: view}
			if err = projectviews.ValidatePendingInvites(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "lookup invite", err)
			}
			res := project.NewPendingInvites(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body LookupInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			err = ValidateLookupInviteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body LookupInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			err = ValidateLookupInviteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteForbidden(&body)
		case http.StatusNotFound:
			var (
				body LookupInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			err = ValidateLookupInviteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body LookupInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "lookup invite", err)
			}
			err = ValidateLookupInviteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "lookup invite", err)
			}
			return nil, NewLookupInviteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "lookup invite", resp.StatusCode, string(body))
		}
	}
}

// BuildAcceptProjectInviteRequest instantiates a HTTP request object with
// method and path set to call the "project" service "accept project invite"
// endpoint
func (c *Client) BuildAcceptProjectInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.AcceptProjectInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "accept project invite", "*project.AcceptProjectInvitePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AcceptProjectInviteProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "accept project invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAcceptProjectInviteRequest returns an encoder for requests sent to the
// project accept project invite server.
func EncodeAcceptProjectInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AcceptProjectInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "accept project invite", "*project.AcceptProjectInvitePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeAcceptProjectInviteResponse returns a decoder for responses returned
// by the project accept project invite endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeAcceptProjectInviteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAcceptProjectInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body AcceptProjectInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept project invite", err)
			}
			err = ValidateAcceptProjectInviteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept project invite", err)
			}
			return nil, NewAcceptProjectInviteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AcceptProjectInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept project invite", err)
			}
			err = ValidateAcceptProjectInviteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept project invite", err)
			}
			return nil, NewAcceptProjectInviteForbidden(&body)
		case http.StatusNotFound:
			var (
				body AcceptProjectInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept project invite", err)
			}
			err = ValidateAcceptProjectInviteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept project invite", err)
			}
			return nil, NewAcceptProjectInviteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AcceptProjectInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept project invite", err)
			}
			err = ValidateAcceptProjectInviteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept project invite", err)
			}
			return nil, NewAcceptProjectInviteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "accept project invite", resp.StatusCode, string(body))
		}
	}
}

// BuildRejectProjectInviteRequest instantiates a HTTP request object with
// method and path set to call the "project" service "reject project invite"
// endpoint
func (c *Client) BuildRejectProjectInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.RejectProjectInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "reject project invite", "*project.RejectProjectInvitePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RejectProjectInviteProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "reject project invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRejectProjectInviteRequest returns an encoder for requests sent to the
// project reject project invite server.
func EncodeRejectProjectInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RejectProjectInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "reject project invite", "*project.RejectProjectInvitePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeRejectProjectInviteResponse returns a decoder for responses returned
// by the project reject project invite endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeRejectProjectInviteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRejectProjectInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RejectProjectInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject project invite", err)
			}
			err = ValidateRejectProjectInviteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject project invite", err)
			}
			return nil, NewRejectProjectInviteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RejectProjectInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject project invite", err)
			}
			err = ValidateRejectProjectInviteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject project invite", err)
			}
			return nil, NewRejectProjectInviteForbidden(&body)
		case http.StatusNotFound:
			var (
				body RejectProjectInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject project invite", err)
			}
			err = ValidateRejectProjectInviteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject project invite", err)
			}
			return nil, NewRejectProjectInviteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RejectProjectInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject project invite", err)
			}
			err = ValidateRejectProjectInviteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject project invite", err)
			}
			return nil, NewRejectProjectInviteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "reject project invite", resp.StatusCode, string(body))
		}
	}
}

// BuildAcceptInviteRequest instantiates a HTTP request object with method and
// path set to call the "project" service "accept invite" endpoint
func (c *Client) BuildAcceptInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*project.AcceptInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "accept invite", "*project.AcceptInvitePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AcceptInviteProjectPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "accept invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAcceptInviteRequest returns an encoder for requests sent to the
// project accept invite server.
func EncodeAcceptInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AcceptInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "accept invite", "*project.AcceptInvitePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Token != nil {
			values.Add("token", *p.Token)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAcceptInviteResponse returns a decoder for responses returned by the
// project accept invite endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAcceptInviteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAcceptInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body AcceptInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			err = ValidateAcceptInviteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AcceptInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			err = ValidateAcceptInviteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteForbidden(&body)
		case http.StatusNotFound:
			var (
				body AcceptInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			err = ValidateAcceptInviteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AcceptInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "accept invite", err)
			}
			err = ValidateAcceptInviteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "accept invite", err)
			}
			return nil, NewAcceptInviteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "accept invite", resp.StatusCode, string(body))
		}
	}
}

// BuildRejectInviteRequest instantiates a HTTP request object with method and
// path set to call the "project" service "reject invite" endpoint
func (c *Client) BuildRejectInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*project.RejectInvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "reject invite", "*project.RejectInvitePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RejectInviteProjectPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "reject invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRejectInviteRequest returns an encoder for requests sent to the
// project reject invite server.
func EncodeRejectInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RejectInvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "reject invite", "*project.RejectInvitePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Token != nil {
			values.Add("token", *p.Token)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRejectInviteResponse returns a decoder for responses returned by the
// project reject invite endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRejectInviteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRejectInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RejectInviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			err = ValidateRejectInviteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject invite", err)
			}
			return nil, NewRejectInviteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RejectInviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			err = ValidateRejectInviteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject invite", err)
			}
			return nil, NewRejectInviteForbidden(&body)
		case http.StatusNotFound:
			var (
				body RejectInviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			err = ValidateRejectInviteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject invite", err)
			}
			return nil, NewRejectInviteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RejectInviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "reject invite", err)
			}
			err = ValidateRejectInviteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "reject invite", err)
			}
			return nil, NewRejectInviteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "reject invite", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "project" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddProjectPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the project add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "add", "*project.AddPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the project
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			p := NewAddProjectOK(&body)
			view := "default"
			vres := &projectviews.Project{Projected: p, View: view}
			if err = projectviews.ValidateProject(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "add", err)
			}
			res := project.NewProject(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AddUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			err = ValidateAddUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add", err)
			}
			return nil, NewAddUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			err = ValidateAddForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add", err)
			}
			return nil, NewAddForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			err = ValidateAddNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add", err)
			}
			return nil, NewAddNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AddBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add", err)
			}
			err = ValidateAddBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add", err)
			}
			return nil, NewAddBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "project" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "update", "*project.UpdatePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProjectPath(projectID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the project
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "update", "*project.UpdatePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the project
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			p := NewUpdateProjectOK(&body)
			view := "default"
			vres := &projectviews.Project{Projected: p, View: view}
			if err = projectviews.ValidateProject(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "update", err)
			}
			res := project.NewProject(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "project" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "get", "*project.GetPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetProjectPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the project get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "get", "*project.GetPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the project
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			p := NewGetProjectOK(&body)
			view := "default"
			vres := &projectviews.Project{Projected: p, View: view}
			if err = projectviews.ValidateProject(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "get", err)
			}
			res := project.NewProject(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			err = ValidateGetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "get", err)
			}
			return nil, NewGetForbidden(&body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildListCommunityRequest instantiates a HTTP request object with method and
// path set to call the "project" service "list community" endpoint
func (c *Client) BuildListCommunityRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCommunityProjectPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "list community", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListCommunityRequest returns an encoder for requests sent to the
// project list community server.
func EncodeListCommunityRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.ListCommunityPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "list community", "*project.ListCommunityPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListCommunityResponse returns a decoder for responses returned by the
// project list community endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListCommunityResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListCommunityResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListCommunityResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			p := NewListCommunityProjectsOK(&body)
			view := "default"
			vres := &projectviews.Projects{Projected: p, View: view}
			if err = projectviews.ValidateProjects(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "list community", err)
			}
			res := project.NewProjects(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListCommunityUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			err = ValidateListCommunityUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list community", err)
			}
			return nil, NewListCommunityUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListCommunityForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			err = ValidateListCommunityForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list community", err)
			}
			return nil, NewListCommunityForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListCommunityNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			err = ValidateListCommunityNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list community", err)
			}
			return nil, NewListCommunityNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListCommunityBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list community", err)
			}
			err = ValidateListCommunityBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list community", err)
			}
			return nil, NewListCommunityBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "list community", resp.StatusCode, string(body))
		}
	}
}

// BuildListMineRequest instantiates a HTTP request object with method and path
// set to call the "project" service "list mine" endpoint
func (c *Client) BuildListMineRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListMineProjectPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "list mine", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListMineRequest returns an encoder for requests sent to the project
// list mine server.
func EncodeListMineRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.ListMinePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "list mine", "*project.ListMinePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListMineResponse returns a decoder for responses returned by the
// project list mine endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListMineResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListMineResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListMineResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			p := NewListMineProjectsOK(&body)
			view := "default"
			vres := &projectviews.Projects{Projected: p, View: view}
			if err = projectviews.ValidateProjects(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "list mine", err)
			}
			res := project.NewProjects(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListMineUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			err = ValidateListMineUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list mine", err)
			}
			return nil, NewListMineUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListMineForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			err = ValidateListMineForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list mine", err)
			}
			return nil, NewListMineForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListMineNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			err = ValidateListMineNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list mine", err)
			}
			return nil, NewListMineNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListMineBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "list mine", err)
			}
			err = ValidateListMineBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "list mine", err)
			}
			return nil, NewListMineBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "list mine", resp.StatusCode, string(body))
		}
	}
}

// BuildInviteRequest instantiates a HTTP request object with method and path
// set to call the "project" service "invite" endpoint
func (c *Client) BuildInviteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.InvitePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "invite", "*project.InvitePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InviteProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "invite", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInviteRequest returns an encoder for requests sent to the project
// invite server.
func EncodeInviteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.InvitePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "invite", "*project.InvitePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewInviteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "invite", err)
		}
		return nil
	}
}

// DecodeInviteResponse returns a decoder for responses returned by the project
// invite endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeInviteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeInviteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body InviteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			err = ValidateInviteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invite", err)
			}
			return nil, NewInviteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body InviteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			err = ValidateInviteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invite", err)
			}
			return nil, NewInviteForbidden(&body)
		case http.StatusNotFound:
			var (
				body InviteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			err = ValidateInviteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invite", err)
			}
			return nil, NewInviteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body InviteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "invite", err)
			}
			err = ValidateInviteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "invite", err)
			}
			return nil, NewInviteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "invite", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveUserRequest instantiates a HTTP request object with method and
// path set to call the "project" service "remove user" endpoint
func (c *Client) BuildRemoveUserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.RemoveUserPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "remove user", "*project.RemoveUserPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveUserProjectPath(projectID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "remove user", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveUserRequest returns an encoder for requests sent to the project
// remove user server.
func EncodeRemoveUserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RemoveUserPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "remove user", "*project.RemoveUserPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewRemoveUserRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("project", "remove user", err)
		}
		return nil
	}
}

// DecodeRemoveUserResponse returns a decoder for responses returned by the
// project remove user endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeRemoveUserResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRemoveUserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RemoveUserUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			err = ValidateRemoveUserUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove user", err)
			}
			return nil, NewRemoveUserUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RemoveUserForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			err = ValidateRemoveUserForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove user", err)
			}
			return nil, NewRemoveUserForbidden(&body)
		case http.StatusNotFound:
			var (
				body RemoveUserNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			err = ValidateRemoveUserNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove user", err)
			}
			return nil, NewRemoveUserNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RemoveUserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove user", err)
			}
			err = ValidateRemoveUserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove user", err)
			}
			return nil, NewRemoveUserBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "remove user", resp.StatusCode, string(body))
		}
	}
}

// BuildAddStationRequest instantiates a HTTP request object with method and
// path set to call the "project" service "add station" endpoint
func (c *Client) BuildAddStationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		stationID int32
	)
	{
		p, ok := v.(*project.AddStationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "add station", "*project.AddStationPayload", v)
		}
		projectID = p.ProjectID
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddStationProjectPath(projectID, stationID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "add station", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddStationRequest returns an encoder for requests sent to the project
// add station server.
func EncodeAddStationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.AddStationPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "add station", "*project.AddStationPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeAddStationResponse returns a decoder for responses returned by the
// project add station endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeAddStationResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAddStationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body AddStationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			err = ValidateAddStationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add station", err)
			}
			return nil, NewAddStationUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddStationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			err = ValidateAddStationForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add station", err)
			}
			return nil, NewAddStationForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddStationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			err = ValidateAddStationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add station", err)
			}
			return nil, NewAddStationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AddStationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "add station", err)
			}
			err = ValidateAddStationBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "add station", err)
			}
			return nil, NewAddStationBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "add station", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveStationRequest instantiates a HTTP request object with method and
// path set to call the "project" service "remove station" endpoint
func (c *Client) BuildRemoveStationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		stationID int32
	)
	{
		p, ok := v.(*project.RemoveStationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "remove station", "*project.RemoveStationPayload", v)
		}
		projectID = p.ProjectID
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveStationProjectPath(projectID, stationID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "remove station", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveStationRequest returns an encoder for requests sent to the
// project remove station server.
func EncodeRemoveStationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.RemoveStationPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "remove station", "*project.RemoveStationPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeRemoveStationResponse returns a decoder for responses returned by the
// project remove station endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeRemoveStationResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRemoveStationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RemoveStationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			err = ValidateRemoveStationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove station", err)
			}
			return nil, NewRemoveStationUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RemoveStationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			err = ValidateRemoveStationForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove station", err)
			}
			return nil, NewRemoveStationForbidden(&body)
		case http.StatusNotFound:
			var (
				body RemoveStationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			err = ValidateRemoveStationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove station", err)
			}
			return nil, NewRemoveStationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RemoveStationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "remove station", err)
			}
			err = ValidateRemoveStationBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "remove station", err)
			}
			return nil, NewRemoveStationBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "remove station", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "project" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "delete", "*project.DeletePayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteProjectPath(projectID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the project
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "delete", "*project.DeletePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the project
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadPhotoRequest instantiates a HTTP request object with method and
// path set to call the "project" service "upload photo" endpoint
func (c *Client) BuildUploadPhotoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
		body      io.Reader
	)
	{
		rd, ok := v.(*project.UploadPhotoRequestData)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "upload photo", "project.UploadPhotoRequestData", v)
		}
		p := rd.Payload
		body = rd.Body
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadPhotoProjectPath(projectID)}
	req, err := http.NewRequest("POST", u.String(), body)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "upload photo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadPhotoRequest returns an encoder for requests sent to the project
// upload photo server.
func EncodeUploadPhotoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		data, ok := v.(*project.UploadPhotoRequestData)
		if !ok {
			return goahttp.ErrInvalidType("project", "upload photo", "*project.UploadPhotoRequestData", v)
		}
		p := data.Payload
		{
			head := p.ContentType
			req.Header.Set("Content-Type", head)
		}
		{
			head := p.ContentLength
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("Content-Length", headStr)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUploadPhotoResponse returns a decoder for responses returned by the
// project upload photo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUploadPhotoResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUploadPhotoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body UploadPhotoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload photo", err)
			}
			err = ValidateUploadPhotoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "upload photo", err)
			}
			return nil, NewUploadPhotoUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UploadPhotoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload photo", err)
			}
			err = ValidateUploadPhotoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "upload photo", err)
			}
			return nil, NewUploadPhotoForbidden(&body)
		case http.StatusNotFound:
			var (
				body UploadPhotoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload photo", err)
			}
			err = ValidateUploadPhotoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "upload photo", err)
			}
			return nil, NewUploadPhotoNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UploadPhotoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "upload photo", err)
			}
			err = ValidateUploadPhotoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "upload photo", err)
			}
			return nil, NewUploadPhotoBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "upload photo", resp.StatusCode, string(body))
		}
	}
}

// // BuildUploadPhotoStreamPayload creates a streaming endpoint request payload
// from the method payload and the path to the file to be streamed
func BuildUploadPhotoStreamPayload(payload interface{}, fpath string) (*project.UploadPhotoRequestData, error) {
	f, err := os.Open(fpath)
	if err != nil {
		return nil, err
	}
	return &project.UploadPhotoRequestData{
		Payload: payload.(*project.UploadPhotoPayload),
		Body:    f,
	}, nil
}

// BuildDownloadPhotoRequest instantiates a HTTP request object with method and
// path set to call the "project" service "download photo" endpoint
func (c *Client) BuildDownloadPhotoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		projectID int32
	)
	{
		p, ok := v.(*project.DownloadPhotoPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("project", "download photo", "*project.DownloadPhotoPayload", v)
		}
		projectID = p.ProjectID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DownloadPhotoProjectPath(projectID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("project", "download photo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDownloadPhotoRequest returns an encoder for requests sent to the
// project download photo server.
func EncodeDownloadPhotoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*project.DownloadPhotoPayload)
		if !ok {
			return goahttp.ErrInvalidType("project", "download photo", "*project.DownloadPhotoPayload", v)
		}
		if p.IfNoneMatch != nil {
			head := *p.IfNoneMatch
			req.Header.Set("If-None-Match", head)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDownloadPhotoResponse returns a decoder for responses returned by the
// project download photo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDownloadPhotoResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDownloadPhotoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DownloadPhotoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download photo", err)
			}
			p := NewDownloadPhotoDownloadedPhotoOK(&body)
			view := "default"
			vres := &projectviews.DownloadedPhoto{Projected: p, View: view}
			if err = projectviews.ValidateDownloadedPhoto(vres); err != nil {
				return nil, goahttp.ErrValidationError("project", "download photo", err)
			}
			res := project.NewDownloadedPhoto(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DownloadPhotoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download photo", err)
			}
			err = ValidateDownloadPhotoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "download photo", err)
			}
			return nil, NewDownloadPhotoUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DownloadPhotoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download photo", err)
			}
			err = ValidateDownloadPhotoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "download photo", err)
			}
			return nil, NewDownloadPhotoForbidden(&body)
		case http.StatusNotFound:
			var (
				body DownloadPhotoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download photo", err)
			}
			err = ValidateDownloadPhotoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "download photo", err)
			}
			return nil, NewDownloadPhotoNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DownloadPhotoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("project", "download photo", err)
			}
			err = ValidateDownloadPhotoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("project", "download photo", err)
			}
			return nil, NewDownloadPhotoBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("project", "download photo", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPendingInviteResponseBodyToProjectviewsPendingInviteView builds a
// value of type *projectviews.PendingInviteView from a value of type
// *PendingInviteResponseBody.
func unmarshalPendingInviteResponseBodyToProjectviewsPendingInviteView(v *PendingInviteResponseBody) *projectviews.PendingInviteView {
	res := &projectviews.PendingInviteView{
		ID:   v.ID,
		Time: v.Time,
		Role: v.Role,
	}
	res.Project = unmarshalProjectSummaryResponseBodyToProjectviewsProjectSummaryView(v.Project)

	return res
}

// unmarshalProjectSummaryResponseBodyToProjectviewsProjectSummaryView builds a
// value of type *projectviews.ProjectSummaryView from a value of type
// *ProjectSummaryResponseBody.
func unmarshalProjectSummaryResponseBodyToProjectviewsProjectSummaryView(v *ProjectSummaryResponseBody) *projectviews.ProjectSummaryView {
	res := &projectviews.ProjectSummaryView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalProjectResponseBodyToProjectviewsProjectView builds a value of type
// *projectviews.ProjectView from a value of type *ProjectResponseBody.
func unmarshalProjectResponseBodyToProjectviewsProjectView(v *ProjectResponseBody) *projectviews.ProjectView {
	res := &projectviews.ProjectView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Goal:        v.Goal,
		Location:    v.Location,
		Tags:        v.Tags,
		Privacy:     v.Privacy,
		StartTime:   v.StartTime,
		EndTime:     v.EndTime,
		Photo:       v.Photo,
		ReadOnly:    v.ReadOnly,
	}
	res.Following = unmarshalProjectFollowingResponseBodyToProjectviewsProjectFollowingView(v.Following)

	return res
}

// unmarshalProjectFollowingResponseBodyToProjectviewsProjectFollowingView
// builds a value of type *projectviews.ProjectFollowingView from a value of
// type *ProjectFollowingResponseBody.
func unmarshalProjectFollowingResponseBodyToProjectviewsProjectFollowingView(v *ProjectFollowingResponseBody) *projectviews.ProjectFollowingView {
	res := &projectviews.ProjectFollowingView{
		Total:     v.Total,
		Following: v.Following,
	}

	return res
}
