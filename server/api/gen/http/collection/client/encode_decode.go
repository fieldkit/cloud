// Code generated by goa v3.1.2, DO NOT EDIT.
//
// collection HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	collection "github.com/fieldkit/cloud/server/api/gen/collection"
	collectionviews "github.com/fieldkit/cloud/server/api/gen/collection/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "collection" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddCollectionPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the collection add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "add", "*collection.AddPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("collection", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the collection
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add", err)
			}
			p := NewAddCollectionOK(&body)
			view := "default"
			vres := &collectionviews.Collection{Projected: p, View: view}
			if err = collectionviews.ValidateCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("collection", "add", err)
			}
			res := collection.NewCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AddUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add", err)
			}
			err = ValidateAddUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add", err)
			}
			return nil, NewAddUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add", err)
			}
			err = ValidateAddForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add", err)
			}
			return nil, NewAddForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add", err)
			}
			err = ValidateAddNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add", err)
			}
			return nil, NewAddNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AddBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add", err)
			}
			err = ValidateAddBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add", err)
			}
			return nil, NewAddBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "collection" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		collectionID int32
	)
	{
		p, ok := v.(*collection.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "update", "*collection.UpdatePayload", v)
		}
		collectionID = p.CollectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCollectionPath(collectionID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the collection
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "update", "*collection.UpdatePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("collection", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// collection update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "update", err)
			}
			p := NewUpdateCollectionOK(&body)
			view := "default"
			vres := &collectionviews.Collection{Projected: p, View: view}
			if err = collectionviews.ValidateCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("collection", "update", err)
			}
			res := collection.NewCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "collection" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		collectionID int32
	)
	{
		p, ok := v.(*collection.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "get", "*collection.GetPayload", v)
		}
		collectionID = p.CollectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCollectionPath(collectionID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the collection get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "get", "*collection.GetPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the collection
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "get", err)
			}
			p := NewGetCollectionOK(&body)
			view := "default"
			vres := &collectionviews.Collection{Projected: p, View: view}
			if err = collectionviews.ValidateCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("collection", "get", err)
			}
			res := collection.NewCollection(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "get", err)
			}
			err = ValidateGetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "get", err)
			}
			return nil, NewGetForbidden(&body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildListMineRequest instantiates a HTTP request object with method and path
// set to call the "collection" service "list mine" endpoint
func (c *Client) BuildListMineRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListMineCollectionPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "list mine", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListMineRequest returns an encoder for requests sent to the collection
// list mine server.
func EncodeListMineRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.ListMinePayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "list mine", "*collection.ListMinePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeListMineResponse returns a decoder for responses returned by the
// collection list mine endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListMineResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListMineResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListMineResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "list mine", err)
			}
			p := NewListMineCollectionsOK(&body)
			view := "default"
			vres := &collectionviews.Collections{Projected: p, View: view}
			if err = collectionviews.ValidateCollections(vres); err != nil {
				return nil, goahttp.ErrValidationError("collection", "list mine", err)
			}
			res := collection.NewCollections(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListMineUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "list mine", err)
			}
			err = ValidateListMineUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "list mine", err)
			}
			return nil, NewListMineUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListMineForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "list mine", err)
			}
			err = ValidateListMineForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "list mine", err)
			}
			return nil, NewListMineForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListMineNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "list mine", err)
			}
			err = ValidateListMineNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "list mine", err)
			}
			return nil, NewListMineNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListMineBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "list mine", err)
			}
			err = ValidateListMineBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "list mine", err)
			}
			return nil, NewListMineBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "list mine", resp.StatusCode, string(body))
		}
	}
}

// BuildAddStationRequest instantiates a HTTP request object with method and
// path set to call the "collection" service "add station" endpoint
func (c *Client) BuildAddStationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		collectionID int32
		stationID    int32
	)
	{
		p, ok := v.(*collection.AddStationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "add station", "*collection.AddStationPayload", v)
		}
		collectionID = p.CollectionID
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddStationCollectionPath(collectionID, stationID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "add station", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddStationRequest returns an encoder for requests sent to the
// collection add station server.
func EncodeAddStationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.AddStationPayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "add station", "*collection.AddStationPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeAddStationResponse returns a decoder for responses returned by the
// collection add station endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAddStationResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAddStationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body AddStationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add station", err)
			}
			err = ValidateAddStationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add station", err)
			}
			return nil, NewAddStationUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddStationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add station", err)
			}
			err = ValidateAddStationForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add station", err)
			}
			return nil, NewAddStationForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddStationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add station", err)
			}
			err = ValidateAddStationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add station", err)
			}
			return nil, NewAddStationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AddStationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "add station", err)
			}
			err = ValidateAddStationBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "add station", err)
			}
			return nil, NewAddStationBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "add station", resp.StatusCode, string(body))
		}
	}
}

// BuildRemoveStationRequest instantiates a HTTP request object with method and
// path set to call the "collection" service "remove station" endpoint
func (c *Client) BuildRemoveStationRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		collectionID int32
		stationID    int32
	)
	{
		p, ok := v.(*collection.RemoveStationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "remove station", "*collection.RemoveStationPayload", v)
		}
		collectionID = p.CollectionID
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RemoveStationCollectionPath(collectionID, stationID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "remove station", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRemoveStationRequest returns an encoder for requests sent to the
// collection remove station server.
func EncodeRemoveStationRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.RemoveStationPayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "remove station", "*collection.RemoveStationPayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeRemoveStationResponse returns a decoder for responses returned by the
// collection remove station endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRemoveStationResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRemoveStationResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body RemoveStationUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "remove station", err)
			}
			err = ValidateRemoveStationUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "remove station", err)
			}
			return nil, NewRemoveStationUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RemoveStationForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "remove station", err)
			}
			err = ValidateRemoveStationForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "remove station", err)
			}
			return nil, NewRemoveStationForbidden(&body)
		case http.StatusNotFound:
			var (
				body RemoveStationNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "remove station", err)
			}
			err = ValidateRemoveStationNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "remove station", err)
			}
			return nil, NewRemoveStationNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RemoveStationBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "remove station", err)
			}
			err = ValidateRemoveStationBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "remove station", err)
			}
			return nil, NewRemoveStationBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "remove station", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "collection" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		collectionID int32
	)
	{
		p, ok := v.(*collection.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("collection", "delete", "*collection.DeletePayload", v)
		}
		collectionID = p.CollectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCollectionPath(collectionID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("collection", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the collection
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*collection.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("collection", "delete", "*collection.DeletePayload", v)
		}
		{
			head := p.Auth
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// collection delete endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("collection", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("collection", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("collection", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCollectionResponseBodyToCollectionviewsCollectionView builds a
// value of type *collectionviews.CollectionView from a value of type
// *CollectionResponseBody.
func unmarshalCollectionResponseBodyToCollectionviewsCollectionView(v *CollectionResponseBody) *collectionviews.CollectionView {
	res := &collectionviews.CollectionView{
		ID:          v.ID,
		Name:        v.Name,
		Description: v.Description,
		Tags:        v.Tags,
		Private:     v.Private,
	}

	return res
}
