// Code generated by goa v3.2.4, DO NOT EDIT.
//
// firmware HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	firmware "github.com/fieldkit/cloud/server/api/gen/firmware"
	firmwareviews "github.com/fieldkit/cloud/server/api/gen/firmware/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "firmware" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Etag    *string `form:"etag,omitempty" json:"etag,omitempty" xml:"etag,omitempty"`
	Module  *string `form:"module,omitempty" json:"module,omitempty" xml:"module,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
	URL     *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	Meta    *string `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// ListResponseBody is the type of the "firmware" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Firmwares FirmwareSummaryResponseBodyCollection `form:"firmwares" json:"firmwares" xml:"firmwares"`
}

// DownloadUnauthorizedResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "unauthorized" error.
type DownloadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadForbiddenResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "forbidden" error.
type DownloadForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadNotFoundResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "not-found" error.
type DownloadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadBadRequestResponseBody is the type of the "firmware" service
// "download" endpoint HTTP response body for the "bad-request" error.
type DownloadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddUnauthorizedResponseBody is the type of the "firmware" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddForbiddenResponseBody is the type of the "firmware" service "add"
// endpoint HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddNotFoundResponseBody is the type of the "firmware" service "add" endpoint
// HTTP response body for the "not-found" error.
type AddNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddBadRequestResponseBody is the type of the "firmware" service "add"
// endpoint HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListUnauthorizedResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "unauthorized" error.
type ListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListForbiddenResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "forbidden" error.
type ListForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListNotFoundResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "not-found" error.
type ListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBadRequestResponseBody is the type of the "firmware" service "list"
// endpoint HTTP response body for the "bad-request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "firmware" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "firmware" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "firmware" service "delete"
// endpoint HTTP response body for the "not-found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "firmware" service "delete"
// endpoint HTTP response body for the "bad-request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FirmwareSummaryResponseBodyCollection is used to define fields on response
// body types.
type FirmwareSummaryResponseBodyCollection []*FirmwareSummaryResponseBody

// FirmwareSummaryResponseBody is used to define fields on response body types.
type FirmwareSummaryResponseBody struct {
	ID          int32                  `form:"id" json:"id" xml:"id"`
	Time        string                 `form:"time" json:"time" xml:"time"`
	Etag        string                 `form:"etag" json:"etag" xml:"etag"`
	Module      string                 `form:"module" json:"module" xml:"module"`
	Profile     string                 `form:"profile" json:"profile" xml:"profile"`
	URL         string                 `form:"url" json:"url" xml:"url"`
	Meta        map[string]interface{} `form:"meta" json:"meta" xml:"meta"`
	BuildNumber int32                  `form:"buildNumber" json:"buildNumber" xml:"buildNumber"`
	BuildTime   int64                  `form:"buildTime" json:"buildTime" xml:"buildTime"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "firmware" service.
func NewListResponseBody(res *firmwareviews.FirmwaresView) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Firmwares != nil {
		body.Firmwares = make([]*FirmwareSummaryResponseBody, len(res.Firmwares))
		for i, val := range res.Firmwares {
			body.Firmwares[i] = marshalFirmwareviewsFirmwareSummaryViewToFirmwareSummaryResponseBody(val)
		}
	}
	return body
}

// NewDownloadUnauthorizedResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "firmware" service.
func NewDownloadUnauthorizedResponseBody(res *goa.ServiceError) *DownloadUnauthorizedResponseBody {
	body := &DownloadUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadForbiddenResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "firmware" service.
func NewDownloadForbiddenResponseBody(res *goa.ServiceError) *DownloadForbiddenResponseBody {
	body := &DownloadForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadNotFoundResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "firmware" service.
func NewDownloadNotFoundResponseBody(res *goa.ServiceError) *DownloadNotFoundResponseBody {
	body := &DownloadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadBadRequestResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "firmware" service.
func NewDownloadBadRequestResponseBody(res *goa.ServiceError) *DownloadBadRequestResponseBody {
	body := &DownloadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddUnauthorizedResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "firmware" service.
func NewAddUnauthorizedResponseBody(res *goa.ServiceError) *AddUnauthorizedResponseBody {
	body := &AddUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddForbiddenResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "firmware" service.
func NewAddForbiddenResponseBody(res *goa.ServiceError) *AddForbiddenResponseBody {
	body := &AddForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddNotFoundResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "firmware" service.
func NewAddNotFoundResponseBody(res *goa.ServiceError) *AddNotFoundResponseBody {
	body := &AddNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddBadRequestResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "firmware" service.
func NewAddBadRequestResponseBody(res *goa.ServiceError) *AddBadRequestResponseBody {
	body := &AddBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "firmware" service.
func NewListUnauthorizedResponseBody(res *goa.ServiceError) *ListUnauthorizedResponseBody {
	body := &ListUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListForbiddenResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "firmware" service.
func NewListForbiddenResponseBody(res *goa.ServiceError) *ListForbiddenResponseBody {
	body := &ListForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "firmware" service.
func NewListNotFoundResponseBody(res *goa.ServiceError) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "firmware" service.
func NewListBadRequestResponseBody(res *goa.ServiceError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "firmware" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "firmware" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "firmware" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "firmware" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPayload builds a firmware service download endpoint payload.
func NewDownloadPayload(firmwareID int32) *firmware.DownloadPayload {
	v := &firmware.DownloadPayload{}
	v.FirmwareID = firmwareID

	return v
}

// NewAddPayload builds a firmware service add endpoint payload.
func NewAddPayload(body *AddRequestBody, auth *string) *firmware.AddPayload {
	v := &firmware.AddFirmwarePayload{
		Etag:    *body.Etag,
		Module:  *body.Module,
		Profile: *body.Profile,
		URL:     *body.URL,
		Meta:    *body.Meta,
	}
	res := &firmware.AddPayload{
		Firmware: v,
	}
	res.Auth = auth

	return res
}

// NewListPayload builds a firmware service list endpoint payload.
func NewListPayload(module *string, profile *string, pageSize *int32, page *int32, auth *string) *firmware.ListPayload {
	v := &firmware.ListPayload{}
	v.Module = module
	v.Profile = profile
	v.PageSize = pageSize
	v.Page = page
	v.Auth = auth

	return v
}

// NewDeletePayload builds a firmware service delete endpoint payload.
func NewDeletePayload(firmwareID int32, auth *string) *firmware.DeletePayload {
	v := &firmware.DeletePayload{}
	v.FirmwareID = firmwareID
	v.Auth = auth

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Etag == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("etag", "body"))
	}
	if body.Module == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("module", "body"))
	}
	if body.Profile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("profile", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	return
}
