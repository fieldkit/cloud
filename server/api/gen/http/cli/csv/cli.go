// Code generated by goa v3.1.2, DO NOT EDIT.
//
// csv HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	activityc "github.com/fieldkit/cloud/server/api/gen/http/activity/client"
	collectionc "github.com/fieldkit/cloud/server/api/gen/http/collection/client"
	csvc "github.com/fieldkit/cloud/server/api/gen/http/csv/client"
	datac "github.com/fieldkit/cloud/server/api/gen/http/data/client"
	exportc "github.com/fieldkit/cloud/server/api/gen/http/export/client"
	firmwarec "github.com/fieldkit/cloud/server/api/gen/http/firmware/client"
	followingc "github.com/fieldkit/cloud/server/api/gen/http/following/client"
	informationc "github.com/fieldkit/cloud/server/api/gen/http/information/client"
	ingestionc "github.com/fieldkit/cloud/server/api/gen/http/ingestion/client"
	modulesc "github.com/fieldkit/cloud/server/api/gen/http/modules/client"
	notesc "github.com/fieldkit/cloud/server/api/gen/http/notes/client"
	projectc "github.com/fieldkit/cloud/server/api/gen/http/project/client"
	recordsc "github.com/fieldkit/cloud/server/api/gen/http/records/client"
	sensorc "github.com/fieldkit/cloud/server/api/gen/http/sensor/client"
	stationc "github.com/fieldkit/cloud/server/api/gen/http/station/client"
	tasksc "github.com/fieldkit/cloud/server/api/gen/http/tasks/client"
	testc "github.com/fieldkit/cloud/server/api/gen/http/test/client"
	userc "github.com/fieldkit/cloud/server/api/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `csv noop
activity (station|project)
collection (add|update|get|list- mine|add- station|remove- station|delete)
data device- summary
export (list- mine|status|download|csv|json- lines)
firmware (download|add|list|delete)
following (follow|unfollow|followers)
ingestion (process- pending|walk- everything|process- station|process- ingestion|delete)
modules meta
notes (update|get|download- media|upload- media)
project (add- update|delete- update|modify- update|invites|lookup- invite|accept- project- invite|reject- project- invite|accept- invite|reject- invite|add|update|get|list- community|list- mine|invite|remove- user|add- station|remove- station|delete|upload- photo|download- photo)
records (data|meta|resolved)
sensor (meta|data)
information (device- layout|firmware- statistics)
station (add|get|update|list- mine|list- project|download- photo|list- all|delete)
tasks five
test (get|error|email)
user (roles|delete|upload- photo|download- photo|login|recovery- lookup|recovery|logout|refresh|send- validation|validate|add|update|change- password|get- current|list- by- project|issue- transmission- token|project- roles|admin- delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` csv noop` + "\n" +
		os.Args[0] + ` activity station --id 9084208847786097828 --page 3322321625394334420 --auth "Quaerat omnis velit."` + "\n" +
		os.Args[0] + ` collection add --body '{
      "description": "Nisi dolor.",
      "name": "Dolor quo.",
      "private": true,
      "tags": "Voluptates maxime quae fuga nobis repellat debitis."
   }' --auth "Deleniti velit vel accusamus consequatur sunt quam."` + "\n" +
		os.Args[0] + ` data device- summary --device-id "Atque enim maxime natus fugiat maiores sunt." --auth "Optio deserunt eos neque totam est."` + "\n" +
		os.Args[0] + ` export list- mine --auth "Provident qui ea ea rem facere."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		csvFlags = flag.NewFlagSet("csv", flag.ContinueOnError)

		csvNoopFlags = flag.NewFlagSet("noop", flag.ExitOnError)

		activityFlags = flag.NewFlagSet("activity", flag.ContinueOnError)

		activityStationFlags    = flag.NewFlagSet("station", flag.ExitOnError)
		activityStationIDFlag   = activityStationFlags.String("id", "REQUIRED", "")
		activityStationPageFlag = activityStationFlags.String("page", "", "")
		activityStationAuthFlag = activityStationFlags.String("auth", "", "")

		activityProjectFlags    = flag.NewFlagSet("project", flag.ExitOnError)
		activityProjectIDFlag   = activityProjectFlags.String("id", "REQUIRED", "")
		activityProjectPageFlag = activityProjectFlags.String("page", "", "")
		activityProjectAuthFlag = activityProjectFlags.String("auth", "", "")

		collectionFlags = flag.NewFlagSet("collection", flag.ContinueOnError)

		collectionAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		collectionAddBodyFlag = collectionAddFlags.String("body", "REQUIRED", "")
		collectionAddAuthFlag = collectionAddFlags.String("auth", "REQUIRED", "")

		collectionUpdateFlags            = flag.NewFlagSet("update", flag.ExitOnError)
		collectionUpdateBodyFlag         = collectionUpdateFlags.String("body", "REQUIRED", "")
		collectionUpdateCollectionIDFlag = collectionUpdateFlags.String("collection-id", "REQUIRED", "")
		collectionUpdateAuthFlag         = collectionUpdateFlags.String("auth", "REQUIRED", "")

		collectionGetFlags            = flag.NewFlagSet("get", flag.ExitOnError)
		collectionGetCollectionIDFlag = collectionGetFlags.String("collection-id", "REQUIRED", "")
		collectionGetAuthFlag         = collectionGetFlags.String("auth", "", "")

		collectionListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		collectionListMineAuthFlag = collectionListMineFlags.String("auth", "REQUIRED", "")

		collectionAddStationFlags            = flag.NewFlagSet("add- station", flag.ExitOnError)
		collectionAddStationCollectionIDFlag = collectionAddStationFlags.String("collection-id", "REQUIRED", "")
		collectionAddStationStationIDFlag    = collectionAddStationFlags.String("station-id", "REQUIRED", "")
		collectionAddStationAuthFlag         = collectionAddStationFlags.String("auth", "REQUIRED", "")

		collectionRemoveStationFlags            = flag.NewFlagSet("remove- station", flag.ExitOnError)
		collectionRemoveStationCollectionIDFlag = collectionRemoveStationFlags.String("collection-id", "REQUIRED", "")
		collectionRemoveStationStationIDFlag    = collectionRemoveStationFlags.String("station-id", "REQUIRED", "")
		collectionRemoveStationAuthFlag         = collectionRemoveStationFlags.String("auth", "REQUIRED", "")

		collectionDeleteFlags            = flag.NewFlagSet("delete", flag.ExitOnError)
		collectionDeleteCollectionIDFlag = collectionDeleteFlags.String("collection-id", "REQUIRED", "")
		collectionDeleteAuthFlag         = collectionDeleteFlags.String("auth", "REQUIRED", "")

		dataFlags = flag.NewFlagSet("data", flag.ContinueOnError)

		dataDeviceSummaryFlags        = flag.NewFlagSet("device- summary", flag.ExitOnError)
		dataDeviceSummaryDeviceIDFlag = dataDeviceSummaryFlags.String("device-id", "REQUIRED", "")
		dataDeviceSummaryAuthFlag     = dataDeviceSummaryFlags.String("auth", "", "")

		exportFlags = flag.NewFlagSet("export", flag.ContinueOnError)

		exportListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		exportListMineAuthFlag = exportListMineFlags.String("auth", "REQUIRED", "")

		exportStatusFlags    = flag.NewFlagSet("status", flag.ExitOnError)
		exportStatusIDFlag   = exportStatusFlags.String("id", "REQUIRED", "")
		exportStatusAuthFlag = exportStatusFlags.String("auth", "REQUIRED", "")

		exportDownloadFlags    = flag.NewFlagSet("download", flag.ExitOnError)
		exportDownloadIDFlag   = exportDownloadFlags.String("id", "REQUIRED", "")
		exportDownloadAuthFlag = exportDownloadFlags.String("auth", "REQUIRED", "")

		exportCsvFlags          = flag.NewFlagSet("csv", flag.ExitOnError)
		exportCsvStartFlag      = exportCsvFlags.String("start", "", "")
		exportCsvEndFlag        = exportCsvFlags.String("end", "", "")
		exportCsvStationsFlag   = exportCsvFlags.String("stations", "", "")
		exportCsvSensorsFlag    = exportCsvFlags.String("sensors", "", "")
		exportCsvResolutionFlag = exportCsvFlags.String("resolution", "", "")
		exportCsvAggregateFlag  = exportCsvFlags.String("aggregate", "", "")
		exportCsvCompleteFlag   = exportCsvFlags.String("complete", "", "")
		exportCsvTailFlag       = exportCsvFlags.String("tail", "", "")
		exportCsvAuthFlag       = exportCsvFlags.String("auth", "REQUIRED", "")

		exportJSONLinesFlags          = flag.NewFlagSet("json- lines", flag.ExitOnError)
		exportJSONLinesStartFlag      = exportJSONLinesFlags.String("start", "", "")
		exportJSONLinesEndFlag        = exportJSONLinesFlags.String("end", "", "")
		exportJSONLinesStationsFlag   = exportJSONLinesFlags.String("stations", "", "")
		exportJSONLinesSensorsFlag    = exportJSONLinesFlags.String("sensors", "", "")
		exportJSONLinesResolutionFlag = exportJSONLinesFlags.String("resolution", "", "")
		exportJSONLinesAggregateFlag  = exportJSONLinesFlags.String("aggregate", "", "")
		exportJSONLinesCompleteFlag   = exportJSONLinesFlags.String("complete", "", "")
		exportJSONLinesTailFlag       = exportJSONLinesFlags.String("tail", "", "")
		exportJSONLinesAuthFlag       = exportJSONLinesFlags.String("auth", "REQUIRED", "")

		firmwareFlags = flag.NewFlagSet("firmware", flag.ContinueOnError)

		firmwareDownloadFlags          = flag.NewFlagSet("download", flag.ExitOnError)
		firmwareDownloadFirmwareIDFlag = firmwareDownloadFlags.String("firmware-id", "REQUIRED", "")

		firmwareAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		firmwareAddBodyFlag = firmwareAddFlags.String("body", "REQUIRED", "")
		firmwareAddAuthFlag = firmwareAddFlags.String("auth", "", "")

		firmwareListFlags        = flag.NewFlagSet("list", flag.ExitOnError)
		firmwareListModuleFlag   = firmwareListFlags.String("module", "", "")
		firmwareListProfileFlag  = firmwareListFlags.String("profile", "", "")
		firmwareListPageSizeFlag = firmwareListFlags.String("page-size", "", "")
		firmwareListPageFlag     = firmwareListFlags.String("page", "", "")
		firmwareListAuthFlag     = firmwareListFlags.String("auth", "", "")

		firmwareDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		firmwareDeleteFirmwareIDFlag = firmwareDeleteFlags.String("firmware-id", "REQUIRED", "")
		firmwareDeleteAuthFlag       = firmwareDeleteFlags.String("auth", "", "")

		followingFlags = flag.NewFlagSet("following", flag.ContinueOnError)

		followingFollowFlags    = flag.NewFlagSet("follow", flag.ExitOnError)
		followingFollowIDFlag   = followingFollowFlags.String("id", "REQUIRED", "")
		followingFollowAuthFlag = followingFollowFlags.String("auth", "", "")

		followingUnfollowFlags    = flag.NewFlagSet("unfollow", flag.ExitOnError)
		followingUnfollowIDFlag   = followingUnfollowFlags.String("id", "REQUIRED", "")
		followingUnfollowAuthFlag = followingUnfollowFlags.String("auth", "", "")

		followingFollowersFlags    = flag.NewFlagSet("followers", flag.ExitOnError)
		followingFollowersIDFlag   = followingFollowersFlags.String("id", "REQUIRED", "")
		followingFollowersPageFlag = followingFollowersFlags.String("page", "", "")

		ingestionFlags = flag.NewFlagSet("ingestion", flag.ContinueOnError)

		ingestionProcessPendingFlags    = flag.NewFlagSet("process- pending", flag.ExitOnError)
		ingestionProcessPendingAuthFlag = ingestionProcessPendingFlags.String("auth", "REQUIRED", "")

		ingestionWalkEverythingFlags    = flag.NewFlagSet("walk- everything", flag.ExitOnError)
		ingestionWalkEverythingAuthFlag = ingestionWalkEverythingFlags.String("auth", "REQUIRED", "")

		ingestionProcessStationFlags          = flag.NewFlagSet("process- station", flag.ExitOnError)
		ingestionProcessStationStationIDFlag  = ingestionProcessStationFlags.String("station-id", "REQUIRED", "")
		ingestionProcessStationCompletelyFlag = ingestionProcessStationFlags.String("completely", "", "")
		ingestionProcessStationAuthFlag       = ingestionProcessStationFlags.String("auth", "REQUIRED", "")

		ingestionProcessIngestionFlags           = flag.NewFlagSet("process- ingestion", flag.ExitOnError)
		ingestionProcessIngestionIngestionIDFlag = ingestionProcessIngestionFlags.String("ingestion-id", "REQUIRED", "")
		ingestionProcessIngestionAuthFlag        = ingestionProcessIngestionFlags.String("auth", "REQUIRED", "")

		ingestionDeleteFlags           = flag.NewFlagSet("delete", flag.ExitOnError)
		ingestionDeleteIngestionIDFlag = ingestionDeleteFlags.String("ingestion-id", "REQUIRED", "")
		ingestionDeleteAuthFlag        = ingestionDeleteFlags.String("auth", "REQUIRED", "")

		modulesFlags = flag.NewFlagSet("modules", flag.ContinueOnError)

		modulesMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		notesFlags = flag.NewFlagSet("notes", flag.ContinueOnError)

		notesUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		notesUpdateBodyFlag      = notesUpdateFlags.String("body", "REQUIRED", "")
		notesUpdateStationIDFlag = notesUpdateFlags.String("station-id", "REQUIRED", "")
		notesUpdateAuthFlag      = notesUpdateFlags.String("auth", "REQUIRED", "")

		notesGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		notesGetStationIDFlag = notesGetFlags.String("station-id", "REQUIRED", "")
		notesGetAuthFlag      = notesGetFlags.String("auth", "REQUIRED", "")

		notesDownloadMediaFlags       = flag.NewFlagSet("download- media", flag.ExitOnError)
		notesDownloadMediaMediaIDFlag = notesDownloadMediaFlags.String("media-id", "REQUIRED", "")
		notesDownloadMediaAuthFlag    = notesDownloadMediaFlags.String("auth", "REQUIRED", "")

		notesUploadMediaFlags             = flag.NewFlagSet("upload- media", flag.ExitOnError)
		notesUploadMediaStationIDFlag     = notesUploadMediaFlags.String("station-id", "REQUIRED", "")
		notesUploadMediaKeyFlag           = notesUploadMediaFlags.String("key", "REQUIRED", "")
		notesUploadMediaContentTypeFlag   = notesUploadMediaFlags.String("content-type", "REQUIRED", "")
		notesUploadMediaContentLengthFlag = notesUploadMediaFlags.String("content-length", "REQUIRED", "")
		notesUploadMediaAuthFlag          = notesUploadMediaFlags.String("auth", "REQUIRED", "")
		notesUploadMediaStreamFlag        = notesUploadMediaFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		projectFlags = flag.NewFlagSet("project", flag.ContinueOnError)

		projectAddUpdateFlags         = flag.NewFlagSet("add- update", flag.ExitOnError)
		projectAddUpdateBodyFlag      = projectAddUpdateFlags.String("body", "REQUIRED", "")
		projectAddUpdateProjectIDFlag = projectAddUpdateFlags.String("project-id", "REQUIRED", "")
		projectAddUpdateAuthFlag      = projectAddUpdateFlags.String("auth", "REQUIRED", "")

		projectDeleteUpdateFlags         = flag.NewFlagSet("delete- update", flag.ExitOnError)
		projectDeleteUpdateProjectIDFlag = projectDeleteUpdateFlags.String("project-id", "REQUIRED", "")
		projectDeleteUpdateUpdateIDFlag  = projectDeleteUpdateFlags.String("update-id", "REQUIRED", "")
		projectDeleteUpdateAuthFlag      = projectDeleteUpdateFlags.String("auth", "REQUIRED", "")

		projectModifyUpdateFlags         = flag.NewFlagSet("modify- update", flag.ExitOnError)
		projectModifyUpdateBodyFlag      = projectModifyUpdateFlags.String("body", "REQUIRED", "")
		projectModifyUpdateProjectIDFlag = projectModifyUpdateFlags.String("project-id", "REQUIRED", "")
		projectModifyUpdateUpdateIDFlag  = projectModifyUpdateFlags.String("update-id", "REQUIRED", "")
		projectModifyUpdateAuthFlag      = projectModifyUpdateFlags.String("auth", "REQUIRED", "")

		projectInvitesFlags    = flag.NewFlagSet("invites", flag.ExitOnError)
		projectInvitesAuthFlag = projectInvitesFlags.String("auth", "REQUIRED", "")

		projectLookupInviteFlags     = flag.NewFlagSet("lookup- invite", flag.ExitOnError)
		projectLookupInviteTokenFlag = projectLookupInviteFlags.String("token", "REQUIRED", "")
		projectLookupInviteAuthFlag  = projectLookupInviteFlags.String("auth", "REQUIRED", "")

		projectAcceptProjectInviteFlags         = flag.NewFlagSet("accept- project- invite", flag.ExitOnError)
		projectAcceptProjectInviteProjectIDFlag = projectAcceptProjectInviteFlags.String("project-id", "REQUIRED", "")
		projectAcceptProjectInviteAuthFlag      = projectAcceptProjectInviteFlags.String("auth", "REQUIRED", "")

		projectRejectProjectInviteFlags         = flag.NewFlagSet("reject- project- invite", flag.ExitOnError)
		projectRejectProjectInviteProjectIDFlag = projectRejectProjectInviteFlags.String("project-id", "REQUIRED", "")
		projectRejectProjectInviteAuthFlag      = projectRejectProjectInviteFlags.String("auth", "REQUIRED", "")

		projectAcceptInviteFlags     = flag.NewFlagSet("accept- invite", flag.ExitOnError)
		projectAcceptInviteIDFlag    = projectAcceptInviteFlags.String("id", "REQUIRED", "")
		projectAcceptInviteTokenFlag = projectAcceptInviteFlags.String("token", "", "")
		projectAcceptInviteAuthFlag  = projectAcceptInviteFlags.String("auth", "REQUIRED", "")

		projectRejectInviteFlags     = flag.NewFlagSet("reject- invite", flag.ExitOnError)
		projectRejectInviteIDFlag    = projectRejectInviteFlags.String("id", "REQUIRED", "")
		projectRejectInviteTokenFlag = projectRejectInviteFlags.String("token", "", "")
		projectRejectInviteAuthFlag  = projectRejectInviteFlags.String("auth", "REQUIRED", "")

		projectAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		projectAddBodyFlag = projectAddFlags.String("body", "REQUIRED", "")
		projectAddAuthFlag = projectAddFlags.String("auth", "REQUIRED", "")

		projectUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		projectUpdateBodyFlag      = projectUpdateFlags.String("body", "REQUIRED", "")
		projectUpdateProjectIDFlag = projectUpdateFlags.String("project-id", "REQUIRED", "")
		projectUpdateAuthFlag      = projectUpdateFlags.String("auth", "REQUIRED", "")

		projectGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		projectGetProjectIDFlag = projectGetFlags.String("project-id", "REQUIRED", "")
		projectGetAuthFlag      = projectGetFlags.String("auth", "", "")

		projectListCommunityFlags    = flag.NewFlagSet("list- community", flag.ExitOnError)
		projectListCommunityAuthFlag = projectListCommunityFlags.String("auth", "", "")

		projectListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		projectListMineAuthFlag = projectListMineFlags.String("auth", "REQUIRED", "")

		projectInviteFlags         = flag.NewFlagSet("invite", flag.ExitOnError)
		projectInviteBodyFlag      = projectInviteFlags.String("body", "REQUIRED", "")
		projectInviteProjectIDFlag = projectInviteFlags.String("project-id", "REQUIRED", "")
		projectInviteAuthFlag      = projectInviteFlags.String("auth", "REQUIRED", "")

		projectRemoveUserFlags         = flag.NewFlagSet("remove- user", flag.ExitOnError)
		projectRemoveUserBodyFlag      = projectRemoveUserFlags.String("body", "REQUIRED", "")
		projectRemoveUserProjectIDFlag = projectRemoveUserFlags.String("project-id", "REQUIRED", "")
		projectRemoveUserAuthFlag      = projectRemoveUserFlags.String("auth", "REQUIRED", "")

		projectAddStationFlags         = flag.NewFlagSet("add- station", flag.ExitOnError)
		projectAddStationProjectIDFlag = projectAddStationFlags.String("project-id", "REQUIRED", "")
		projectAddStationStationIDFlag = projectAddStationFlags.String("station-id", "REQUIRED", "")
		projectAddStationAuthFlag      = projectAddStationFlags.String("auth", "REQUIRED", "")

		projectRemoveStationFlags         = flag.NewFlagSet("remove- station", flag.ExitOnError)
		projectRemoveStationProjectIDFlag = projectRemoveStationFlags.String("project-id", "REQUIRED", "")
		projectRemoveStationStationIDFlag = projectRemoveStationFlags.String("station-id", "REQUIRED", "")
		projectRemoveStationAuthFlag      = projectRemoveStationFlags.String("auth", "REQUIRED", "")

		projectDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		projectDeleteProjectIDFlag = projectDeleteFlags.String("project-id", "REQUIRED", "")
		projectDeleteAuthFlag      = projectDeleteFlags.String("auth", "REQUIRED", "")

		projectUploadPhotoFlags             = flag.NewFlagSet("upload- photo", flag.ExitOnError)
		projectUploadPhotoProjectIDFlag     = projectUploadPhotoFlags.String("project-id", "REQUIRED", "")
		projectUploadPhotoContentTypeFlag   = projectUploadPhotoFlags.String("content-type", "REQUIRED", "")
		projectUploadPhotoContentLengthFlag = projectUploadPhotoFlags.String("content-length", "REQUIRED", "")
		projectUploadPhotoAuthFlag          = projectUploadPhotoFlags.String("auth", "REQUIRED", "")
		projectUploadPhotoStreamFlag        = projectUploadPhotoFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		projectDownloadPhotoFlags           = flag.NewFlagSet("download- photo", flag.ExitOnError)
		projectDownloadPhotoProjectIDFlag   = projectDownloadPhotoFlags.String("project-id", "REQUIRED", "")
		projectDownloadPhotoSizeFlag        = projectDownloadPhotoFlags.String("size", "", "")
		projectDownloadPhotoIfNoneMatchFlag = projectDownloadPhotoFlags.String("if-none-match", "", "")
		projectDownloadPhotoAuthFlag        = projectDownloadPhotoFlags.String("auth", "REQUIRED", "")

		recordsFlags = flag.NewFlagSet("records", flag.ContinueOnError)

		recordsDataFlags        = flag.NewFlagSet("data", flag.ExitOnError)
		recordsDataRecordIDFlag = recordsDataFlags.String("record-id", "REQUIRED", "")
		recordsDataAuthFlag     = recordsDataFlags.String("auth", "", "")

		recordsMetaFlags        = flag.NewFlagSet("meta", flag.ExitOnError)
		recordsMetaRecordIDFlag = recordsMetaFlags.String("record-id", "REQUIRED", "")
		recordsMetaAuthFlag     = recordsMetaFlags.String("auth", "", "")

		recordsResolvedFlags        = flag.NewFlagSet("resolved", flag.ExitOnError)
		recordsResolvedRecordIDFlag = recordsResolvedFlags.String("record-id", "REQUIRED", "")
		recordsResolvedAuthFlag     = recordsResolvedFlags.String("auth", "", "")

		sensorFlags = flag.NewFlagSet("sensor", flag.ContinueOnError)

		sensorMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		sensorDataFlags          = flag.NewFlagSet("data", flag.ExitOnError)
		sensorDataStartFlag      = sensorDataFlags.String("start", "", "")
		sensorDataEndFlag        = sensorDataFlags.String("end", "", "")
		sensorDataStationsFlag   = sensorDataFlags.String("stations", "", "")
		sensorDataSensorsFlag    = sensorDataFlags.String("sensors", "", "")
		sensorDataResolutionFlag = sensorDataFlags.String("resolution", "", "")
		sensorDataAggregateFlag  = sensorDataFlags.String("aggregate", "", "")
		sensorDataCompleteFlag   = sensorDataFlags.String("complete", "", "")
		sensorDataTailFlag       = sensorDataFlags.String("tail", "", "")
		sensorDataAuthFlag       = sensorDataFlags.String("auth", "REQUIRED", "")

		informationFlags = flag.NewFlagSet("information", flag.ContinueOnError)

		informationDeviceLayoutFlags        = flag.NewFlagSet("device- layout", flag.ExitOnError)
		informationDeviceLayoutDeviceIDFlag = informationDeviceLayoutFlags.String("device-id", "REQUIRED", "")
		informationDeviceLayoutAuthFlag     = informationDeviceLayoutFlags.String("auth", "REQUIRED", "")

		informationFirmwareStatisticsFlags    = flag.NewFlagSet("firmware- statistics", flag.ExitOnError)
		informationFirmwareStatisticsAuthFlag = informationFirmwareStatisticsFlags.String("auth", "REQUIRED", "")

		stationFlags = flag.NewFlagSet("station", flag.ContinueOnError)

		stationAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		stationAddBodyFlag = stationAddFlags.String("body", "REQUIRED", "")
		stationAddAuthFlag = stationAddFlags.String("auth", "REQUIRED", "")

		stationGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		stationGetIDFlag   = stationGetFlags.String("id", "REQUIRED", "")
		stationGetAuthFlag = stationGetFlags.String("auth", "REQUIRED", "")

		stationUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		stationUpdateBodyFlag = stationUpdateFlags.String("body", "REQUIRED", "")
		stationUpdateIDFlag   = stationUpdateFlags.String("id", "REQUIRED", "")
		stationUpdateAuthFlag = stationUpdateFlags.String("auth", "REQUIRED", "")

		stationListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		stationListMineAuthFlag = stationListMineFlags.String("auth", "REQUIRED", "")

		stationListProjectFlags    = flag.NewFlagSet("list- project", flag.ExitOnError)
		stationListProjectIDFlag   = stationListProjectFlags.String("id", "REQUIRED", "")
		stationListProjectAuthFlag = stationListProjectFlags.String("auth", "", "")

		stationDownloadPhotoFlags           = flag.NewFlagSet("download- photo", flag.ExitOnError)
		stationDownloadPhotoStationIDFlag   = stationDownloadPhotoFlags.String("station-id", "REQUIRED", "")
		stationDownloadPhotoSizeFlag        = stationDownloadPhotoFlags.String("size", "", "")
		stationDownloadPhotoIfNoneMatchFlag = stationDownloadPhotoFlags.String("if-none-match", "", "")
		stationDownloadPhotoAuthFlag        = stationDownloadPhotoFlags.String("auth", "REQUIRED", "")

		stationListAllFlags        = flag.NewFlagSet("list- all", flag.ExitOnError)
		stationListAllPageFlag     = stationListAllFlags.String("page", "", "")
		stationListAllPageSizeFlag = stationListAllFlags.String("page-size", "", "")
		stationListAllOwnerIDFlag  = stationListAllFlags.String("owner-id", "", "")
		stationListAllQueryFlag    = stationListAllFlags.String("query", "", "")
		stationListAllSortByFlag   = stationListAllFlags.String("sort-by", "", "")
		stationListAllAuthFlag     = stationListAllFlags.String("auth", "REQUIRED", "")

		stationDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		stationDeleteStationIDFlag = stationDeleteFlags.String("station-id", "REQUIRED", "")
		stationDeleteAuthFlag      = stationDeleteFlags.String("auth", "REQUIRED", "")

		tasksFlags = flag.NewFlagSet("tasks", flag.ContinueOnError)

		tasksFiveFlags = flag.NewFlagSet("five", flag.ExitOnError)

		testFlags = flag.NewFlagSet("test", flag.ContinueOnError)

		testGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		testGetIDFlag = testGetFlags.String("id", "REQUIRED", "")

		testErrorFlags = flag.NewFlagSet("error", flag.ExitOnError)

		testEmailFlags       = flag.NewFlagSet("email", flag.ExitOnError)
		testEmailAddressFlag = testEmailFlags.String("address", "REQUIRED", "")
		testEmailAuthFlag    = testEmailFlags.String("auth", "REQUIRED", "")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userRolesFlags    = flag.NewFlagSet("roles", flag.ExitOnError)
		userRolesAuthFlag = userRolesFlags.String("auth", "REQUIRED", "")

		userDeleteFlags      = flag.NewFlagSet("delete", flag.ExitOnError)
		userDeleteUserIDFlag = userDeleteFlags.String("user-id", "REQUIRED", "")
		userDeleteAuthFlag   = userDeleteFlags.String("auth", "REQUIRED", "")

		userUploadPhotoFlags             = flag.NewFlagSet("upload- photo", flag.ExitOnError)
		userUploadPhotoContentTypeFlag   = userUploadPhotoFlags.String("content-type", "REQUIRED", "")
		userUploadPhotoContentLengthFlag = userUploadPhotoFlags.String("content-length", "REQUIRED", "")
		userUploadPhotoAuthFlag          = userUploadPhotoFlags.String("auth", "REQUIRED", "")
		userUploadPhotoStreamFlag        = userUploadPhotoFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		userDownloadPhotoFlags           = flag.NewFlagSet("download- photo", flag.ExitOnError)
		userDownloadPhotoUserIDFlag      = userDownloadPhotoFlags.String("user-id", "REQUIRED", "")
		userDownloadPhotoSizeFlag        = userDownloadPhotoFlags.String("size", "", "")
		userDownloadPhotoIfNoneMatchFlag = userDownloadPhotoFlags.String("if-none-match", "", "")

		userLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		userLoginBodyFlag = userLoginFlags.String("body", "REQUIRED", "")

		userRecoveryLookupFlags    = flag.NewFlagSet("recovery- lookup", flag.ExitOnError)
		userRecoveryLookupBodyFlag = userRecoveryLookupFlags.String("body", "REQUIRED", "")

		userRecoveryFlags    = flag.NewFlagSet("recovery", flag.ExitOnError)
		userRecoveryBodyFlag = userRecoveryFlags.String("body", "REQUIRED", "")

		userLogoutFlags    = flag.NewFlagSet("logout", flag.ExitOnError)
		userLogoutAuthFlag = userLogoutFlags.String("auth", "REQUIRED", "")

		userRefreshFlags    = flag.NewFlagSet("refresh", flag.ExitOnError)
		userRefreshBodyFlag = userRefreshFlags.String("body", "REQUIRED", "")

		userSendValidationFlags      = flag.NewFlagSet("send- validation", flag.ExitOnError)
		userSendValidationUserIDFlag = userSendValidationFlags.String("user-id", "REQUIRED", "")

		userValidateFlags     = flag.NewFlagSet("validate", flag.ExitOnError)
		userValidateTokenFlag = userValidateFlags.String("token", "REQUIRED", "")

		userAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		userAddBodyFlag = userAddFlags.String("body", "REQUIRED", "")

		userUpdateFlags      = flag.NewFlagSet("update", flag.ExitOnError)
		userUpdateBodyFlag   = userUpdateFlags.String("body", "REQUIRED", "")
		userUpdateUserIDFlag = userUpdateFlags.String("user-id", "REQUIRED", "")
		userUpdateAuthFlag   = userUpdateFlags.String("auth", "REQUIRED", "")

		userChangePasswordFlags      = flag.NewFlagSet("change- password", flag.ExitOnError)
		userChangePasswordBodyFlag   = userChangePasswordFlags.String("body", "REQUIRED", "")
		userChangePasswordUserIDFlag = userChangePasswordFlags.String("user-id", "REQUIRED", "")
		userChangePasswordAuthFlag   = userChangePasswordFlags.String("auth", "REQUIRED", "")

		userGetCurrentFlags    = flag.NewFlagSet("get- current", flag.ExitOnError)
		userGetCurrentAuthFlag = userGetCurrentFlags.String("auth", "REQUIRED", "")

		userListByProjectFlags         = flag.NewFlagSet("list- by- project", flag.ExitOnError)
		userListByProjectProjectIDFlag = userListByProjectFlags.String("project-id", "REQUIRED", "")
		userListByProjectAuthFlag      = userListByProjectFlags.String("auth", "REQUIRED", "")

		userIssueTransmissionTokenFlags    = flag.NewFlagSet("issue- transmission- token", flag.ExitOnError)
		userIssueTransmissionTokenAuthFlag = userIssueTransmissionTokenFlags.String("auth", "REQUIRED", "")

		userProjectRolesFlags = flag.NewFlagSet("project- roles", flag.ExitOnError)

		userAdminDeleteFlags    = flag.NewFlagSet("admin- delete", flag.ExitOnError)
		userAdminDeleteBodyFlag = userAdminDeleteFlags.String("body", "REQUIRED", "")
		userAdminDeleteAuthFlag = userAdminDeleteFlags.String("auth", "REQUIRED", "")
	)
	csvFlags.Usage = csvUsage
	csvNoopFlags.Usage = csvNoopUsage

	activityFlags.Usage = activityUsage
	activityStationFlags.Usage = activityStationUsage
	activityProjectFlags.Usage = activityProjectUsage

	collectionFlags.Usage = collectionUsage
	collectionAddFlags.Usage = collectionAddUsage
	collectionUpdateFlags.Usage = collectionUpdateUsage
	collectionGetFlags.Usage = collectionGetUsage
	collectionListMineFlags.Usage = collectionListMineUsage
	collectionAddStationFlags.Usage = collectionAddStationUsage
	collectionRemoveStationFlags.Usage = collectionRemoveStationUsage
	collectionDeleteFlags.Usage = collectionDeleteUsage

	dataFlags.Usage = dataUsage
	dataDeviceSummaryFlags.Usage = dataDeviceSummaryUsage

	exportFlags.Usage = exportUsage
	exportListMineFlags.Usage = exportListMineUsage
	exportStatusFlags.Usage = exportStatusUsage
	exportDownloadFlags.Usage = exportDownloadUsage
	exportCsvFlags.Usage = exportCsvUsage
	exportJSONLinesFlags.Usage = exportJSONLinesUsage

	firmwareFlags.Usage = firmwareUsage
	firmwareDownloadFlags.Usage = firmwareDownloadUsage
	firmwareAddFlags.Usage = firmwareAddUsage
	firmwareListFlags.Usage = firmwareListUsage
	firmwareDeleteFlags.Usage = firmwareDeleteUsage

	followingFlags.Usage = followingUsage
	followingFollowFlags.Usage = followingFollowUsage
	followingUnfollowFlags.Usage = followingUnfollowUsage
	followingFollowersFlags.Usage = followingFollowersUsage

	ingestionFlags.Usage = ingestionUsage
	ingestionProcessPendingFlags.Usage = ingestionProcessPendingUsage
	ingestionWalkEverythingFlags.Usage = ingestionWalkEverythingUsage
	ingestionProcessStationFlags.Usage = ingestionProcessStationUsage
	ingestionProcessIngestionFlags.Usage = ingestionProcessIngestionUsage
	ingestionDeleteFlags.Usage = ingestionDeleteUsage

	modulesFlags.Usage = modulesUsage
	modulesMetaFlags.Usage = modulesMetaUsage

	notesFlags.Usage = notesUsage
	notesUpdateFlags.Usage = notesUpdateUsage
	notesGetFlags.Usage = notesGetUsage
	notesDownloadMediaFlags.Usage = notesDownloadMediaUsage
	notesUploadMediaFlags.Usage = notesUploadMediaUsage

	projectFlags.Usage = projectUsage
	projectAddUpdateFlags.Usage = projectAddUpdateUsage
	projectDeleteUpdateFlags.Usage = projectDeleteUpdateUsage
	projectModifyUpdateFlags.Usage = projectModifyUpdateUsage
	projectInvitesFlags.Usage = projectInvitesUsage
	projectLookupInviteFlags.Usage = projectLookupInviteUsage
	projectAcceptProjectInviteFlags.Usage = projectAcceptProjectInviteUsage
	projectRejectProjectInviteFlags.Usage = projectRejectProjectInviteUsage
	projectAcceptInviteFlags.Usage = projectAcceptInviteUsage
	projectRejectInviteFlags.Usage = projectRejectInviteUsage
	projectAddFlags.Usage = projectAddUsage
	projectUpdateFlags.Usage = projectUpdateUsage
	projectGetFlags.Usage = projectGetUsage
	projectListCommunityFlags.Usage = projectListCommunityUsage
	projectListMineFlags.Usage = projectListMineUsage
	projectInviteFlags.Usage = projectInviteUsage
	projectRemoveUserFlags.Usage = projectRemoveUserUsage
	projectAddStationFlags.Usage = projectAddStationUsage
	projectRemoveStationFlags.Usage = projectRemoveStationUsage
	projectDeleteFlags.Usage = projectDeleteUsage
	projectUploadPhotoFlags.Usage = projectUploadPhotoUsage
	projectDownloadPhotoFlags.Usage = projectDownloadPhotoUsage

	recordsFlags.Usage = recordsUsage
	recordsDataFlags.Usage = recordsDataUsage
	recordsMetaFlags.Usage = recordsMetaUsage
	recordsResolvedFlags.Usage = recordsResolvedUsage

	sensorFlags.Usage = sensorUsage
	sensorMetaFlags.Usage = sensorMetaUsage
	sensorDataFlags.Usage = sensorDataUsage

	informationFlags.Usage = informationUsage
	informationDeviceLayoutFlags.Usage = informationDeviceLayoutUsage
	informationFirmwareStatisticsFlags.Usage = informationFirmwareStatisticsUsage

	stationFlags.Usage = stationUsage
	stationAddFlags.Usage = stationAddUsage
	stationGetFlags.Usage = stationGetUsage
	stationUpdateFlags.Usage = stationUpdateUsage
	stationListMineFlags.Usage = stationListMineUsage
	stationListProjectFlags.Usage = stationListProjectUsage
	stationDownloadPhotoFlags.Usage = stationDownloadPhotoUsage
	stationListAllFlags.Usage = stationListAllUsage
	stationDeleteFlags.Usage = stationDeleteUsage

	tasksFlags.Usage = tasksUsage
	tasksFiveFlags.Usage = tasksFiveUsage

	testFlags.Usage = testUsage
	testGetFlags.Usage = testGetUsage
	testErrorFlags.Usage = testErrorUsage
	testEmailFlags.Usage = testEmailUsage

	userFlags.Usage = userUsage
	userRolesFlags.Usage = userRolesUsage
	userDeleteFlags.Usage = userDeleteUsage
	userUploadPhotoFlags.Usage = userUploadPhotoUsage
	userDownloadPhotoFlags.Usage = userDownloadPhotoUsage
	userLoginFlags.Usage = userLoginUsage
	userRecoveryLookupFlags.Usage = userRecoveryLookupUsage
	userRecoveryFlags.Usage = userRecoveryUsage
	userLogoutFlags.Usage = userLogoutUsage
	userRefreshFlags.Usage = userRefreshUsage
	userSendValidationFlags.Usage = userSendValidationUsage
	userValidateFlags.Usage = userValidateUsage
	userAddFlags.Usage = userAddUsage
	userUpdateFlags.Usage = userUpdateUsage
	userChangePasswordFlags.Usage = userChangePasswordUsage
	userGetCurrentFlags.Usage = userGetCurrentUsage
	userListByProjectFlags.Usage = userListByProjectUsage
	userIssueTransmissionTokenFlags.Usage = userIssueTransmissionTokenUsage
	userProjectRolesFlags.Usage = userProjectRolesUsage
	userAdminDeleteFlags.Usage = userAdminDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "csv":
			svcf = csvFlags
		case "activity":
			svcf = activityFlags
		case "collection":
			svcf = collectionFlags
		case "data":
			svcf = dataFlags
		case "export":
			svcf = exportFlags
		case "firmware":
			svcf = firmwareFlags
		case "following":
			svcf = followingFlags
		case "ingestion":
			svcf = ingestionFlags
		case "modules":
			svcf = modulesFlags
		case "notes":
			svcf = notesFlags
		case "project":
			svcf = projectFlags
		case "records":
			svcf = recordsFlags
		case "sensor":
			svcf = sensorFlags
		case "information":
			svcf = informationFlags
		case "station":
			svcf = stationFlags
		case "tasks":
			svcf = tasksFlags
		case "test":
			svcf = testFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "csv":
			switch epn {
			case "noop":
				epf = csvNoopFlags

			}

		case "activity":
			switch epn {
			case "station":
				epf = activityStationFlags

			case "project":
				epf = activityProjectFlags

			}

		case "collection":
			switch epn {
			case "add":
				epf = collectionAddFlags

			case "update":
				epf = collectionUpdateFlags

			case "get":
				epf = collectionGetFlags

			case "list- mine":
				epf = collectionListMineFlags

			case "add- station":
				epf = collectionAddStationFlags

			case "remove- station":
				epf = collectionRemoveStationFlags

			case "delete":
				epf = collectionDeleteFlags

			}

		case "data":
			switch epn {
			case "device- summary":
				epf = dataDeviceSummaryFlags

			}

		case "export":
			switch epn {
			case "list- mine":
				epf = exportListMineFlags

			case "status":
				epf = exportStatusFlags

			case "download":
				epf = exportDownloadFlags

			case "csv":
				epf = exportCsvFlags

			case "json- lines":
				epf = exportJSONLinesFlags

			}

		case "firmware":
			switch epn {
			case "download":
				epf = firmwareDownloadFlags

			case "add":
				epf = firmwareAddFlags

			case "list":
				epf = firmwareListFlags

			case "delete":
				epf = firmwareDeleteFlags

			}

		case "following":
			switch epn {
			case "follow":
				epf = followingFollowFlags

			case "unfollow":
				epf = followingUnfollowFlags

			case "followers":
				epf = followingFollowersFlags

			}

		case "ingestion":
			switch epn {
			case "process- pending":
				epf = ingestionProcessPendingFlags

			case "walk- everything":
				epf = ingestionWalkEverythingFlags

			case "process- station":
				epf = ingestionProcessStationFlags

			case "process- ingestion":
				epf = ingestionProcessIngestionFlags

			case "delete":
				epf = ingestionDeleteFlags

			}

		case "modules":
			switch epn {
			case "meta":
				epf = modulesMetaFlags

			}

		case "notes":
			switch epn {
			case "update":
				epf = notesUpdateFlags

			case "get":
				epf = notesGetFlags

			case "download- media":
				epf = notesDownloadMediaFlags

			case "upload- media":
				epf = notesUploadMediaFlags

			}

		case "project":
			switch epn {
			case "add- update":
				epf = projectAddUpdateFlags

			case "delete- update":
				epf = projectDeleteUpdateFlags

			case "modify- update":
				epf = projectModifyUpdateFlags

			case "invites":
				epf = projectInvitesFlags

			case "lookup- invite":
				epf = projectLookupInviteFlags

			case "accept- project- invite":
				epf = projectAcceptProjectInviteFlags

			case "reject- project- invite":
				epf = projectRejectProjectInviteFlags

			case "accept- invite":
				epf = projectAcceptInviteFlags

			case "reject- invite":
				epf = projectRejectInviteFlags

			case "add":
				epf = projectAddFlags

			case "update":
				epf = projectUpdateFlags

			case "get":
				epf = projectGetFlags

			case "list- community":
				epf = projectListCommunityFlags

			case "list- mine":
				epf = projectListMineFlags

			case "invite":
				epf = projectInviteFlags

			case "remove- user":
				epf = projectRemoveUserFlags

			case "add- station":
				epf = projectAddStationFlags

			case "remove- station":
				epf = projectRemoveStationFlags

			case "delete":
				epf = projectDeleteFlags

			case "upload- photo":
				epf = projectUploadPhotoFlags

			case "download- photo":
				epf = projectDownloadPhotoFlags

			}

		case "records":
			switch epn {
			case "data":
				epf = recordsDataFlags

			case "meta":
				epf = recordsMetaFlags

			case "resolved":
				epf = recordsResolvedFlags

			}

		case "sensor":
			switch epn {
			case "meta":
				epf = sensorMetaFlags

			case "data":
				epf = sensorDataFlags

			}

		case "information":
			switch epn {
			case "device- layout":
				epf = informationDeviceLayoutFlags

			case "firmware- statistics":
				epf = informationFirmwareStatisticsFlags

			}

		case "station":
			switch epn {
			case "add":
				epf = stationAddFlags

			case "get":
				epf = stationGetFlags

			case "update":
				epf = stationUpdateFlags

			case "list- mine":
				epf = stationListMineFlags

			case "list- project":
				epf = stationListProjectFlags

			case "download- photo":
				epf = stationDownloadPhotoFlags

			case "list- all":
				epf = stationListAllFlags

			case "delete":
				epf = stationDeleteFlags

			}

		case "tasks":
			switch epn {
			case "five":
				epf = tasksFiveFlags

			}

		case "test":
			switch epn {
			case "get":
				epf = testGetFlags

			case "error":
				epf = testErrorFlags

			case "email":
				epf = testEmailFlags

			}

		case "user":
			switch epn {
			case "roles":
				epf = userRolesFlags

			case "delete":
				epf = userDeleteFlags

			case "upload- photo":
				epf = userUploadPhotoFlags

			case "download- photo":
				epf = userDownloadPhotoFlags

			case "login":
				epf = userLoginFlags

			case "recovery- lookup":
				epf = userRecoveryLookupFlags

			case "recovery":
				epf = userRecoveryFlags

			case "logout":
				epf = userLogoutFlags

			case "refresh":
				epf = userRefreshFlags

			case "send- validation":
				epf = userSendValidationFlags

			case "validate":
				epf = userValidateFlags

			case "add":
				epf = userAddFlags

			case "update":
				epf = userUpdateFlags

			case "change- password":
				epf = userChangePasswordFlags

			case "get- current":
				epf = userGetCurrentFlags

			case "list- by- project":
				epf = userListByProjectFlags

			case "issue- transmission- token":
				epf = userIssueTransmissionTokenFlags

			case "project- roles":
				epf = userProjectRolesFlags

			case "admin- delete":
				epf = userAdminDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "csv":
			c := csvc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "noop":
				endpoint = c.Noop()
				data = nil
			}
		case "activity":
			c := activityc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "station":
				endpoint = c.Station()
				data, err = activityc.BuildStationPayload(*activityStationIDFlag, *activityStationPageFlag, *activityStationAuthFlag)
			case "project":
				endpoint = c.Project()
				data, err = activityc.BuildProjectPayload(*activityProjectIDFlag, *activityProjectPageFlag, *activityProjectAuthFlag)
			}
		case "collection":
			c := collectionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = collectionc.BuildAddPayload(*collectionAddBodyFlag, *collectionAddAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = collectionc.BuildUpdatePayload(*collectionUpdateBodyFlag, *collectionUpdateCollectionIDFlag, *collectionUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = collectionc.BuildGetPayload(*collectionGetCollectionIDFlag, *collectionGetAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = collectionc.BuildListMinePayload(*collectionListMineAuthFlag)
			case "add- station":
				endpoint = c.AddStation()
				data, err = collectionc.BuildAddStationPayload(*collectionAddStationCollectionIDFlag, *collectionAddStationStationIDFlag, *collectionAddStationAuthFlag)
			case "remove- station":
				endpoint = c.RemoveStation()
				data, err = collectionc.BuildRemoveStationPayload(*collectionRemoveStationCollectionIDFlag, *collectionRemoveStationStationIDFlag, *collectionRemoveStationAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = collectionc.BuildDeletePayload(*collectionDeleteCollectionIDFlag, *collectionDeleteAuthFlag)
			}
		case "data":
			c := datac.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "device- summary":
				endpoint = c.DeviceSummary()
				data, err = datac.BuildDeviceSummaryPayload(*dataDeviceSummaryDeviceIDFlag, *dataDeviceSummaryAuthFlag)
			}
		case "export":
			c := exportc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- mine":
				endpoint = c.ListMine()
				data, err = exportc.BuildListMinePayload(*exportListMineAuthFlag)
			case "status":
				endpoint = c.Status()
				data, err = exportc.BuildStatusPayload(*exportStatusIDFlag, *exportStatusAuthFlag)
			case "download":
				endpoint = c.Download()
				data, err = exportc.BuildDownloadPayload(*exportDownloadIDFlag, *exportDownloadAuthFlag)
			case "csv":
				endpoint = c.Csv()
				data, err = exportc.BuildCsvPayload(*exportCsvStartFlag, *exportCsvEndFlag, *exportCsvStationsFlag, *exportCsvSensorsFlag, *exportCsvResolutionFlag, *exportCsvAggregateFlag, *exportCsvCompleteFlag, *exportCsvTailFlag, *exportCsvAuthFlag)
			case "json- lines":
				endpoint = c.JSONLines()
				data, err = exportc.BuildJSONLinesPayload(*exportJSONLinesStartFlag, *exportJSONLinesEndFlag, *exportJSONLinesStationsFlag, *exportJSONLinesSensorsFlag, *exportJSONLinesResolutionFlag, *exportJSONLinesAggregateFlag, *exportJSONLinesCompleteFlag, *exportJSONLinesTailFlag, *exportJSONLinesAuthFlag)
			}
		case "firmware":
			c := firmwarec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "download":
				endpoint = c.Download()
				data, err = firmwarec.BuildDownloadPayload(*firmwareDownloadFirmwareIDFlag)
			case "add":
				endpoint = c.Add()
				data, err = firmwarec.BuildAddPayload(*firmwareAddBodyFlag, *firmwareAddAuthFlag)
			case "list":
				endpoint = c.List()
				data, err = firmwarec.BuildListPayload(*firmwareListModuleFlag, *firmwareListProfileFlag, *firmwareListPageSizeFlag, *firmwareListPageFlag, *firmwareListAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = firmwarec.BuildDeletePayload(*firmwareDeleteFirmwareIDFlag, *firmwareDeleteAuthFlag)
			}
		case "following":
			c := followingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "follow":
				endpoint = c.Follow()
				data, err = followingc.BuildFollowPayload(*followingFollowIDFlag, *followingFollowAuthFlag)
			case "unfollow":
				endpoint = c.Unfollow()
				data, err = followingc.BuildUnfollowPayload(*followingUnfollowIDFlag, *followingUnfollowAuthFlag)
			case "followers":
				endpoint = c.Followers()
				data, err = followingc.BuildFollowersPayload(*followingFollowersIDFlag, *followingFollowersPageFlag)
			}
		case "ingestion":
			c := ingestionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "process- pending":
				endpoint = c.ProcessPending()
				data, err = ingestionc.BuildProcessPendingPayload(*ingestionProcessPendingAuthFlag)
			case "walk- everything":
				endpoint = c.WalkEverything()
				data, err = ingestionc.BuildWalkEverythingPayload(*ingestionWalkEverythingAuthFlag)
			case "process- station":
				endpoint = c.ProcessStation()
				data, err = ingestionc.BuildProcessStationPayload(*ingestionProcessStationStationIDFlag, *ingestionProcessStationCompletelyFlag, *ingestionProcessStationAuthFlag)
			case "process- ingestion":
				endpoint = c.ProcessIngestion()
				data, err = ingestionc.BuildProcessIngestionPayload(*ingestionProcessIngestionIngestionIDFlag, *ingestionProcessIngestionAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = ingestionc.BuildDeletePayload(*ingestionDeleteIngestionIDFlag, *ingestionDeleteAuthFlag)
			}
		case "modules":
			c := modulesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			}
		case "notes":
			c := notesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update":
				endpoint = c.Update()
				data, err = notesc.BuildUpdatePayload(*notesUpdateBodyFlag, *notesUpdateStationIDFlag, *notesUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = notesc.BuildGetPayload(*notesGetStationIDFlag, *notesGetAuthFlag)
			case "download- media":
				endpoint = c.DownloadMedia()
				data, err = notesc.BuildDownloadMediaPayload(*notesDownloadMediaMediaIDFlag, *notesDownloadMediaAuthFlag)
			case "upload- media":
				endpoint = c.UploadMedia()
				data, err = notesc.BuildUploadMediaPayload(*notesUploadMediaStationIDFlag, *notesUploadMediaKeyFlag, *notesUploadMediaContentTypeFlag, *notesUploadMediaContentLengthFlag, *notesUploadMediaAuthFlag)
				if err == nil {
					data, err = notesc.BuildUploadMediaStreamPayload(data, *notesUploadMediaStreamFlag)
				}
			}
		case "project":
			c := projectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add- update":
				endpoint = c.AddUpdate()
				data, err = projectc.BuildAddUpdatePayload(*projectAddUpdateBodyFlag, *projectAddUpdateProjectIDFlag, *projectAddUpdateAuthFlag)
			case "delete- update":
				endpoint = c.DeleteUpdate()
				data, err = projectc.BuildDeleteUpdatePayload(*projectDeleteUpdateProjectIDFlag, *projectDeleteUpdateUpdateIDFlag, *projectDeleteUpdateAuthFlag)
			case "modify- update":
				endpoint = c.ModifyUpdate()
				data, err = projectc.BuildModifyUpdatePayload(*projectModifyUpdateBodyFlag, *projectModifyUpdateProjectIDFlag, *projectModifyUpdateUpdateIDFlag, *projectModifyUpdateAuthFlag)
			case "invites":
				endpoint = c.Invites()
				data, err = projectc.BuildInvitesPayload(*projectInvitesAuthFlag)
			case "lookup- invite":
				endpoint = c.LookupInvite()
				data, err = projectc.BuildLookupInvitePayload(*projectLookupInviteTokenFlag, *projectLookupInviteAuthFlag)
			case "accept- project- invite":
				endpoint = c.AcceptProjectInvite()
				data, err = projectc.BuildAcceptProjectInvitePayload(*projectAcceptProjectInviteProjectIDFlag, *projectAcceptProjectInviteAuthFlag)
			case "reject- project- invite":
				endpoint = c.RejectProjectInvite()
				data, err = projectc.BuildRejectProjectInvitePayload(*projectRejectProjectInviteProjectIDFlag, *projectRejectProjectInviteAuthFlag)
			case "accept- invite":
				endpoint = c.AcceptInvite()
				data, err = projectc.BuildAcceptInvitePayload(*projectAcceptInviteIDFlag, *projectAcceptInviteTokenFlag, *projectAcceptInviteAuthFlag)
			case "reject- invite":
				endpoint = c.RejectInvite()
				data, err = projectc.BuildRejectInvitePayload(*projectRejectInviteIDFlag, *projectRejectInviteTokenFlag, *projectRejectInviteAuthFlag)
			case "add":
				endpoint = c.Add()
				data, err = projectc.BuildAddPayload(*projectAddBodyFlag, *projectAddAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = projectc.BuildUpdatePayload(*projectUpdateBodyFlag, *projectUpdateProjectIDFlag, *projectUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = projectc.BuildGetPayload(*projectGetProjectIDFlag, *projectGetAuthFlag)
			case "list- community":
				endpoint = c.ListCommunity()
				data, err = projectc.BuildListCommunityPayload(*projectListCommunityAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = projectc.BuildListMinePayload(*projectListMineAuthFlag)
			case "invite":
				endpoint = c.Invite()
				data, err = projectc.BuildInvitePayload(*projectInviteBodyFlag, *projectInviteProjectIDFlag, *projectInviteAuthFlag)
			case "remove- user":
				endpoint = c.RemoveUser()
				data, err = projectc.BuildRemoveUserPayload(*projectRemoveUserBodyFlag, *projectRemoveUserProjectIDFlag, *projectRemoveUserAuthFlag)
			case "add- station":
				endpoint = c.AddStation()
				data, err = projectc.BuildAddStationPayload(*projectAddStationProjectIDFlag, *projectAddStationStationIDFlag, *projectAddStationAuthFlag)
			case "remove- station":
				endpoint = c.RemoveStation()
				data, err = projectc.BuildRemoveStationPayload(*projectRemoveStationProjectIDFlag, *projectRemoveStationStationIDFlag, *projectRemoveStationAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = projectc.BuildDeletePayload(*projectDeleteProjectIDFlag, *projectDeleteAuthFlag)
			case "upload- photo":
				endpoint = c.UploadPhoto()
				data, err = projectc.BuildUploadPhotoPayload(*projectUploadPhotoProjectIDFlag, *projectUploadPhotoContentTypeFlag, *projectUploadPhotoContentLengthFlag, *projectUploadPhotoAuthFlag)
				if err == nil {
					data, err = projectc.BuildUploadPhotoStreamPayload(data, *projectUploadPhotoStreamFlag)
				}
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = projectc.BuildDownloadPhotoPayload(*projectDownloadPhotoProjectIDFlag, *projectDownloadPhotoSizeFlag, *projectDownloadPhotoIfNoneMatchFlag, *projectDownloadPhotoAuthFlag)
			}
		case "records":
			c := recordsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "data":
				endpoint = c.Data()
				data, err = recordsc.BuildDataPayload(*recordsDataRecordIDFlag, *recordsDataAuthFlag)
			case "meta":
				endpoint = c.Meta()
				data, err = recordsc.BuildMetaPayload(*recordsMetaRecordIDFlag, *recordsMetaAuthFlag)
			case "resolved":
				endpoint = c.Resolved()
				data, err = recordsc.BuildResolvedPayload(*recordsResolvedRecordIDFlag, *recordsResolvedAuthFlag)
			}
		case "sensor":
			c := sensorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			case "data":
				endpoint = c.Data()
				data, err = sensorc.BuildDataPayload(*sensorDataStartFlag, *sensorDataEndFlag, *sensorDataStationsFlag, *sensorDataSensorsFlag, *sensorDataResolutionFlag, *sensorDataAggregateFlag, *sensorDataCompleteFlag, *sensorDataTailFlag, *sensorDataAuthFlag)
			}
		case "information":
			c := informationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "device- layout":
				endpoint = c.DeviceLayout()
				data, err = informationc.BuildDeviceLayoutPayload(*informationDeviceLayoutDeviceIDFlag, *informationDeviceLayoutAuthFlag)
			case "firmware- statistics":
				endpoint = c.FirmwareStatistics()
				data, err = informationc.BuildFirmwareStatisticsPayload(*informationFirmwareStatisticsAuthFlag)
			}
		case "station":
			c := stationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = stationc.BuildAddPayload(*stationAddBodyFlag, *stationAddAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = stationc.BuildGetPayload(*stationGetIDFlag, *stationGetAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = stationc.BuildUpdatePayload(*stationUpdateBodyFlag, *stationUpdateIDFlag, *stationUpdateAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = stationc.BuildListMinePayload(*stationListMineAuthFlag)
			case "list- project":
				endpoint = c.ListProject()
				data, err = stationc.BuildListProjectPayload(*stationListProjectIDFlag, *stationListProjectAuthFlag)
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = stationc.BuildDownloadPhotoPayload(*stationDownloadPhotoStationIDFlag, *stationDownloadPhotoSizeFlag, *stationDownloadPhotoIfNoneMatchFlag, *stationDownloadPhotoAuthFlag)
			case "list- all":
				endpoint = c.ListAll()
				data, err = stationc.BuildListAllPayload(*stationListAllPageFlag, *stationListAllPageSizeFlag, *stationListAllOwnerIDFlag, *stationListAllQueryFlag, *stationListAllSortByFlag, *stationListAllAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = stationc.BuildDeletePayload(*stationDeleteStationIDFlag, *stationDeleteAuthFlag)
			}
		case "tasks":
			c := tasksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "five":
				endpoint = c.Five()
				data = nil
			}
		case "test":
			c := testc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = testc.BuildGetPayload(*testGetIDFlag)
			case "error":
				endpoint = c.Error()
				data = nil
			case "email":
				endpoint = c.Email()
				data, err = testc.BuildEmailPayload(*testEmailAddressFlag, *testEmailAuthFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "roles":
				endpoint = c.Roles()
				data, err = userc.BuildRolesPayload(*userRolesAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = userc.BuildDeletePayload(*userDeleteUserIDFlag, *userDeleteAuthFlag)
			case "upload- photo":
				endpoint = c.UploadPhoto()
				data, err = userc.BuildUploadPhotoPayload(*userUploadPhotoContentTypeFlag, *userUploadPhotoContentLengthFlag, *userUploadPhotoAuthFlag)
				if err == nil {
					data, err = userc.BuildUploadPhotoStreamPayload(data, *userUploadPhotoStreamFlag)
				}
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = userc.BuildDownloadPhotoPayload(*userDownloadPhotoUserIDFlag, *userDownloadPhotoSizeFlag, *userDownloadPhotoIfNoneMatchFlag)
			case "login":
				endpoint = c.Login()
				data, err = userc.BuildLoginPayload(*userLoginBodyFlag)
			case "recovery- lookup":
				endpoint = c.RecoveryLookup()
				data, err = userc.BuildRecoveryLookupPayload(*userRecoveryLookupBodyFlag)
			case "recovery":
				endpoint = c.Recovery()
				data, err = userc.BuildRecoveryPayload(*userRecoveryBodyFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = userc.BuildLogoutPayload(*userLogoutAuthFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = userc.BuildRefreshPayload(*userRefreshBodyFlag)
			case "send- validation":
				endpoint = c.SendValidation()
				data, err = userc.BuildSendValidationPayload(*userSendValidationUserIDFlag)
			case "validate":
				endpoint = c.Validate()
				data, err = userc.BuildValidatePayload(*userValidateTokenFlag)
			case "add":
				endpoint = c.Add()
				data, err = userc.BuildAddPayload(*userAddBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = userc.BuildUpdatePayload(*userUpdateBodyFlag, *userUpdateUserIDFlag, *userUpdateAuthFlag)
			case "change- password":
				endpoint = c.ChangePassword()
				data, err = userc.BuildChangePasswordPayload(*userChangePasswordBodyFlag, *userChangePasswordUserIDFlag, *userChangePasswordAuthFlag)
			case "get- current":
				endpoint = c.GetCurrent()
				data, err = userc.BuildGetCurrentPayload(*userGetCurrentAuthFlag)
			case "list- by- project":
				endpoint = c.ListByProject()
				data, err = userc.BuildListByProjectPayload(*userListByProjectProjectIDFlag, *userListByProjectAuthFlag)
			case "issue- transmission- token":
				endpoint = c.IssueTransmissionToken()
				data, err = userc.BuildIssueTransmissionTokenPayload(*userIssueTransmissionTokenAuthFlag)
			case "project- roles":
				endpoint = c.ProjectRoles()
				data = nil
			case "admin- delete":
				endpoint = c.AdminDelete()
				data, err = userc.BuildAdminDeletePayload(*userAdminDeleteBodyFlag, *userAdminDeleteAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// csvUsage displays the usage of the csv command and its subcommands.
func csvUsage() {
	fmt.Fprintf(os.Stderr, `Service is the csv service interface.
Usage:
    %s [globalflags] csv COMMAND [flags]

COMMAND:
    noop: Noop implements noop.

Additional help:
    %s csv COMMAND --help
`, os.Args[0], os.Args[0])
}
func csvNoopUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] csv noop

Noop implements noop.

Example:
    `+os.Args[0]+` csv noop
`, os.Args[0])
}

// activityUsage displays the usage of the activity command and its subcommands.
func activityUsage() {
	fmt.Fprintf(os.Stderr, `Service is the activity service interface.
Usage:
    %s [globalflags] activity COMMAND [flags]

COMMAND:
    station: Station implements station.
    project: Project implements project.

Additional help:
    %s activity COMMAND --help
`, os.Args[0], os.Args[0])
}
func activityStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity station -id INT64 -page INT64 -auth STRING

Station implements station.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity station --id 9084208847786097828 --page 3322321625394334420 --auth "Quaerat omnis velit."
`, os.Args[0])
}

func activityProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity project -id INT64 -page INT64 -auth STRING

Project implements project.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity project --id 7461227341203747461 --page 6026962051739128128 --auth "Sit ipsa aliquid optio sit ducimus facilis."
`, os.Args[0])
}

// collectionUsage displays the usage of the collection command and its
// subcommands.
func collectionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the collection service interface.
Usage:
    %s [globalflags] collection COMMAND [flags]

COMMAND:
    add: Add implements add.
    update: Update implements update.
    get: Get implements get.
    list- mine: ListMine implements list mine.
    add- station: AddStation implements add station.
    remove- station: RemoveStation implements remove station.
    delete: Delete implements delete.

Additional help:
    %s collection COMMAND --help
`, os.Args[0], os.Args[0])
}
func collectionAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` collection add --body '{
      "description": "Nisi dolor.",
      "name": "Dolor quo.",
      "private": true,
      "tags": "Voluptates maxime quae fuga nobis repellat debitis."
   }' --auth "Deleniti velit vel accusamus consequatur sunt quam."
`, os.Args[0])
}

func collectionUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection update -body JSON -collection-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -collection-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` collection update --body '{
      "description": "Quae ut voluptatem veritatis autem alias suscipit.",
      "name": "Dignissimos vero dolorem.",
      "private": false,
      "tags": "Repellat et aperiam minima cum."
   }' --collection-id 1451128476 --auth "Aut qui."
`, os.Args[0])
}

func collectionGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection get -collection-id INT32 -auth STRING

Get implements get.
    -collection-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` collection get --collection-id 1948856641 --auth "Optio voluptatem eos quod molestias et."
`, os.Args[0])
}

func collectionListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` collection list- mine --auth "Dolorum laudantium officiis consequatur quasi et qui."
`, os.Args[0])
}

func collectionAddStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection add- station -collection-id INT32 -station-id INT32 -auth STRING

AddStation implements add station.
    -collection-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` collection add- station --collection-id 1634241660 --station-id 582593777 --auth "Saepe ut ratione necessitatibus sapiente."
`, os.Args[0])
}

func collectionRemoveStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection remove- station -collection-id INT32 -station-id INT32 -auth STRING

RemoveStation implements remove station.
    -collection-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` collection remove- station --collection-id 1803102670 --station-id 500773702 --auth "Nostrum sit ut hic dignissimos."
`, os.Args[0])
}

func collectionDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection delete -collection-id INT32 -auth STRING

Delete implements delete.
    -collection-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` collection delete --collection-id 240875618 --auth "Doloribus corporis ut asperiores maiores eius."
`, os.Args[0])
}

// dataUsage displays the usage of the data command and its subcommands.
func dataUsage() {
	fmt.Fprintf(os.Stderr, `Service is the data service interface.
Usage:
    %s [globalflags] data COMMAND [flags]

COMMAND:
    device- summary: DeviceSummary implements device summary.

Additional help:
    %s data COMMAND --help
`, os.Args[0], os.Args[0])
}
func dataDeviceSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] data device- summary -device-id STRING -auth STRING

DeviceSummary implements device summary.
    -device-id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` data device- summary --device-id "Atque enim maxime natus fugiat maiores sunt." --auth "Optio deserunt eos neque totam est."
`, os.Args[0])
}

// exportUsage displays the usage of the export command and its subcommands.
func exportUsage() {
	fmt.Fprintf(os.Stderr, `Service is the export service interface.
Usage:
    %s [globalflags] export COMMAND [flags]

COMMAND:
    list- mine: ListMine implements list mine.
    status: Status implements status.
    download: Download implements download.
    csv: Csv implements csv.
    json- lines: JSONLines implements json lines.

Additional help:
    %s export COMMAND --help
`, os.Args[0], os.Args[0])
}
func exportListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` export list- mine --auth "Provident qui ea ea rem facere."
`, os.Args[0])
}

func exportStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export status -id STRING -auth STRING

Status implements status.
    -id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export status --id "Aliquam mollitia sapiente." --auth "Optio aut sunt nulla eaque consequatur."
`, os.Args[0])
}

func exportDownloadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export download -id STRING -auth STRING

Download implements download.
    -id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export download --id "Omnis doloremque quae maxime." --auth "Aut quidem."
`, os.Args[0])
}

func exportCsvUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export csv -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -auth STRING

Csv implements csv.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export csv --start 7959300076670015169 --end 6952531384063354323 --stations "Alias non minima accusantium." --sensors "Quisquam nihil ducimus est." --resolution 779426510 --aggregate "Et maxime dolore et distinctio nesciunt aut." --complete false --tail 84236332 --auth "Repudiandae et blanditiis."
`, os.Args[0])
}

func exportJSONLinesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export json- lines -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -auth STRING

JSONLines implements json lines.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export json- lines --start 3463617386213564722 --end 5463365086455930586 --stations "Debitis veritatis et aut culpa." --sensors "Et eos qui odit distinctio tempora corporis." --resolution 888912644 --aggregate "Deserunt quo." --complete true --tail 1218698376 --auth "Totam molestiae aut."
`, os.Args[0])
}

// firmwareUsage displays the usage of the firmware command and its subcommands.
func firmwareUsage() {
	fmt.Fprintf(os.Stderr, `Service is the firmware service interface.
Usage:
    %s [globalflags] firmware COMMAND [flags]

COMMAND:
    download: Download implements download.
    add: Add implements add.
    list: List implements list.
    delete: Delete implements delete.

Additional help:
    %s firmware COMMAND --help
`, os.Args[0], os.Args[0])
}
func firmwareDownloadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware download -firmware-id INT32

Download implements download.
    -firmware-id INT32: 

Example:
    `+os.Args[0]+` firmware download --firmware-id 667103148
`, os.Args[0])
}

func firmwareAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware add --body '{
      "description": "Nisi dolor.",
      "name": "Dolor quo.",
      "private": true,
      "tags": "Voluptates maxime quae fuga nobis repellat debitis."
   }' --auth "Recusandae ut."
`, os.Args[0])
}

func firmwareListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware list -module STRING -profile STRING -page-size INT32 -page INT32 -auth STRING

List implements list.
    -module STRING: 
    -profile STRING: 
    -page-size INT32: 
    -page INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware list --module "Dolorem dolor perspiciatis non modi fugit esse." --profile "Et dolor dicta ut laudantium sed." --page-size 2107248064 --page 1649656095 --auth "Nobis minima corrupti officia voluptatibus nesciunt."
`, os.Args[0])
}

func firmwareDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware delete -firmware-id INT32 -auth STRING

Delete implements delete.
    -firmware-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware delete --firmware-id 470708422 --auth "Iure eaque ab ratione."
`, os.Args[0])
}

// followingUsage displays the usage of the following command and its
// subcommands.
func followingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the following service interface.
Usage:
    %s [globalflags] following COMMAND [flags]

COMMAND:
    follow: Follow implements follow.
    unfollow: Unfollow implements unfollow.
    followers: Followers implements followers.

Additional help:
    %s following COMMAND --help
`, os.Args[0], os.Args[0])
}
func followingFollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following follow -id INT64 -auth STRING

Follow implements follow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following follow --id 7499419739550685061 --auth "Sint rerum labore."
`, os.Args[0])
}

func followingUnfollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following unfollow -id INT64 -auth STRING

Unfollow implements unfollow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following unfollow --id 5720784292160817097 --auth "Aut occaecati tempora quibusdam."
`, os.Args[0])
}

func followingFollowersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following followers -id INT64 -page INT64

Followers implements followers.
    -id INT64: 
    -page INT64: 

Example:
    `+os.Args[0]+` following followers --id 4646128877269080886 --page 4514673022413681226
`, os.Args[0])
}

// ingestionUsage displays the usage of the ingestion command and its
// subcommands.
func ingestionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ingestion service interface.
Usage:
    %s [globalflags] ingestion COMMAND [flags]

COMMAND:
    process- pending: ProcessPending implements process pending.
    walk- everything: WalkEverything implements walk everything.
    process- station: ProcessStation implements process station.
    process- ingestion: ProcessIngestion implements process ingestion.
    delete: Delete implements delete.

Additional help:
    %s ingestion COMMAND --help
`, os.Args[0], os.Args[0])
}
func ingestionProcessPendingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- pending -auth STRING

ProcessPending implements process pending.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- pending --auth "Corporis ipsa saepe quasi molestiae unde vel."
`, os.Args[0])
}

func ingestionWalkEverythingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion walk- everything -auth STRING

WalkEverything implements walk everything.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion walk- everything --auth "Quaerat consequatur voluptas ducimus nam aut."
`, os.Args[0])
}

func ingestionProcessStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- station -station-id INT32 -completely BOOL -auth STRING

ProcessStation implements process station.
    -station-id INT32: 
    -completely BOOL: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- station --station-id 1428564568 --completely true --auth "Quia rem beatae atque totam animi."
`, os.Args[0])
}

func ingestionProcessIngestionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- ingestion -ingestion-id INT64 -auth STRING

ProcessIngestion implements process ingestion.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- ingestion --ingestion-id 2336216911516409402 --auth "Nihil tempora."
`, os.Args[0])
}

func ingestionDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion delete -ingestion-id INT64 -auth STRING

Delete implements delete.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion delete --ingestion-id 5183106467020463759 --auth "Dolor voluptatem vel labore laborum in."
`, os.Args[0])
}

// modulesUsage displays the usage of the modules command and its subcommands.
func modulesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the modules service interface.
Usage:
    %s [globalflags] modules COMMAND [flags]

COMMAND:
    meta: Meta implements meta.

Additional help:
    %s modules COMMAND --help
`, os.Args[0], os.Args[0])
}
func modulesMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] modules meta

Meta implements meta.

Example:
    `+os.Args[0]+` modules meta
`, os.Args[0])
}

// notesUsage displays the usage of the notes command and its subcommands.
func notesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the notes service interface.
Usage:
    %s [globalflags] notes COMMAND [flags]

COMMAND:
    update: Update implements update.
    get: Get implements get.
    download- media: DownloadMedia implements download media.
    upload- media: UploadMedia implements upload media.

Additional help:
    %s notes COMMAND --help
`, os.Args[0], os.Args[0])
}
func notesUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes update -body JSON -station-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes update --body '{
      "notes": {
         "creating": [
            {
               "body": "Voluptatibus voluptatum.",
               "key": "Quia tenetur facilis voluptatum.",
               "mediaIds": [
                  978517109923934507,
                  6991571367710903168,
                  237751933690716782,
                  6623664549170262319
               ]
            },
            {
               "body": "Voluptatibus voluptatum.",
               "key": "Quia tenetur facilis voluptatum.",
               "mediaIds": [
                  978517109923934507,
                  6991571367710903168,
                  237751933690716782,
                  6623664549170262319
               ]
            },
            {
               "body": "Voluptatibus voluptatum.",
               "key": "Quia tenetur facilis voluptatum.",
               "mediaIds": [
                  978517109923934507,
                  6991571367710903168,
                  237751933690716782,
                  6623664549170262319
               ]
            },
            {
               "body": "Voluptatibus voluptatum.",
               "key": "Quia tenetur facilis voluptatum.",
               "mediaIds": [
                  978517109923934507,
                  6991571367710903168,
                  237751933690716782,
                  6623664549170262319
               ]
            }
         ],
         "notes": [
            {
               "body": "Et eveniet illum vel ad ipsa.",
               "id": 3439948326405262097,
               "key": "Aspernatur rerum id odio veniam dignissimos est.",
               "mediaIds": [
                  6506067088203641110,
                  3402849396343032322
               ]
            },
            {
               "body": "Et eveniet illum vel ad ipsa.",
               "id": 3439948326405262097,
               "key": "Aspernatur rerum id odio veniam dignissimos est.",
               "mediaIds": [
                  6506067088203641110,
                  3402849396343032322
               ]
            },
            {
               "body": "Et eveniet illum vel ad ipsa.",
               "id": 3439948326405262097,
               "key": "Aspernatur rerum id odio veniam dignissimos est.",
               "mediaIds": [
                  6506067088203641110,
                  3402849396343032322
               ]
            }
         ]
      }
   }' --station-id 878682532 --auth "Molestias perspiciatis animi illo reprehenderit."
`, os.Args[0])
}

func notesGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes get -station-id INT32 -auth STRING

Get implements get.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes get --station-id 875507357 --auth "Qui incidunt corrupti consequatur aut autem consequatur."
`, os.Args[0])
}

func notesDownloadMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes download- media -media-id INT32 -auth STRING

DownloadMedia implements download media.
    -media-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes download- media --media-id 54290166 --auth "Minus at praesentium."
`, os.Args[0])
}

func notesUploadMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes upload- media -station-id INT32 -key STRING -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadMedia implements upload media.
    -station-id INT32: 
    -key STRING: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` notes upload- media --station-id 1368824301 --key "Et error nisi quod eos." --content-type "Ducimus ut quam ut incidunt." --content-length 3027173300578403494 --auth "Autem rem dolor corporis." --stream "goa.png"
`, os.Args[0])
}

// projectUsage displays the usage of the project command and its subcommands.
func projectUsage() {
	fmt.Fprintf(os.Stderr, `Service is the project service interface.
Usage:
    %s [globalflags] project COMMAND [flags]

COMMAND:
    add- update: AddUpdate implements add update.
    delete- update: DeleteUpdate implements delete update.
    modify- update: ModifyUpdate implements modify update.
    invites: Invites implements invites.
    lookup- invite: LookupInvite implements lookup invite.
    accept- project- invite: AcceptProjectInvite implements accept project invite.
    reject- project- invite: RejectProjectInvite implements reject project invite.
    accept- invite: AcceptInvite implements accept invite.
    reject- invite: RejectInvite implements reject invite.
    add: Add implements add.
    update: Update implements update.
    get: Get implements get.
    list- community: ListCommunity implements list community.
    list- mine: ListMine implements list mine.
    invite: Invite implements invite.
    remove- user: RemoveUser implements remove user.
    add- station: AddStation implements add station.
    remove- station: RemoveStation implements remove station.
    delete: Delete implements delete.
    upload- photo: UploadPhoto implements upload photo.
    download- photo: DownloadPhoto implements download photo.

Additional help:
    %s project COMMAND --help
`, os.Args[0], os.Args[0])
}
func projectAddUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- update -body JSON -project-id INT32 -auth STRING

AddUpdate implements add update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- update --body '{
      "body": "Incidunt pariatur quae."
   }' --project-id 651136792 --auth "Atque cumque omnis."
`, os.Args[0])
}

func projectDeleteUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete- update -project-id INT32 -update-id INT64 -auth STRING

DeleteUpdate implements delete update.
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete- update --project-id 797873977 --update-id 1892095639198035994 --auth "Nemo fugiat."
`, os.Args[0])
}

func projectModifyUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project modify- update -body JSON -project-id INT32 -update-id INT64 -auth STRING

ModifyUpdate implements modify update.
    -body JSON: 
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project modify- update --body '{
      "body": "Perspiciatis eligendi dolores commodi laudantium amet."
   }' --project-id 1864521454 --update-id 2406822589774777134 --auth "Nemo pariatur et dolor tempora maiores veritatis."
`, os.Args[0])
}

func projectInvitesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invites -auth STRING

Invites implements invites.
    -auth STRING: 

Example:
    `+os.Args[0]+` project invites --auth "Velit facilis nulla accusantium."
`, os.Args[0])
}

func projectLookupInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project lookup- invite -token STRING -auth STRING

LookupInvite implements lookup invite.
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project lookup- invite --token "Neque qui." --auth "Quae amet exercitationem atque ut possimus est."
`, os.Args[0])
}

func projectAcceptProjectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project accept- project- invite -project-id INT32 -auth STRING

AcceptProjectInvite implements accept project invite.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project accept- project- invite --project-id 2102454429 --auth "Et doloremque voluptas aut nam ea."
`, os.Args[0])
}

func projectRejectProjectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project reject- project- invite -project-id INT32 -auth STRING

RejectProjectInvite implements reject project invite.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project reject- project- invite --project-id 1479524240 --auth "Alias labore enim consequuntur aut rem."
`, os.Args[0])
}

func projectAcceptInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project accept- invite -id INT64 -token STRING -auth STRING

AcceptInvite implements accept invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project accept- invite --id 8139694415775607166 --token "Tenetur delectus explicabo dolores." --auth "Ut inventore sunt nihil amet."
`, os.Args[0])
}

func projectRejectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project reject- invite -id INT64 -token STRING -auth STRING

RejectInvite implements reject invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project reject- invite --id 4308935894735454873 --token "Voluptatum placeat dolor dolor cupiditate unde." --auth "Autem quis laudantium natus ipsum."
`, os.Args[0])
}

func projectAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add --body '{
      "description": "Nisi dolor.",
      "name": "Dolor quo.",
      "private": true,
      "tags": "Voluptates maxime quae fuga nobis repellat debitis."
   }' --auth "Nihil cumque."
`, os.Args[0])
}

func projectUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project update -body JSON -project-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project update --body '{
      "description": "Quae ut voluptatem veritatis autem alias suscipit.",
      "name": "Dignissimos vero dolorem.",
      "private": false,
      "tags": "Repellat et aperiam minima cum."
   }' --project-id 1736231736 --auth "Quia itaque commodi."
`, os.Args[0])
}

func projectGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project get -project-id INT32 -auth STRING

Get implements get.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project get --project-id 956551200 --auth "Dolores assumenda asperiores."
`, os.Args[0])
}

func projectListCommunityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project list- community -auth STRING

ListCommunity implements list community.
    -auth STRING: 

Example:
    `+os.Args[0]+` project list- community --auth "Harum ullam blanditiis."
`, os.Args[0])
}

func projectListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` project list- mine --auth "Molestiae perspiciatis molestiae quas fugiat enim voluptatibus."
`, os.Args[0])
}

func projectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invite -body JSON -project-id INT32 -auth STRING

Invite implements invite.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project invite --body '{
      "email": "Voluptas consequatur culpa.",
      "role": 1188132654
   }' --project-id 203377650 --auth "Cum quisquam corrupti temporibus impedit totam."
`, os.Args[0])
}

func projectRemoveUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project remove- user -body JSON -project-id INT32 -auth STRING

RemoveUser implements remove user.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project remove- user --body '{
      "email": "Distinctio cumque ut."
   }' --project-id 1012335488 --auth "Cumque deserunt incidunt adipisci ullam."
`, os.Args[0])
}

func projectAddStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- station -project-id INT32 -station-id INT32 -auth STRING

AddStation implements add station.
    -project-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- station --project-id 1473741798 --station-id 920779328 --auth "Dolor voluptatum."
`, os.Args[0])
}

func projectRemoveStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project remove- station -project-id INT32 -station-id INT32 -auth STRING

RemoveStation implements remove station.
    -project-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project remove- station --project-id 796200972 --station-id 1841005578 --auth "Earum non dolores mollitia debitis."
`, os.Args[0])
}

func projectDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete -project-id INT32 -auth STRING

Delete implements delete.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete --project-id 1519726392 --auth "Autem omnis id ex."
`, os.Args[0])
}

func projectUploadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project upload- photo -project-id INT32 -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadPhoto implements upload photo.
    -project-id INT32: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` project upload- photo --project-id 978769797 --content-type "Maiores aspernatur." --content-length 7440979185824312967 --auth "Voluptatem quia dolores aut ea quaerat sint." --stream "goa.png"
`, os.Args[0])
}

func projectDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project download- photo -project-id INT32 -size INT32 -if-none-match STRING -auth STRING

DownloadPhoto implements download photo.
    -project-id INT32: 
    -size INT32: 
    -if-none-match STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project download- photo --project-id 1129913525 --size 137671464 --if-none-match "Labore quibusdam." --auth "Voluptatem ut velit vel voluptas non architecto."
`, os.Args[0])
}

// recordsUsage displays the usage of the records command and its subcommands.
func recordsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the records service interface.
Usage:
    %s [globalflags] records COMMAND [flags]

COMMAND:
    data: Data implements data.
    meta: Meta implements meta.
    resolved: Resolved implements resolved.

Additional help:
    %s records COMMAND --help
`, os.Args[0], os.Args[0])
}
func recordsDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records data -record-id INT64 -auth STRING

Data implements data.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records data --record-id 9190821989412969134 --auth "Quibusdam quaerat voluptas earum."
`, os.Args[0])
}

func recordsMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records meta -record-id INT64 -auth STRING

Meta implements meta.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records meta --record-id 6443204217286192412 --auth "Et tempore qui voluptatem est maiores iusto."
`, os.Args[0])
}

func recordsResolvedUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records resolved -record-id INT64 -auth STRING

Resolved implements resolved.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records resolved --record-id 7656372409975660003 --auth "Consequuntur alias ea inventore maxime."
`, os.Args[0])
}

// sensorUsage displays the usage of the sensor command and its subcommands.
func sensorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the sensor service interface.
Usage:
    %s [globalflags] sensor COMMAND [flags]

COMMAND:
    meta: Meta implements meta.
    data: Data implements data.

Additional help:
    %s sensor COMMAND --help
`, os.Args[0], os.Args[0])
}
func sensorMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor meta

Meta implements meta.

Example:
    `+os.Args[0]+` sensor meta
`, os.Args[0])
}

func sensorDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor data -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -auth STRING

Data implements data.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor data --start 8744221828374529577 --end 305459934428664440 --stations "Eaque et sed id quas est." --sensors "Incidunt quaerat minima molestias corporis quaerat." --resolution 1700753650 --aggregate "Quis recusandae excepturi rerum id assumenda." --complete true --tail 430761252 --auth "Et dignissimos voluptate eaque."
`, os.Args[0])
}

// informationUsage displays the usage of the information command and its
// subcommands.
func informationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the information service interface.
Usage:
    %s [globalflags] information COMMAND [flags]

COMMAND:
    device- layout: DeviceLayout implements device layout.
    firmware- statistics: FirmwareStatistics implements firmware statistics.

Additional help:
    %s information COMMAND --help
`, os.Args[0], os.Args[0])
}
func informationDeviceLayoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information device- layout -device-id STRING -auth STRING

DeviceLayout implements device layout.
    -device-id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` information device- layout --device-id "Quo asperiores incidunt officiis molestiae ut." --auth "A eligendi quos."
`, os.Args[0])
}

func informationFirmwareStatisticsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information firmware- statistics -auth STRING

FirmwareStatistics implements firmware statistics.
    -auth STRING: 

Example:
    `+os.Args[0]+` information firmware- statistics --auth "Velit aut impedit."
`, os.Args[0])
}

// stationUsage displays the usage of the station command and its subcommands.
func stationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the station service interface.
Usage:
    %s [globalflags] station COMMAND [flags]

COMMAND:
    add: Add implements add.
    get: Get implements get.
    update: Update implements update.
    list- mine: ListMine implements list mine.
    list- project: ListProject implements list project.
    download- photo: DownloadPhoto implements download photo.
    list- all: ListAll implements list all.
    delete: Delete implements delete.

Additional help:
    %s station COMMAND --help
`, os.Args[0], os.Args[0])
}
func stationAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station add --body '{
      "deviceId": "Nam dolore.",
      "locationName": "Aliquam fugit sunt exercitationem laudantium praesentium consequatur.",
      "name": "Rerum sunt nesciunt commodi reprehenderit dolorum accusantium.",
      "statusPb": "Eum accusantium possimus fugiat nobis laudantium."
   }' --auth "Aliquid quis rerum."
`, os.Args[0])
}

func stationGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station get -id INT32 -auth STRING

Get implements get.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station get --id 2004062975 --auth "Rerum vero nesciunt."
`, os.Args[0])
}

func stationUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station update -body JSON -id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station update --body '{
      "locationName": "Suscipit totam ut quo id cupiditate.",
      "name": "Quia atque ut.",
      "statusPb": "Nulla minus et nulla."
   }' --id 1375243173 --auth "Nemo qui non maiores in possimus."
`, os.Args[0])
}

func stationListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- mine --auth "Dicta qui."
`, os.Args[0])
}

func stationListProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- project -id INT32 -auth STRING

ListProject implements list project.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- project --id 2102978875 --auth "Voluptas debitis dolor voluptas illum voluptate consequatur."
`, os.Args[0])
}

func stationDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station download- photo -station-id INT32 -size INT32 -if-none-match STRING -auth STRING

DownloadPhoto implements download photo.
    -station-id INT32: 
    -size INT32: 
    -if-none-match STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station download- photo --station-id 445327436 --size 1045018885 --if-none-match "Quaerat enim laborum est quos ut." --auth "Voluptatibus sunt minus illum maxime iusto."
`, os.Args[0])
}

func stationListAllUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- all -page INT32 -page-size INT32 -owner-id INT32 -query STRING -sort-by STRING -auth STRING

ListAll implements list all.
    -page INT32: 
    -page-size INT32: 
    -owner-id INT32: 
    -query STRING: 
    -sort-by STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- all --page 121107452 --page-size 445885962 --owner-id 125844957 --query "Voluptas necessitatibus provident." --sort-by "Facere voluptatem rerum error modi ut." --auth "Ducimus cumque iure quia ipsum est voluptas."
`, os.Args[0])
}

func stationDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station delete -station-id INT32 -auth STRING

Delete implements delete.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station delete --station-id 19804409 --auth "Nesciunt veniam ea dolorum voluptatem sed."
`, os.Args[0])
}

// tasksUsage displays the usage of the tasks command and its subcommands.
func tasksUsage() {
	fmt.Fprintf(os.Stderr, `Service is the tasks service interface.
Usage:
    %s [globalflags] tasks COMMAND [flags]

COMMAND:
    five: Five implements five.

Additional help:
    %s tasks COMMAND --help
`, os.Args[0], os.Args[0])
}
func tasksFiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tasks five

Five implements five.

Example:
    `+os.Args[0]+` tasks five
`, os.Args[0])
}

// testUsage displays the usage of the test command and its subcommands.
func testUsage() {
	fmt.Fprintf(os.Stderr, `Service is the test service interface.
Usage:
    %s [globalflags] test COMMAND [flags]

COMMAND:
    get: Get implements get.
    error: Error implements error.
    email: Email implements email.

Additional help:
    %s test COMMAND --help
`, os.Args[0], os.Args[0])
}
func testGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test get -id INT64

Get implements get.
    -id INT64: 

Example:
    `+os.Args[0]+` test get --id 5538301731383541944
`, os.Args[0])
}

func testErrorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test error

Error implements error.

Example:
    `+os.Args[0]+` test error
`, os.Args[0])
}

func testEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test email -address STRING -auth STRING

Email implements email.
    -address STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` test email --address "Sit neque rem laudantium sunt." --auth "Odio quia fugit sit."
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the user service interface.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    roles: Roles implements roles.
    delete: Delete implements delete.
    upload- photo: UploadPhoto implements upload photo.
    download- photo: DownloadPhoto implements download photo.
    login: Login implements login.
    recovery- lookup: RecoveryLookup implements recovery lookup.
    recovery: Recovery implements recovery.
    logout: Logout implements logout.
    refresh: Refresh implements refresh.
    send- validation: SendValidation implements send validation.
    validate: Validate implements validate.
    add: Add implements add.
    update: Update implements update.
    change- password: ChangePassword implements change password.
    get- current: GetCurrent implements get current.
    list- by- project: ListByProject implements list by project.
    issue- transmission- token: IssueTransmissionToken implements issue transmission token.
    project- roles: ProjectRoles implements project roles.
    admin- delete: AdminDelete implements admin delete.

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user roles -auth STRING

Roles implements roles.
    -auth STRING: 

Example:
    `+os.Args[0]+` user roles --auth "Hic quia commodi."
`, os.Args[0])
}

func userDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user delete -user-id INT32 -auth STRING

Delete implements delete.
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user delete --user-id 593714902 --auth "Rerum cum quos."
`, os.Args[0])
}

func userUploadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user upload- photo -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadPhoto implements upload photo.
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` user upload- photo --content-type "Sed ratione deserunt." --content-length 5839844166285999800 --auth "Sit neque consequatur vero aspernatur vitae." --stream "goa.png"
`, os.Args[0])
}

func userDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user download- photo -user-id INT32 -size INT32 -if-none-match STRING

DownloadPhoto implements download photo.
    -user-id INT32: 
    -size INT32: 
    -if-none-match STRING: 

Example:
    `+os.Args[0]+` user download- photo --user-id 1129489212 --size 1482339215 --if-none-match "Itaque dolorem rerum."
`, os.Args[0])
}

func userLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user login -body JSON

Login implements login.
    -body JSON: 

Example:
    `+os.Args[0]+` user login --body '{
      "email": "arely_larson@boderice.biz",
      "password": "1j7"
   }'
`, os.Args[0])
}

func userRecoveryLookupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user recovery- lookup -body JSON

RecoveryLookup implements recovery lookup.
    -body JSON: 

Example:
    `+os.Args[0]+` user recovery- lookup --body '{
      "email": "Blanditiis soluta beatae voluptatem."
   }'
`, os.Args[0])
}

func userRecoveryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user recovery -body JSON

Recovery implements recovery.
    -body JSON: 

Example:
    `+os.Args[0]+` user recovery --body '{
      "password": "7g5",
      "token": "Veniam dicta quia laboriosam et repellat."
   }'
`, os.Args[0])
}

func userLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user logout -auth STRING

Logout implements logout.
    -auth STRING: 

Example:
    `+os.Args[0]+` user logout --auth "Sit modi officiis incidunt recusandae eos sint."
`, os.Args[0])
}

func userRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user refresh -body JSON

Refresh implements refresh.
    -body JSON: 

Example:
    `+os.Args[0]+` user refresh --body '{
      "refreshToken": "Unde vero est."
   }'
`, os.Args[0])
}

func userSendValidationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user send- validation -user-id INT32

SendValidation implements send validation.
    -user-id INT32: 

Example:
    `+os.Args[0]+` user send- validation --user-id 1287391495
`, os.Args[0])
}

func userValidateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user validate -token STRING

Validate implements validate.
    -token STRING: 

Example:
    `+os.Args[0]+` user validate --token "Pariatur tempore doloribus sunt quasi consequatur totam."
`, os.Args[0])
}

func userAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user add -body JSON

Add implements add.
    -body JSON: 

Example:
    `+os.Args[0]+` user add --body '{
      "description": "Nisi dolor.",
      "name": "Dolor quo.",
      "private": true,
      "tags": "Voluptates maxime quae fuga nobis repellat debitis."
   }'
`, os.Args[0])
}

func userUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update -body JSON -user-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user update --body '{
      "description": "Quae ut voluptatem veritatis autem alias suscipit.",
      "name": "Dignissimos vero dolorem.",
      "private": false,
      "tags": "Repellat et aperiam minima cum."
   }' --user-id 312715428 --auth "Aut et assumenda vel corporis omnis."
`, os.Args[0])
}

func userChangePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user change- password -body JSON -user-id INT32 -auth STRING

ChangePassword implements change password.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user change- password --body '{
      "newPassword": "sgz",
      "oldPassword": "cy6"
   }' --user-id 790293661 --auth "Qui et."
`, os.Args[0])
}

func userGetCurrentUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get- current -auth STRING

GetCurrent implements get current.
    -auth STRING: 

Example:
    `+os.Args[0]+` user get- current --auth "Ut voluptatem."
`, os.Args[0])
}

func userListByProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user list- by- project -project-id INT32 -auth STRING

ListByProject implements list by project.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user list- by- project --project-id 944210802 --auth "Dolores ab non animi iste optio."
`, os.Args[0])
}

func userIssueTransmissionTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user issue- transmission- token -auth STRING

IssueTransmissionToken implements issue transmission token.
    -auth STRING: 

Example:
    `+os.Args[0]+` user issue- transmission- token --auth "Unde aut qui doloribus eum omnis cumque."
`, os.Args[0])
}

func userProjectRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user project- roles

ProjectRoles implements project roles.

Example:
    `+os.Args[0]+` user project- roles
`, os.Args[0])
}

func userAdminDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user admin- delete -body JSON -auth STRING

AdminDelete implements admin delete.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user admin- delete --body '{
      "email": "Enim recusandae quas odit dolorum.",
      "password": "Temporibus alias totam sint necessitatibus et temporibus."
   }' --auth "Aliquam et est voluptatibus."
`, os.Args[0])
}
