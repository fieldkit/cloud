// Code generated by goa v3.2.4, DO NOT EDIT.
//
// activity HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	activityc "github.com/fieldkit/cloud/server/api/gen/http/activity/client"
	csvc "github.com/fieldkit/cloud/server/api/gen/http/csv/client"
	datac "github.com/fieldkit/cloud/server/api/gen/http/data/client"
	discoursec "github.com/fieldkit/cloud/server/api/gen/http/discourse/client"
	discussionc "github.com/fieldkit/cloud/server/api/gen/http/discussion/client"
	exportc "github.com/fieldkit/cloud/server/api/gen/http/export/client"
	firmwarec "github.com/fieldkit/cloud/server/api/gen/http/firmware/client"
	followingc "github.com/fieldkit/cloud/server/api/gen/http/following/client"
	informationc "github.com/fieldkit/cloud/server/api/gen/http/information/client"
	ingestionc "github.com/fieldkit/cloud/server/api/gen/http/ingestion/client"
	modulesc "github.com/fieldkit/cloud/server/api/gen/http/modules/client"
	notesc "github.com/fieldkit/cloud/server/api/gen/http/notes/client"
	notificationsc "github.com/fieldkit/cloud/server/api/gen/http/notifications/client"
	oidcc "github.com/fieldkit/cloud/server/api/gen/http/oidc/client"
	projectc "github.com/fieldkit/cloud/server/api/gen/http/project/client"
	recordsc "github.com/fieldkit/cloud/server/api/gen/http/records/client"
	sensorc "github.com/fieldkit/cloud/server/api/gen/http/sensor/client"
	stationc "github.com/fieldkit/cloud/server/api/gen/http/station/client"
	tasksc "github.com/fieldkit/cloud/server/api/gen/http/tasks/client"
	testc "github.com/fieldkit/cloud/server/api/gen/http/test/client"
	ttnc "github.com/fieldkit/cloud/server/api/gen/http/ttn/client"
	userc "github.com/fieldkit/cloud/server/api/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `activity (station|project)
csv noop
data device- summary
discourse authenticate
discussion (project|data|post- message|update- message|delete- message)
export (list- mine|status|download|csv|json- lines)
firmware (download|add|list|delete)
following (follow|unfollow|followers)
ingestion (process- pending|walk- everything|process- station|process- station- ingestions|process- ingestion|refresh- views|delete)
modules meta
notes (update|get|download- media|upload- media|delete- media)
notifications (listen|seen)
oidc (required|url|authenticate)
project (add- update|delete- update|modify- update|invites|lookup- invite|accept- project- invite|reject- project- invite|accept- invite|reject- invite|add|update|get|list- community|list- mine|invite|edit- user|remove- user|add- station|remove- station|delete|upload- photo|download- photo|get- projects- for- station)
records (data|meta|resolved)
sensor (meta|station- meta|sensor- meta|data|tail|recently|bookmark|resolve)
information (device- layout|firmware- statistics)
station (add|get|transfer|default- photo|update|list- mine|list- project|list- associated|list- project- associated|download- photo|list- all|delete|admin- search|progress)
tasks five
test (get|error|email)
ttn webhook
user (roles|upload- photo|download- photo|login|recovery- lookup|recovery|resume|logout|refresh|send- validation|validate|add|update|change- password|accept- tnc|get- current|list- by- project|issue- transmission- token|project- roles|admin- terms- and- conditions|admin- delete|admin- search|mentionables)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` activity station --id 6194776481514002030 --page 8592596582790249171 --auth "Nobis aut minus aut sunt."` + "\n" +
		os.Args[0] + ` csv noop` + "\n" +
		os.Args[0] + ` data device- summary --device-id "Cupiditate sed sint." --auth "Nemo provident blanditiis odio temporibus suscipit voluptatem."` + "\n" +
		os.Args[0] + ` discourse authenticate --body '{
      "email": "Fuga sunt enim aperiam ut.",
      "password": "zzn",
      "sig": "Quia optio.",
      "sso": "Sint iste voluptate sed iusto."
   }' --token "Aut eos tempore sint beatae."` + "\n" +
		os.Args[0] + ` discussion project --project-id 2045491323 --auth "Modi consequatur tempora tempore."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	notificationsConfigurer *notificationsc.ConnConfigurer,
) (goa.Endpoint, interface{}, error) {
	var (
		activityFlags = flag.NewFlagSet("activity", flag.ContinueOnError)

		activityStationFlags    = flag.NewFlagSet("station", flag.ExitOnError)
		activityStationIDFlag   = activityStationFlags.String("id", "REQUIRED", "")
		activityStationPageFlag = activityStationFlags.String("page", "", "")
		activityStationAuthFlag = activityStationFlags.String("auth", "", "")

		activityProjectFlags    = flag.NewFlagSet("project", flag.ExitOnError)
		activityProjectIDFlag   = activityProjectFlags.String("id", "REQUIRED", "")
		activityProjectPageFlag = activityProjectFlags.String("page", "", "")
		activityProjectAuthFlag = activityProjectFlags.String("auth", "", "")

		csvFlags = flag.NewFlagSet("csv", flag.ContinueOnError)

		csvNoopFlags = flag.NewFlagSet("noop", flag.ExitOnError)

		dataFlags = flag.NewFlagSet("data", flag.ContinueOnError)

		dataDeviceSummaryFlags        = flag.NewFlagSet("device- summary", flag.ExitOnError)
		dataDeviceSummaryDeviceIDFlag = dataDeviceSummaryFlags.String("device-id", "REQUIRED", "")
		dataDeviceSummaryAuthFlag     = dataDeviceSummaryFlags.String("auth", "", "")

		discourseFlags = flag.NewFlagSet("discourse", flag.ContinueOnError)

		discourseAuthenticateFlags     = flag.NewFlagSet("authenticate", flag.ExitOnError)
		discourseAuthenticateBodyFlag  = discourseAuthenticateFlags.String("body", "REQUIRED", "")
		discourseAuthenticateTokenFlag = discourseAuthenticateFlags.String("token", "", "")

		discussionFlags = flag.NewFlagSet("discussion", flag.ContinueOnError)

		discussionProjectFlags         = flag.NewFlagSet("project", flag.ExitOnError)
		discussionProjectProjectIDFlag = discussionProjectFlags.String("project-id", "REQUIRED", "")
		discussionProjectAuthFlag      = discussionProjectFlags.String("auth", "", "")

		discussionDataFlags        = flag.NewFlagSet("data", flag.ExitOnError)
		discussionDataBookmarkFlag = discussionDataFlags.String("bookmark", "REQUIRED", "")
		discussionDataAuthFlag     = discussionDataFlags.String("auth", "", "")

		discussionPostMessageFlags    = flag.NewFlagSet("post- message", flag.ExitOnError)
		discussionPostMessageBodyFlag = discussionPostMessageFlags.String("body", "REQUIRED", "")
		discussionPostMessageAuthFlag = discussionPostMessageFlags.String("auth", "REQUIRED", "")

		discussionUpdateMessageFlags      = flag.NewFlagSet("update- message", flag.ExitOnError)
		discussionUpdateMessageBodyFlag   = discussionUpdateMessageFlags.String("body", "REQUIRED", "")
		discussionUpdateMessagePostIDFlag = discussionUpdateMessageFlags.String("post-id", "REQUIRED", "")
		discussionUpdateMessageAuthFlag   = discussionUpdateMessageFlags.String("auth", "REQUIRED", "")

		discussionDeleteMessageFlags      = flag.NewFlagSet("delete- message", flag.ExitOnError)
		discussionDeleteMessagePostIDFlag = discussionDeleteMessageFlags.String("post-id", "REQUIRED", "")
		discussionDeleteMessageAuthFlag   = discussionDeleteMessageFlags.String("auth", "REQUIRED", "")

		exportFlags = flag.NewFlagSet("export", flag.ContinueOnError)

		exportListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		exportListMineAuthFlag = exportListMineFlags.String("auth", "REQUIRED", "")

		exportStatusFlags    = flag.NewFlagSet("status", flag.ExitOnError)
		exportStatusIDFlag   = exportStatusFlags.String("id", "REQUIRED", "")
		exportStatusAuthFlag = exportStatusFlags.String("auth", "REQUIRED", "")

		exportDownloadFlags    = flag.NewFlagSet("download", flag.ExitOnError)
		exportDownloadIDFlag   = exportDownloadFlags.String("id", "REQUIRED", "")
		exportDownloadAuthFlag = exportDownloadFlags.String("auth", "REQUIRED", "")

		exportCsvFlags          = flag.NewFlagSet("csv", flag.ExitOnError)
		exportCsvStartFlag      = exportCsvFlags.String("start", "", "")
		exportCsvEndFlag        = exportCsvFlags.String("end", "", "")
		exportCsvStationsFlag   = exportCsvFlags.String("stations", "", "")
		exportCsvSensorsFlag    = exportCsvFlags.String("sensors", "", "")
		exportCsvResolutionFlag = exportCsvFlags.String("resolution", "", "")
		exportCsvAggregateFlag  = exportCsvFlags.String("aggregate", "", "")
		exportCsvCompleteFlag   = exportCsvFlags.String("complete", "", "")
		exportCsvTailFlag       = exportCsvFlags.String("tail", "", "")
		exportCsvAuthFlag       = exportCsvFlags.String("auth", "REQUIRED", "")

		exportJSONLinesFlags          = flag.NewFlagSet("json- lines", flag.ExitOnError)
		exportJSONLinesStartFlag      = exportJSONLinesFlags.String("start", "", "")
		exportJSONLinesEndFlag        = exportJSONLinesFlags.String("end", "", "")
		exportJSONLinesStationsFlag   = exportJSONLinesFlags.String("stations", "", "")
		exportJSONLinesSensorsFlag    = exportJSONLinesFlags.String("sensors", "", "")
		exportJSONLinesResolutionFlag = exportJSONLinesFlags.String("resolution", "", "")
		exportJSONLinesAggregateFlag  = exportJSONLinesFlags.String("aggregate", "", "")
		exportJSONLinesCompleteFlag   = exportJSONLinesFlags.String("complete", "", "")
		exportJSONLinesTailFlag       = exportJSONLinesFlags.String("tail", "", "")
		exportJSONLinesAuthFlag       = exportJSONLinesFlags.String("auth", "REQUIRED", "")

		firmwareFlags = flag.NewFlagSet("firmware", flag.ContinueOnError)

		firmwareDownloadFlags          = flag.NewFlagSet("download", flag.ExitOnError)
		firmwareDownloadFirmwareIDFlag = firmwareDownloadFlags.String("firmware-id", "REQUIRED", "")

		firmwareAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		firmwareAddBodyFlag = firmwareAddFlags.String("body", "REQUIRED", "")
		firmwareAddAuthFlag = firmwareAddFlags.String("auth", "", "")

		firmwareListFlags        = flag.NewFlagSet("list", flag.ExitOnError)
		firmwareListModuleFlag   = firmwareListFlags.String("module", "", "")
		firmwareListProfileFlag  = firmwareListFlags.String("profile", "", "")
		firmwareListPageSizeFlag = firmwareListFlags.String("page-size", "", "")
		firmwareListPageFlag     = firmwareListFlags.String("page", "", "")
		firmwareListAuthFlag     = firmwareListFlags.String("auth", "", "")

		firmwareDeleteFlags          = flag.NewFlagSet("delete", flag.ExitOnError)
		firmwareDeleteFirmwareIDFlag = firmwareDeleteFlags.String("firmware-id", "REQUIRED", "")
		firmwareDeleteAuthFlag       = firmwareDeleteFlags.String("auth", "", "")

		followingFlags = flag.NewFlagSet("following", flag.ContinueOnError)

		followingFollowFlags    = flag.NewFlagSet("follow", flag.ExitOnError)
		followingFollowIDFlag   = followingFollowFlags.String("id", "REQUIRED", "")
		followingFollowAuthFlag = followingFollowFlags.String("auth", "", "")

		followingUnfollowFlags    = flag.NewFlagSet("unfollow", flag.ExitOnError)
		followingUnfollowIDFlag   = followingUnfollowFlags.String("id", "REQUIRED", "")
		followingUnfollowAuthFlag = followingUnfollowFlags.String("auth", "", "")

		followingFollowersFlags    = flag.NewFlagSet("followers", flag.ExitOnError)
		followingFollowersIDFlag   = followingFollowersFlags.String("id", "REQUIRED", "")
		followingFollowersPageFlag = followingFollowersFlags.String("page", "", "")

		ingestionFlags = flag.NewFlagSet("ingestion", flag.ContinueOnError)

		ingestionProcessPendingFlags    = flag.NewFlagSet("process- pending", flag.ExitOnError)
		ingestionProcessPendingAuthFlag = ingestionProcessPendingFlags.String("auth", "REQUIRED", "")

		ingestionWalkEverythingFlags    = flag.NewFlagSet("walk- everything", flag.ExitOnError)
		ingestionWalkEverythingAuthFlag = ingestionWalkEverythingFlags.String("auth", "REQUIRED", "")

		ingestionProcessStationFlags          = flag.NewFlagSet("process- station", flag.ExitOnError)
		ingestionProcessStationStationIDFlag  = ingestionProcessStationFlags.String("station-id", "REQUIRED", "")
		ingestionProcessStationCompletelyFlag = ingestionProcessStationFlags.String("completely", "", "")
		ingestionProcessStationSkipManualFlag = ingestionProcessStationFlags.String("skip-manual", "", "")
		ingestionProcessStationAuthFlag       = ingestionProcessStationFlags.String("auth", "REQUIRED", "")

		ingestionProcessStationIngestionsFlags         = flag.NewFlagSet("process- station- ingestions", flag.ExitOnError)
		ingestionProcessStationIngestionsStationIDFlag = ingestionProcessStationIngestionsFlags.String("station-id", "REQUIRED", "")
		ingestionProcessStationIngestionsAuthFlag      = ingestionProcessStationIngestionsFlags.String("auth", "REQUIRED", "")

		ingestionProcessIngestionFlags           = flag.NewFlagSet("process- ingestion", flag.ExitOnError)
		ingestionProcessIngestionIngestionIDFlag = ingestionProcessIngestionFlags.String("ingestion-id", "REQUIRED", "")
		ingestionProcessIngestionAuthFlag        = ingestionProcessIngestionFlags.String("auth", "REQUIRED", "")

		ingestionRefreshViewsFlags    = flag.NewFlagSet("refresh- views", flag.ExitOnError)
		ingestionRefreshViewsAuthFlag = ingestionRefreshViewsFlags.String("auth", "REQUIRED", "")

		ingestionDeleteFlags           = flag.NewFlagSet("delete", flag.ExitOnError)
		ingestionDeleteIngestionIDFlag = ingestionDeleteFlags.String("ingestion-id", "REQUIRED", "")
		ingestionDeleteAuthFlag        = ingestionDeleteFlags.String("auth", "REQUIRED", "")

		modulesFlags = flag.NewFlagSet("modules", flag.ContinueOnError)

		modulesMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		notesFlags = flag.NewFlagSet("notes", flag.ContinueOnError)

		notesUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		notesUpdateBodyFlag      = notesUpdateFlags.String("body", "REQUIRED", "")
		notesUpdateStationIDFlag = notesUpdateFlags.String("station-id", "REQUIRED", "")
		notesUpdateAuthFlag      = notesUpdateFlags.String("auth", "REQUIRED", "")

		notesGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		notesGetStationIDFlag = notesGetFlags.String("station-id", "REQUIRED", "")
		notesGetAuthFlag      = notesGetFlags.String("auth", "", "")

		notesDownloadMediaFlags       = flag.NewFlagSet("download- media", flag.ExitOnError)
		notesDownloadMediaMediaIDFlag = notesDownloadMediaFlags.String("media-id", "REQUIRED", "")
		notesDownloadMediaAuthFlag    = notesDownloadMediaFlags.String("auth", "", "")

		notesUploadMediaFlags             = flag.NewFlagSet("upload- media", flag.ExitOnError)
		notesUploadMediaStationIDFlag     = notesUploadMediaFlags.String("station-id", "REQUIRED", "")
		notesUploadMediaKeyFlag           = notesUploadMediaFlags.String("key", "REQUIRED", "")
		notesUploadMediaContentTypeFlag   = notesUploadMediaFlags.String("content-type", "REQUIRED", "")
		notesUploadMediaContentLengthFlag = notesUploadMediaFlags.String("content-length", "REQUIRED", "")
		notesUploadMediaAuthFlag          = notesUploadMediaFlags.String("auth", "REQUIRED", "")
		notesUploadMediaStreamFlag        = notesUploadMediaFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		notesDeleteMediaFlags       = flag.NewFlagSet("delete- media", flag.ExitOnError)
		notesDeleteMediaMediaIDFlag = notesDeleteMediaFlags.String("media-id", "REQUIRED", "")
		notesDeleteMediaAuthFlag    = notesDeleteMediaFlags.String("auth", "REQUIRED", "")

		notificationsFlags = flag.NewFlagSet("notifications", flag.ContinueOnError)

		notificationsListenFlags = flag.NewFlagSet("listen", flag.ExitOnError)

		notificationsSeenFlags    = flag.NewFlagSet("seen", flag.ExitOnError)
		notificationsSeenBodyFlag = notificationsSeenFlags.String("body", "REQUIRED", "")
		notificationsSeenAuthFlag = notificationsSeenFlags.String("auth", "REQUIRED", "")

		oidcFlags = flag.NewFlagSet("oidc", flag.ContinueOnError)

		oidcRequiredFlags      = flag.NewFlagSet("required", flag.ExitOnError)
		oidcRequiredAfterFlag  = oidcRequiredFlags.String("after", "", "")
		oidcRequiredFollowFlag = oidcRequiredFlags.String("follow", "", "")
		oidcRequiredTokenFlag  = oidcRequiredFlags.String("token", "", "")

		oidcURLFlags      = flag.NewFlagSet("url", flag.ExitOnError)
		oidcURLAfterFlag  = oidcURLFlags.String("after", "", "")
		oidcURLFollowFlag = oidcURLFlags.String("follow", "", "")
		oidcURLTokenFlag  = oidcURLFlags.String("token", "", "")

		oidcAuthenticateFlags            = flag.NewFlagSet("authenticate", flag.ExitOnError)
		oidcAuthenticateStateFlag        = oidcAuthenticateFlags.String("state", "REQUIRED", "")
		oidcAuthenticateSessionStateFlag = oidcAuthenticateFlags.String("session-state", "REQUIRED", "")
		oidcAuthenticateCodeFlag         = oidcAuthenticateFlags.String("code", "REQUIRED", "")

		projectFlags = flag.NewFlagSet("project", flag.ContinueOnError)

		projectAddUpdateFlags         = flag.NewFlagSet("add- update", flag.ExitOnError)
		projectAddUpdateBodyFlag      = projectAddUpdateFlags.String("body", "REQUIRED", "")
		projectAddUpdateProjectIDFlag = projectAddUpdateFlags.String("project-id", "REQUIRED", "")
		projectAddUpdateAuthFlag      = projectAddUpdateFlags.String("auth", "REQUIRED", "")

		projectDeleteUpdateFlags         = flag.NewFlagSet("delete- update", flag.ExitOnError)
		projectDeleteUpdateProjectIDFlag = projectDeleteUpdateFlags.String("project-id", "REQUIRED", "")
		projectDeleteUpdateUpdateIDFlag  = projectDeleteUpdateFlags.String("update-id", "REQUIRED", "")
		projectDeleteUpdateAuthFlag      = projectDeleteUpdateFlags.String("auth", "REQUIRED", "")

		projectModifyUpdateFlags         = flag.NewFlagSet("modify- update", flag.ExitOnError)
		projectModifyUpdateBodyFlag      = projectModifyUpdateFlags.String("body", "REQUIRED", "")
		projectModifyUpdateProjectIDFlag = projectModifyUpdateFlags.String("project-id", "REQUIRED", "")
		projectModifyUpdateUpdateIDFlag  = projectModifyUpdateFlags.String("update-id", "REQUIRED", "")
		projectModifyUpdateAuthFlag      = projectModifyUpdateFlags.String("auth", "REQUIRED", "")

		projectInvitesFlags    = flag.NewFlagSet("invites", flag.ExitOnError)
		projectInvitesAuthFlag = projectInvitesFlags.String("auth", "REQUIRED", "")

		projectLookupInviteFlags     = flag.NewFlagSet("lookup- invite", flag.ExitOnError)
		projectLookupInviteTokenFlag = projectLookupInviteFlags.String("token", "REQUIRED", "")
		projectLookupInviteAuthFlag  = projectLookupInviteFlags.String("auth", "REQUIRED", "")

		projectAcceptProjectInviteFlags         = flag.NewFlagSet("accept- project- invite", flag.ExitOnError)
		projectAcceptProjectInviteProjectIDFlag = projectAcceptProjectInviteFlags.String("project-id", "REQUIRED", "")
		projectAcceptProjectInviteAuthFlag      = projectAcceptProjectInviteFlags.String("auth", "REQUIRED", "")

		projectRejectProjectInviteFlags         = flag.NewFlagSet("reject- project- invite", flag.ExitOnError)
		projectRejectProjectInviteProjectIDFlag = projectRejectProjectInviteFlags.String("project-id", "REQUIRED", "")
		projectRejectProjectInviteAuthFlag      = projectRejectProjectInviteFlags.String("auth", "REQUIRED", "")

		projectAcceptInviteFlags     = flag.NewFlagSet("accept- invite", flag.ExitOnError)
		projectAcceptInviteIDFlag    = projectAcceptInviteFlags.String("id", "REQUIRED", "")
		projectAcceptInviteTokenFlag = projectAcceptInviteFlags.String("token", "", "")
		projectAcceptInviteAuthFlag  = projectAcceptInviteFlags.String("auth", "REQUIRED", "")

		projectRejectInviteFlags     = flag.NewFlagSet("reject- invite", flag.ExitOnError)
		projectRejectInviteIDFlag    = projectRejectInviteFlags.String("id", "REQUIRED", "")
		projectRejectInviteTokenFlag = projectRejectInviteFlags.String("token", "", "")
		projectRejectInviteAuthFlag  = projectRejectInviteFlags.String("auth", "REQUIRED", "")

		projectAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		projectAddBodyFlag = projectAddFlags.String("body", "REQUIRED", "")
		projectAddAuthFlag = projectAddFlags.String("auth", "REQUIRED", "")

		projectUpdateFlags         = flag.NewFlagSet("update", flag.ExitOnError)
		projectUpdateBodyFlag      = projectUpdateFlags.String("body", "REQUIRED", "")
		projectUpdateProjectIDFlag = projectUpdateFlags.String("project-id", "REQUIRED", "")
		projectUpdateAuthFlag      = projectUpdateFlags.String("auth", "REQUIRED", "")

		projectGetFlags         = flag.NewFlagSet("get", flag.ExitOnError)
		projectGetProjectIDFlag = projectGetFlags.String("project-id", "REQUIRED", "")
		projectGetAuthFlag      = projectGetFlags.String("auth", "", "")

		projectListCommunityFlags    = flag.NewFlagSet("list- community", flag.ExitOnError)
		projectListCommunityAuthFlag = projectListCommunityFlags.String("auth", "", "")

		projectListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		projectListMineAuthFlag = projectListMineFlags.String("auth", "REQUIRED", "")

		projectInviteFlags         = flag.NewFlagSet("invite", flag.ExitOnError)
		projectInviteBodyFlag      = projectInviteFlags.String("body", "REQUIRED", "")
		projectInviteProjectIDFlag = projectInviteFlags.String("project-id", "REQUIRED", "")
		projectInviteAuthFlag      = projectInviteFlags.String("auth", "REQUIRED", "")

		projectEditUserFlags         = flag.NewFlagSet("edit- user", flag.ExitOnError)
		projectEditUserBodyFlag      = projectEditUserFlags.String("body", "REQUIRED", "")
		projectEditUserProjectIDFlag = projectEditUserFlags.String("project-id", "REQUIRED", "")
		projectEditUserAuthFlag      = projectEditUserFlags.String("auth", "REQUIRED", "")

		projectRemoveUserFlags         = flag.NewFlagSet("remove- user", flag.ExitOnError)
		projectRemoveUserBodyFlag      = projectRemoveUserFlags.String("body", "REQUIRED", "")
		projectRemoveUserProjectIDFlag = projectRemoveUserFlags.String("project-id", "REQUIRED", "")
		projectRemoveUserAuthFlag      = projectRemoveUserFlags.String("auth", "REQUIRED", "")

		projectAddStationFlags         = flag.NewFlagSet("add- station", flag.ExitOnError)
		projectAddStationProjectIDFlag = projectAddStationFlags.String("project-id", "REQUIRED", "")
		projectAddStationStationIDFlag = projectAddStationFlags.String("station-id", "REQUIRED", "")
		projectAddStationAuthFlag      = projectAddStationFlags.String("auth", "REQUIRED", "")

		projectRemoveStationFlags         = flag.NewFlagSet("remove- station", flag.ExitOnError)
		projectRemoveStationProjectIDFlag = projectRemoveStationFlags.String("project-id", "REQUIRED", "")
		projectRemoveStationStationIDFlag = projectRemoveStationFlags.String("station-id", "REQUIRED", "")
		projectRemoveStationAuthFlag      = projectRemoveStationFlags.String("auth", "REQUIRED", "")

		projectDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		projectDeleteProjectIDFlag = projectDeleteFlags.String("project-id", "REQUIRED", "")
		projectDeleteAuthFlag      = projectDeleteFlags.String("auth", "REQUIRED", "")

		projectUploadPhotoFlags             = flag.NewFlagSet("upload- photo", flag.ExitOnError)
		projectUploadPhotoProjectIDFlag     = projectUploadPhotoFlags.String("project-id", "REQUIRED", "")
		projectUploadPhotoContentTypeFlag   = projectUploadPhotoFlags.String("content-type", "REQUIRED", "")
		projectUploadPhotoContentLengthFlag = projectUploadPhotoFlags.String("content-length", "REQUIRED", "")
		projectUploadPhotoAuthFlag          = projectUploadPhotoFlags.String("auth", "REQUIRED", "")
		projectUploadPhotoStreamFlag        = projectUploadPhotoFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		projectDownloadPhotoFlags           = flag.NewFlagSet("download- photo", flag.ExitOnError)
		projectDownloadPhotoProjectIDFlag   = projectDownloadPhotoFlags.String("project-id", "REQUIRED", "")
		projectDownloadPhotoSizeFlag        = projectDownloadPhotoFlags.String("size", "", "")
		projectDownloadPhotoIfNoneMatchFlag = projectDownloadPhotoFlags.String("if-none-match", "", "")
		projectDownloadPhotoAuthFlag        = projectDownloadPhotoFlags.String("auth", "", "")

		projectGetProjectsForStationFlags     = flag.NewFlagSet("get- projects- for- station", flag.ExitOnError)
		projectGetProjectsForStationIDFlag    = projectGetProjectsForStationFlags.String("id", "REQUIRED", "")
		projectGetProjectsForStationTokenFlag = projectGetProjectsForStationFlags.String("token", "", "")
		projectGetProjectsForStationAuthFlag  = projectGetProjectsForStationFlags.String("auth", "REQUIRED", "")

		recordsFlags = flag.NewFlagSet("records", flag.ContinueOnError)

		recordsDataFlags        = flag.NewFlagSet("data", flag.ExitOnError)
		recordsDataRecordIDFlag = recordsDataFlags.String("record-id", "REQUIRED", "")
		recordsDataAuthFlag     = recordsDataFlags.String("auth", "", "")

		recordsMetaFlags        = flag.NewFlagSet("meta", flag.ExitOnError)
		recordsMetaRecordIDFlag = recordsMetaFlags.String("record-id", "REQUIRED", "")
		recordsMetaAuthFlag     = recordsMetaFlags.String("auth", "", "")

		recordsResolvedFlags        = flag.NewFlagSet("resolved", flag.ExitOnError)
		recordsResolvedRecordIDFlag = recordsResolvedFlags.String("record-id", "REQUIRED", "")
		recordsResolvedAuthFlag     = recordsResolvedFlags.String("auth", "", "")

		sensorFlags = flag.NewFlagSet("sensor", flag.ContinueOnError)

		sensorMetaFlags = flag.NewFlagSet("meta", flag.ExitOnError)

		sensorStationMetaFlags        = flag.NewFlagSet("station- meta", flag.ExitOnError)
		sensorStationMetaStationsFlag = sensorStationMetaFlags.String("stations", "", "")

		sensorSensorMetaFlags = flag.NewFlagSet("sensor- meta", flag.ExitOnError)

		sensorDataFlags          = flag.NewFlagSet("data", flag.ExitOnError)
		sensorDataStartFlag      = sensorDataFlags.String("start", "", "")
		sensorDataEndFlag        = sensorDataFlags.String("end", "", "")
		sensorDataStationsFlag   = sensorDataFlags.String("stations", "", "")
		sensorDataSensorsFlag    = sensorDataFlags.String("sensors", "", "")
		sensorDataResolutionFlag = sensorDataFlags.String("resolution", "", "")
		sensorDataAggregateFlag  = sensorDataFlags.String("aggregate", "", "")
		sensorDataCompleteFlag   = sensorDataFlags.String("complete", "", "")
		sensorDataTailFlag       = sensorDataFlags.String("tail", "", "")
		sensorDataBackendFlag    = sensorDataFlags.String("backend", "", "")
		sensorDataAuthFlag       = sensorDataFlags.String("auth", "", "")

		sensorTailFlags        = flag.NewFlagSet("tail", flag.ExitOnError)
		sensorTailStationsFlag = sensorTailFlags.String("stations", "", "")
		sensorTailBackendFlag  = sensorTailFlags.String("backend", "", "")
		sensorTailAuthFlag     = sensorTailFlags.String("auth", "", "")

		sensorRecentlyFlags        = flag.NewFlagSet("recently", flag.ExitOnError)
		sensorRecentlyStationsFlag = sensorRecentlyFlags.String("stations", "", "")
		sensorRecentlyAuthFlag     = sensorRecentlyFlags.String("auth", "", "")

		sensorBookmarkFlags        = flag.NewFlagSet("bookmark", flag.ExitOnError)
		sensorBookmarkBookmarkFlag = sensorBookmarkFlags.String("bookmark", "REQUIRED", "")
		sensorBookmarkAuthFlag     = sensorBookmarkFlags.String("auth", "", "")

		sensorResolveFlags    = flag.NewFlagSet("resolve", flag.ExitOnError)
		sensorResolveV2Flag   = sensorResolveFlags.String("v2", "REQUIRED", "")
		sensorResolveAuthFlag = sensorResolveFlags.String("auth", "", "")

		informationFlags = flag.NewFlagSet("information", flag.ContinueOnError)

		informationDeviceLayoutFlags        = flag.NewFlagSet("device- layout", flag.ExitOnError)
		informationDeviceLayoutDeviceIDFlag = informationDeviceLayoutFlags.String("device-id", "REQUIRED", "")
		informationDeviceLayoutAuthFlag     = informationDeviceLayoutFlags.String("auth", "REQUIRED", "")

		informationFirmwareStatisticsFlags    = flag.NewFlagSet("firmware- statistics", flag.ExitOnError)
		informationFirmwareStatisticsAuthFlag = informationFirmwareStatisticsFlags.String("auth", "REQUIRED", "")

		stationFlags = flag.NewFlagSet("station", flag.ContinueOnError)

		stationAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		stationAddBodyFlag = stationAddFlags.String("body", "REQUIRED", "")
		stationAddAuthFlag = stationAddFlags.String("auth", "REQUIRED", "")

		stationGetFlags    = flag.NewFlagSet("get", flag.ExitOnError)
		stationGetIDFlag   = stationGetFlags.String("id", "REQUIRED", "")
		stationGetAuthFlag = stationGetFlags.String("auth", "", "")

		stationTransferFlags       = flag.NewFlagSet("transfer", flag.ExitOnError)
		stationTransferIDFlag      = stationTransferFlags.String("id", "REQUIRED", "")
		stationTransferOwnerIDFlag = stationTransferFlags.String("owner-id", "REQUIRED", "")
		stationTransferAuthFlag    = stationTransferFlags.String("auth", "REQUIRED", "")

		stationDefaultPhotoFlags       = flag.NewFlagSet("default- photo", flag.ExitOnError)
		stationDefaultPhotoIDFlag      = stationDefaultPhotoFlags.String("id", "REQUIRED", "")
		stationDefaultPhotoPhotoIDFlag = stationDefaultPhotoFlags.String("photo-id", "REQUIRED", "")
		stationDefaultPhotoAuthFlag    = stationDefaultPhotoFlags.String("auth", "", "")

		stationUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		stationUpdateBodyFlag = stationUpdateFlags.String("body", "REQUIRED", "")
		stationUpdateIDFlag   = stationUpdateFlags.String("id", "REQUIRED", "")
		stationUpdateAuthFlag = stationUpdateFlags.String("auth", "REQUIRED", "")

		stationListMineFlags    = flag.NewFlagSet("list- mine", flag.ExitOnError)
		stationListMineAuthFlag = stationListMineFlags.String("auth", "REQUIRED", "")

		stationListProjectFlags                = flag.NewFlagSet("list- project", flag.ExitOnError)
		stationListProjectIDFlag               = stationListProjectFlags.String("id", "REQUIRED", "")
		stationListProjectDisableFilteringFlag = stationListProjectFlags.String("disable-filtering", "", "")
		stationListProjectAuthFlag             = stationListProjectFlags.String("auth", "", "")

		stationListAssociatedFlags    = flag.NewFlagSet("list- associated", flag.ExitOnError)
		stationListAssociatedIDFlag   = stationListAssociatedFlags.String("id", "REQUIRED", "")
		stationListAssociatedAuthFlag = stationListAssociatedFlags.String("auth", "", "")

		stationListProjectAssociatedFlags         = flag.NewFlagSet("list- project- associated", flag.ExitOnError)
		stationListProjectAssociatedProjectIDFlag = stationListProjectAssociatedFlags.String("project-id", "REQUIRED", "")
		stationListProjectAssociatedAuthFlag      = stationListProjectAssociatedFlags.String("auth", "", "")

		stationDownloadPhotoFlags           = flag.NewFlagSet("download- photo", flag.ExitOnError)
		stationDownloadPhotoStationIDFlag   = stationDownloadPhotoFlags.String("station-id", "REQUIRED", "")
		stationDownloadPhotoSizeFlag        = stationDownloadPhotoFlags.String("size", "", "")
		stationDownloadPhotoIfNoneMatchFlag = stationDownloadPhotoFlags.String("if-none-match", "", "")
		stationDownloadPhotoAuthFlag        = stationDownloadPhotoFlags.String("auth", "", "")

		stationListAllFlags        = flag.NewFlagSet("list- all", flag.ExitOnError)
		stationListAllPageFlag     = stationListAllFlags.String("page", "", "")
		stationListAllPageSizeFlag = stationListAllFlags.String("page-size", "", "")
		stationListAllOwnerIDFlag  = stationListAllFlags.String("owner-id", "", "")
		stationListAllQueryFlag    = stationListAllFlags.String("query", "", "")
		stationListAllSortByFlag   = stationListAllFlags.String("sort-by", "", "")
		stationListAllAuthFlag     = stationListAllFlags.String("auth", "REQUIRED", "")

		stationDeleteFlags         = flag.NewFlagSet("delete", flag.ExitOnError)
		stationDeleteStationIDFlag = stationDeleteFlags.String("station-id", "REQUIRED", "")
		stationDeleteAuthFlag      = stationDeleteFlags.String("auth", "REQUIRED", "")

		stationAdminSearchFlags     = flag.NewFlagSet("admin- search", flag.ExitOnError)
		stationAdminSearchQueryFlag = stationAdminSearchFlags.String("query", "REQUIRED", "")
		stationAdminSearchAuthFlag  = stationAdminSearchFlags.String("auth", "REQUIRED", "")

		stationProgressFlags         = flag.NewFlagSet("progress", flag.ExitOnError)
		stationProgressStationIDFlag = stationProgressFlags.String("station-id", "REQUIRED", "")
		stationProgressAuthFlag      = stationProgressFlags.String("auth", "REQUIRED", "")

		tasksFlags = flag.NewFlagSet("tasks", flag.ContinueOnError)

		tasksFiveFlags = flag.NewFlagSet("five", flag.ExitOnError)

		testFlags = flag.NewFlagSet("test", flag.ContinueOnError)

		testGetFlags  = flag.NewFlagSet("get", flag.ExitOnError)
		testGetIDFlag = testGetFlags.String("id", "REQUIRED", "")

		testErrorFlags = flag.NewFlagSet("error", flag.ExitOnError)

		testEmailFlags       = flag.NewFlagSet("email", flag.ExitOnError)
		testEmailAddressFlag = testEmailFlags.String("address", "REQUIRED", "")
		testEmailAuthFlag    = testEmailFlags.String("auth", "REQUIRED", "")

		ttnFlags = flag.NewFlagSet("ttn", flag.ContinueOnError)

		ttnWebhookFlags             = flag.NewFlagSet("webhook", flag.ExitOnError)
		ttnWebhookTokenFlag         = ttnWebhookFlags.String("token", "", "")
		ttnWebhookContentTypeFlag   = ttnWebhookFlags.String("content-type", "REQUIRED", "")
		ttnWebhookContentLengthFlag = ttnWebhookFlags.String("content-length", "REQUIRED", "")
		ttnWebhookAuthFlag          = ttnWebhookFlags.String("auth", "", "")
		ttnWebhookStreamFlag        = ttnWebhookFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userRolesFlags    = flag.NewFlagSet("roles", flag.ExitOnError)
		userRolesAuthFlag = userRolesFlags.String("auth", "REQUIRED", "")

		userUploadPhotoFlags             = flag.NewFlagSet("upload- photo", flag.ExitOnError)
		userUploadPhotoContentTypeFlag   = userUploadPhotoFlags.String("content-type", "REQUIRED", "")
		userUploadPhotoContentLengthFlag = userUploadPhotoFlags.String("content-length", "REQUIRED", "")
		userUploadPhotoAuthFlag          = userUploadPhotoFlags.String("auth", "REQUIRED", "")
		userUploadPhotoStreamFlag        = userUploadPhotoFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		userDownloadPhotoFlags           = flag.NewFlagSet("download- photo", flag.ExitOnError)
		userDownloadPhotoUserIDFlag      = userDownloadPhotoFlags.String("user-id", "REQUIRED", "")
		userDownloadPhotoSizeFlag        = userDownloadPhotoFlags.String("size", "", "")
		userDownloadPhotoIfNoneMatchFlag = userDownloadPhotoFlags.String("if-none-match", "", "")

		userLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		userLoginBodyFlag = userLoginFlags.String("body", "REQUIRED", "")

		userRecoveryLookupFlags    = flag.NewFlagSet("recovery- lookup", flag.ExitOnError)
		userRecoveryLookupBodyFlag = userRecoveryLookupFlags.String("body", "REQUIRED", "")

		userRecoveryFlags    = flag.NewFlagSet("recovery", flag.ExitOnError)
		userRecoveryBodyFlag = userRecoveryFlags.String("body", "REQUIRED", "")

		userResumeFlags    = flag.NewFlagSet("resume", flag.ExitOnError)
		userResumeBodyFlag = userResumeFlags.String("body", "REQUIRED", "")

		userLogoutFlags    = flag.NewFlagSet("logout", flag.ExitOnError)
		userLogoutAuthFlag = userLogoutFlags.String("auth", "REQUIRED", "")

		userRefreshFlags    = flag.NewFlagSet("refresh", flag.ExitOnError)
		userRefreshBodyFlag = userRefreshFlags.String("body", "REQUIRED", "")

		userSendValidationFlags      = flag.NewFlagSet("send- validation", flag.ExitOnError)
		userSendValidationUserIDFlag = userSendValidationFlags.String("user-id", "REQUIRED", "")

		userValidateFlags     = flag.NewFlagSet("validate", flag.ExitOnError)
		userValidateTokenFlag = userValidateFlags.String("token", "REQUIRED", "")

		userAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		userAddBodyFlag = userAddFlags.String("body", "REQUIRED", "")

		userUpdateFlags      = flag.NewFlagSet("update", flag.ExitOnError)
		userUpdateBodyFlag   = userUpdateFlags.String("body", "REQUIRED", "")
		userUpdateUserIDFlag = userUpdateFlags.String("user-id", "REQUIRED", "")
		userUpdateAuthFlag   = userUpdateFlags.String("auth", "REQUIRED", "")

		userChangePasswordFlags      = flag.NewFlagSet("change- password", flag.ExitOnError)
		userChangePasswordBodyFlag   = userChangePasswordFlags.String("body", "REQUIRED", "")
		userChangePasswordUserIDFlag = userChangePasswordFlags.String("user-id", "REQUIRED", "")
		userChangePasswordAuthFlag   = userChangePasswordFlags.String("auth", "REQUIRED", "")

		userAcceptTncFlags      = flag.NewFlagSet("accept- tnc", flag.ExitOnError)
		userAcceptTncBodyFlag   = userAcceptTncFlags.String("body", "REQUIRED", "")
		userAcceptTncUserIDFlag = userAcceptTncFlags.String("user-id", "REQUIRED", "")
		userAcceptTncAuthFlag   = userAcceptTncFlags.String("auth", "REQUIRED", "")

		userGetCurrentFlags    = flag.NewFlagSet("get- current", flag.ExitOnError)
		userGetCurrentAuthFlag = userGetCurrentFlags.String("auth", "REQUIRED", "")

		userListByProjectFlags         = flag.NewFlagSet("list- by- project", flag.ExitOnError)
		userListByProjectProjectIDFlag = userListByProjectFlags.String("project-id", "REQUIRED", "")
		userListByProjectAuthFlag      = userListByProjectFlags.String("auth", "", "")

		userIssueTransmissionTokenFlags    = flag.NewFlagSet("issue- transmission- token", flag.ExitOnError)
		userIssueTransmissionTokenAuthFlag = userIssueTransmissionTokenFlags.String("auth", "REQUIRED", "")

		userProjectRolesFlags = flag.NewFlagSet("project- roles", flag.ExitOnError)

		userAdminTermsAndConditionsFlags    = flag.NewFlagSet("admin- terms- and- conditions", flag.ExitOnError)
		userAdminTermsAndConditionsBodyFlag = userAdminTermsAndConditionsFlags.String("body", "REQUIRED", "")
		userAdminTermsAndConditionsAuthFlag = userAdminTermsAndConditionsFlags.String("auth", "REQUIRED", "")

		userAdminDeleteFlags    = flag.NewFlagSet("admin- delete", flag.ExitOnError)
		userAdminDeleteBodyFlag = userAdminDeleteFlags.String("body", "REQUIRED", "")
		userAdminDeleteAuthFlag = userAdminDeleteFlags.String("auth", "REQUIRED", "")

		userAdminSearchFlags     = flag.NewFlagSet("admin- search", flag.ExitOnError)
		userAdminSearchQueryFlag = userAdminSearchFlags.String("query", "REQUIRED", "")
		userAdminSearchAuthFlag  = userAdminSearchFlags.String("auth", "REQUIRED", "")

		userMentionablesFlags         = flag.NewFlagSet("mentionables", flag.ExitOnError)
		userMentionablesProjectIDFlag = userMentionablesFlags.String("project-id", "", "")
		userMentionablesBookmarkFlag  = userMentionablesFlags.String("bookmark", "", "")
		userMentionablesQueryFlag     = userMentionablesFlags.String("query", "REQUIRED", "")
		userMentionablesAuthFlag      = userMentionablesFlags.String("auth", "REQUIRED", "")
	)
	activityFlags.Usage = activityUsage
	activityStationFlags.Usage = activityStationUsage
	activityProjectFlags.Usage = activityProjectUsage

	csvFlags.Usage = csvUsage
	csvNoopFlags.Usage = csvNoopUsage

	dataFlags.Usage = dataUsage
	dataDeviceSummaryFlags.Usage = dataDeviceSummaryUsage

	discourseFlags.Usage = discourseUsage
	discourseAuthenticateFlags.Usage = discourseAuthenticateUsage

	discussionFlags.Usage = discussionUsage
	discussionProjectFlags.Usage = discussionProjectUsage
	discussionDataFlags.Usage = discussionDataUsage
	discussionPostMessageFlags.Usage = discussionPostMessageUsage
	discussionUpdateMessageFlags.Usage = discussionUpdateMessageUsage
	discussionDeleteMessageFlags.Usage = discussionDeleteMessageUsage

	exportFlags.Usage = exportUsage
	exportListMineFlags.Usage = exportListMineUsage
	exportStatusFlags.Usage = exportStatusUsage
	exportDownloadFlags.Usage = exportDownloadUsage
	exportCsvFlags.Usage = exportCsvUsage
	exportJSONLinesFlags.Usage = exportJSONLinesUsage

	firmwareFlags.Usage = firmwareUsage
	firmwareDownloadFlags.Usage = firmwareDownloadUsage
	firmwareAddFlags.Usage = firmwareAddUsage
	firmwareListFlags.Usage = firmwareListUsage
	firmwareDeleteFlags.Usage = firmwareDeleteUsage

	followingFlags.Usage = followingUsage
	followingFollowFlags.Usage = followingFollowUsage
	followingUnfollowFlags.Usage = followingUnfollowUsage
	followingFollowersFlags.Usage = followingFollowersUsage

	ingestionFlags.Usage = ingestionUsage
	ingestionProcessPendingFlags.Usage = ingestionProcessPendingUsage
	ingestionWalkEverythingFlags.Usage = ingestionWalkEverythingUsage
	ingestionProcessStationFlags.Usage = ingestionProcessStationUsage
	ingestionProcessStationIngestionsFlags.Usage = ingestionProcessStationIngestionsUsage
	ingestionProcessIngestionFlags.Usage = ingestionProcessIngestionUsage
	ingestionRefreshViewsFlags.Usage = ingestionRefreshViewsUsage
	ingestionDeleteFlags.Usage = ingestionDeleteUsage

	modulesFlags.Usage = modulesUsage
	modulesMetaFlags.Usage = modulesMetaUsage

	notesFlags.Usage = notesUsage
	notesUpdateFlags.Usage = notesUpdateUsage
	notesGetFlags.Usage = notesGetUsage
	notesDownloadMediaFlags.Usage = notesDownloadMediaUsage
	notesUploadMediaFlags.Usage = notesUploadMediaUsage
	notesDeleteMediaFlags.Usage = notesDeleteMediaUsage

	notificationsFlags.Usage = notificationsUsage
	notificationsListenFlags.Usage = notificationsListenUsage
	notificationsSeenFlags.Usage = notificationsSeenUsage

	oidcFlags.Usage = oidcUsage
	oidcRequiredFlags.Usage = oidcRequiredUsage
	oidcURLFlags.Usage = oidcURLUsage
	oidcAuthenticateFlags.Usage = oidcAuthenticateUsage

	projectFlags.Usage = projectUsage
	projectAddUpdateFlags.Usage = projectAddUpdateUsage
	projectDeleteUpdateFlags.Usage = projectDeleteUpdateUsage
	projectModifyUpdateFlags.Usage = projectModifyUpdateUsage
	projectInvitesFlags.Usage = projectInvitesUsage
	projectLookupInviteFlags.Usage = projectLookupInviteUsage
	projectAcceptProjectInviteFlags.Usage = projectAcceptProjectInviteUsage
	projectRejectProjectInviteFlags.Usage = projectRejectProjectInviteUsage
	projectAcceptInviteFlags.Usage = projectAcceptInviteUsage
	projectRejectInviteFlags.Usage = projectRejectInviteUsage
	projectAddFlags.Usage = projectAddUsage
	projectUpdateFlags.Usage = projectUpdateUsage
	projectGetFlags.Usage = projectGetUsage
	projectListCommunityFlags.Usage = projectListCommunityUsage
	projectListMineFlags.Usage = projectListMineUsage
	projectInviteFlags.Usage = projectInviteUsage
	projectEditUserFlags.Usage = projectEditUserUsage
	projectRemoveUserFlags.Usage = projectRemoveUserUsage
	projectAddStationFlags.Usage = projectAddStationUsage
	projectRemoveStationFlags.Usage = projectRemoveStationUsage
	projectDeleteFlags.Usage = projectDeleteUsage
	projectUploadPhotoFlags.Usage = projectUploadPhotoUsage
	projectDownloadPhotoFlags.Usage = projectDownloadPhotoUsage
	projectGetProjectsForStationFlags.Usage = projectGetProjectsForStationUsage

	recordsFlags.Usage = recordsUsage
	recordsDataFlags.Usage = recordsDataUsage
	recordsMetaFlags.Usage = recordsMetaUsage
	recordsResolvedFlags.Usage = recordsResolvedUsage

	sensorFlags.Usage = sensorUsage
	sensorMetaFlags.Usage = sensorMetaUsage
	sensorStationMetaFlags.Usage = sensorStationMetaUsage
	sensorSensorMetaFlags.Usage = sensorSensorMetaUsage
	sensorDataFlags.Usage = sensorDataUsage
	sensorTailFlags.Usage = sensorTailUsage
	sensorRecentlyFlags.Usage = sensorRecentlyUsage
	sensorBookmarkFlags.Usage = sensorBookmarkUsage
	sensorResolveFlags.Usage = sensorResolveUsage

	informationFlags.Usage = informationUsage
	informationDeviceLayoutFlags.Usage = informationDeviceLayoutUsage
	informationFirmwareStatisticsFlags.Usage = informationFirmwareStatisticsUsage

	stationFlags.Usage = stationUsage
	stationAddFlags.Usage = stationAddUsage
	stationGetFlags.Usage = stationGetUsage
	stationTransferFlags.Usage = stationTransferUsage
	stationDefaultPhotoFlags.Usage = stationDefaultPhotoUsage
	stationUpdateFlags.Usage = stationUpdateUsage
	stationListMineFlags.Usage = stationListMineUsage
	stationListProjectFlags.Usage = stationListProjectUsage
	stationListAssociatedFlags.Usage = stationListAssociatedUsage
	stationListProjectAssociatedFlags.Usage = stationListProjectAssociatedUsage
	stationDownloadPhotoFlags.Usage = stationDownloadPhotoUsage
	stationListAllFlags.Usage = stationListAllUsage
	stationDeleteFlags.Usage = stationDeleteUsage
	stationAdminSearchFlags.Usage = stationAdminSearchUsage
	stationProgressFlags.Usage = stationProgressUsage

	tasksFlags.Usage = tasksUsage
	tasksFiveFlags.Usage = tasksFiveUsage

	testFlags.Usage = testUsage
	testGetFlags.Usage = testGetUsage
	testErrorFlags.Usage = testErrorUsage
	testEmailFlags.Usage = testEmailUsage

	ttnFlags.Usage = ttnUsage
	ttnWebhookFlags.Usage = ttnWebhookUsage

	userFlags.Usage = userUsage
	userRolesFlags.Usage = userRolesUsage
	userUploadPhotoFlags.Usage = userUploadPhotoUsage
	userDownloadPhotoFlags.Usage = userDownloadPhotoUsage
	userLoginFlags.Usage = userLoginUsage
	userRecoveryLookupFlags.Usage = userRecoveryLookupUsage
	userRecoveryFlags.Usage = userRecoveryUsage
	userResumeFlags.Usage = userResumeUsage
	userLogoutFlags.Usage = userLogoutUsage
	userRefreshFlags.Usage = userRefreshUsage
	userSendValidationFlags.Usage = userSendValidationUsage
	userValidateFlags.Usage = userValidateUsage
	userAddFlags.Usage = userAddUsage
	userUpdateFlags.Usage = userUpdateUsage
	userChangePasswordFlags.Usage = userChangePasswordUsage
	userAcceptTncFlags.Usage = userAcceptTncUsage
	userGetCurrentFlags.Usage = userGetCurrentUsage
	userListByProjectFlags.Usage = userListByProjectUsage
	userIssueTransmissionTokenFlags.Usage = userIssueTransmissionTokenUsage
	userProjectRolesFlags.Usage = userProjectRolesUsage
	userAdminTermsAndConditionsFlags.Usage = userAdminTermsAndConditionsUsage
	userAdminDeleteFlags.Usage = userAdminDeleteUsage
	userAdminSearchFlags.Usage = userAdminSearchUsage
	userMentionablesFlags.Usage = userMentionablesUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "activity":
			svcf = activityFlags
		case "csv":
			svcf = csvFlags
		case "data":
			svcf = dataFlags
		case "discourse":
			svcf = discourseFlags
		case "discussion":
			svcf = discussionFlags
		case "export":
			svcf = exportFlags
		case "firmware":
			svcf = firmwareFlags
		case "following":
			svcf = followingFlags
		case "ingestion":
			svcf = ingestionFlags
		case "modules":
			svcf = modulesFlags
		case "notes":
			svcf = notesFlags
		case "notifications":
			svcf = notificationsFlags
		case "oidc":
			svcf = oidcFlags
		case "project":
			svcf = projectFlags
		case "records":
			svcf = recordsFlags
		case "sensor":
			svcf = sensorFlags
		case "information":
			svcf = informationFlags
		case "station":
			svcf = stationFlags
		case "tasks":
			svcf = tasksFlags
		case "test":
			svcf = testFlags
		case "ttn":
			svcf = ttnFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "activity":
			switch epn {
			case "station":
				epf = activityStationFlags

			case "project":
				epf = activityProjectFlags

			}

		case "csv":
			switch epn {
			case "noop":
				epf = csvNoopFlags

			}

		case "data":
			switch epn {
			case "device- summary":
				epf = dataDeviceSummaryFlags

			}

		case "discourse":
			switch epn {
			case "authenticate":
				epf = discourseAuthenticateFlags

			}

		case "discussion":
			switch epn {
			case "project":
				epf = discussionProjectFlags

			case "data":
				epf = discussionDataFlags

			case "post- message":
				epf = discussionPostMessageFlags

			case "update- message":
				epf = discussionUpdateMessageFlags

			case "delete- message":
				epf = discussionDeleteMessageFlags

			}

		case "export":
			switch epn {
			case "list- mine":
				epf = exportListMineFlags

			case "status":
				epf = exportStatusFlags

			case "download":
				epf = exportDownloadFlags

			case "csv":
				epf = exportCsvFlags

			case "json- lines":
				epf = exportJSONLinesFlags

			}

		case "firmware":
			switch epn {
			case "download":
				epf = firmwareDownloadFlags

			case "add":
				epf = firmwareAddFlags

			case "list":
				epf = firmwareListFlags

			case "delete":
				epf = firmwareDeleteFlags

			}

		case "following":
			switch epn {
			case "follow":
				epf = followingFollowFlags

			case "unfollow":
				epf = followingUnfollowFlags

			case "followers":
				epf = followingFollowersFlags

			}

		case "ingestion":
			switch epn {
			case "process- pending":
				epf = ingestionProcessPendingFlags

			case "walk- everything":
				epf = ingestionWalkEverythingFlags

			case "process- station":
				epf = ingestionProcessStationFlags

			case "process- station- ingestions":
				epf = ingestionProcessStationIngestionsFlags

			case "process- ingestion":
				epf = ingestionProcessIngestionFlags

			case "refresh- views":
				epf = ingestionRefreshViewsFlags

			case "delete":
				epf = ingestionDeleteFlags

			}

		case "modules":
			switch epn {
			case "meta":
				epf = modulesMetaFlags

			}

		case "notes":
			switch epn {
			case "update":
				epf = notesUpdateFlags

			case "get":
				epf = notesGetFlags

			case "download- media":
				epf = notesDownloadMediaFlags

			case "upload- media":
				epf = notesUploadMediaFlags

			case "delete- media":
				epf = notesDeleteMediaFlags

			}

		case "notifications":
			switch epn {
			case "listen":
				epf = notificationsListenFlags

			case "seen":
				epf = notificationsSeenFlags

			}

		case "oidc":
			switch epn {
			case "required":
				epf = oidcRequiredFlags

			case "url":
				epf = oidcURLFlags

			case "authenticate":
				epf = oidcAuthenticateFlags

			}

		case "project":
			switch epn {
			case "add- update":
				epf = projectAddUpdateFlags

			case "delete- update":
				epf = projectDeleteUpdateFlags

			case "modify- update":
				epf = projectModifyUpdateFlags

			case "invites":
				epf = projectInvitesFlags

			case "lookup- invite":
				epf = projectLookupInviteFlags

			case "accept- project- invite":
				epf = projectAcceptProjectInviteFlags

			case "reject- project- invite":
				epf = projectRejectProjectInviteFlags

			case "accept- invite":
				epf = projectAcceptInviteFlags

			case "reject- invite":
				epf = projectRejectInviteFlags

			case "add":
				epf = projectAddFlags

			case "update":
				epf = projectUpdateFlags

			case "get":
				epf = projectGetFlags

			case "list- community":
				epf = projectListCommunityFlags

			case "list- mine":
				epf = projectListMineFlags

			case "invite":
				epf = projectInviteFlags

			case "edit- user":
				epf = projectEditUserFlags

			case "remove- user":
				epf = projectRemoveUserFlags

			case "add- station":
				epf = projectAddStationFlags

			case "remove- station":
				epf = projectRemoveStationFlags

			case "delete":
				epf = projectDeleteFlags

			case "upload- photo":
				epf = projectUploadPhotoFlags

			case "download- photo":
				epf = projectDownloadPhotoFlags

			case "get- projects- for- station":
				epf = projectGetProjectsForStationFlags

			}

		case "records":
			switch epn {
			case "data":
				epf = recordsDataFlags

			case "meta":
				epf = recordsMetaFlags

			case "resolved":
				epf = recordsResolvedFlags

			}

		case "sensor":
			switch epn {
			case "meta":
				epf = sensorMetaFlags

			case "station- meta":
				epf = sensorStationMetaFlags

			case "sensor- meta":
				epf = sensorSensorMetaFlags

			case "data":
				epf = sensorDataFlags

			case "tail":
				epf = sensorTailFlags

			case "recently":
				epf = sensorRecentlyFlags

			case "bookmark":
				epf = sensorBookmarkFlags

			case "resolve":
				epf = sensorResolveFlags

			}

		case "information":
			switch epn {
			case "device- layout":
				epf = informationDeviceLayoutFlags

			case "firmware- statistics":
				epf = informationFirmwareStatisticsFlags

			}

		case "station":
			switch epn {
			case "add":
				epf = stationAddFlags

			case "get":
				epf = stationGetFlags

			case "transfer":
				epf = stationTransferFlags

			case "default- photo":
				epf = stationDefaultPhotoFlags

			case "update":
				epf = stationUpdateFlags

			case "list- mine":
				epf = stationListMineFlags

			case "list- project":
				epf = stationListProjectFlags

			case "list- associated":
				epf = stationListAssociatedFlags

			case "list- project- associated":
				epf = stationListProjectAssociatedFlags

			case "download- photo":
				epf = stationDownloadPhotoFlags

			case "list- all":
				epf = stationListAllFlags

			case "delete":
				epf = stationDeleteFlags

			case "admin- search":
				epf = stationAdminSearchFlags

			case "progress":
				epf = stationProgressFlags

			}

		case "tasks":
			switch epn {
			case "five":
				epf = tasksFiveFlags

			}

		case "test":
			switch epn {
			case "get":
				epf = testGetFlags

			case "error":
				epf = testErrorFlags

			case "email":
				epf = testEmailFlags

			}

		case "ttn":
			switch epn {
			case "webhook":
				epf = ttnWebhookFlags

			}

		case "user":
			switch epn {
			case "roles":
				epf = userRolesFlags

			case "upload- photo":
				epf = userUploadPhotoFlags

			case "download- photo":
				epf = userDownloadPhotoFlags

			case "login":
				epf = userLoginFlags

			case "recovery- lookup":
				epf = userRecoveryLookupFlags

			case "recovery":
				epf = userRecoveryFlags

			case "resume":
				epf = userResumeFlags

			case "logout":
				epf = userLogoutFlags

			case "refresh":
				epf = userRefreshFlags

			case "send- validation":
				epf = userSendValidationFlags

			case "validate":
				epf = userValidateFlags

			case "add":
				epf = userAddFlags

			case "update":
				epf = userUpdateFlags

			case "change- password":
				epf = userChangePasswordFlags

			case "accept- tnc":
				epf = userAcceptTncFlags

			case "get- current":
				epf = userGetCurrentFlags

			case "list- by- project":
				epf = userListByProjectFlags

			case "issue- transmission- token":
				epf = userIssueTransmissionTokenFlags

			case "project- roles":
				epf = userProjectRolesFlags

			case "admin- terms- and- conditions":
				epf = userAdminTermsAndConditionsFlags

			case "admin- delete":
				epf = userAdminDeleteFlags

			case "admin- search":
				epf = userAdminSearchFlags

			case "mentionables":
				epf = userMentionablesFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "activity":
			c := activityc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "station":
				endpoint = c.Station()
				data, err = activityc.BuildStationPayload(*activityStationIDFlag, *activityStationPageFlag, *activityStationAuthFlag)
			case "project":
				endpoint = c.Project()
				data, err = activityc.BuildProjectPayload(*activityProjectIDFlag, *activityProjectPageFlag, *activityProjectAuthFlag)
			}
		case "csv":
			c := csvc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "noop":
				endpoint = c.Noop()
				data = nil
			}
		case "data":
			c := datac.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "device- summary":
				endpoint = c.DeviceSummary()
				data, err = datac.BuildDeviceSummaryPayload(*dataDeviceSummaryDeviceIDFlag, *dataDeviceSummaryAuthFlag)
			}
		case "discourse":
			c := discoursec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "authenticate":
				endpoint = c.Authenticate()
				data, err = discoursec.BuildAuthenticatePayload(*discourseAuthenticateBodyFlag, *discourseAuthenticateTokenFlag)
			}
		case "discussion":
			c := discussionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "project":
				endpoint = c.Project()
				data, err = discussionc.BuildProjectPayload(*discussionProjectProjectIDFlag, *discussionProjectAuthFlag)
			case "data":
				endpoint = c.Data()
				data, err = discussionc.BuildDataPayload(*discussionDataBookmarkFlag, *discussionDataAuthFlag)
			case "post- message":
				endpoint = c.PostMessage()
				data, err = discussionc.BuildPostMessagePayload(*discussionPostMessageBodyFlag, *discussionPostMessageAuthFlag)
			case "update- message":
				endpoint = c.UpdateMessage()
				data, err = discussionc.BuildUpdateMessagePayload(*discussionUpdateMessageBodyFlag, *discussionUpdateMessagePostIDFlag, *discussionUpdateMessageAuthFlag)
			case "delete- message":
				endpoint = c.DeleteMessage()
				data, err = discussionc.BuildDeleteMessagePayload(*discussionDeleteMessagePostIDFlag, *discussionDeleteMessageAuthFlag)
			}
		case "export":
			c := exportc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- mine":
				endpoint = c.ListMine()
				data, err = exportc.BuildListMinePayload(*exportListMineAuthFlag)
			case "status":
				endpoint = c.Status()
				data, err = exportc.BuildStatusPayload(*exportStatusIDFlag, *exportStatusAuthFlag)
			case "download":
				endpoint = c.Download()
				data, err = exportc.BuildDownloadPayload(*exportDownloadIDFlag, *exportDownloadAuthFlag)
			case "csv":
				endpoint = c.Csv()
				data, err = exportc.BuildCsvPayload(*exportCsvStartFlag, *exportCsvEndFlag, *exportCsvStationsFlag, *exportCsvSensorsFlag, *exportCsvResolutionFlag, *exportCsvAggregateFlag, *exportCsvCompleteFlag, *exportCsvTailFlag, *exportCsvAuthFlag)
			case "json- lines":
				endpoint = c.JSONLines()
				data, err = exportc.BuildJSONLinesPayload(*exportJSONLinesStartFlag, *exportJSONLinesEndFlag, *exportJSONLinesStationsFlag, *exportJSONLinesSensorsFlag, *exportJSONLinesResolutionFlag, *exportJSONLinesAggregateFlag, *exportJSONLinesCompleteFlag, *exportJSONLinesTailFlag, *exportJSONLinesAuthFlag)
			}
		case "firmware":
			c := firmwarec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "download":
				endpoint = c.Download()
				data, err = firmwarec.BuildDownloadPayload(*firmwareDownloadFirmwareIDFlag)
			case "add":
				endpoint = c.Add()
				data, err = firmwarec.BuildAddPayload(*firmwareAddBodyFlag, *firmwareAddAuthFlag)
			case "list":
				endpoint = c.List()
				data, err = firmwarec.BuildListPayload(*firmwareListModuleFlag, *firmwareListProfileFlag, *firmwareListPageSizeFlag, *firmwareListPageFlag, *firmwareListAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = firmwarec.BuildDeletePayload(*firmwareDeleteFirmwareIDFlag, *firmwareDeleteAuthFlag)
			}
		case "following":
			c := followingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "follow":
				endpoint = c.Follow()
				data, err = followingc.BuildFollowPayload(*followingFollowIDFlag, *followingFollowAuthFlag)
			case "unfollow":
				endpoint = c.Unfollow()
				data, err = followingc.BuildUnfollowPayload(*followingUnfollowIDFlag, *followingUnfollowAuthFlag)
			case "followers":
				endpoint = c.Followers()
				data, err = followingc.BuildFollowersPayload(*followingFollowersIDFlag, *followingFollowersPageFlag)
			}
		case "ingestion":
			c := ingestionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "process- pending":
				endpoint = c.ProcessPending()
				data, err = ingestionc.BuildProcessPendingPayload(*ingestionProcessPendingAuthFlag)
			case "walk- everything":
				endpoint = c.WalkEverything()
				data, err = ingestionc.BuildWalkEverythingPayload(*ingestionWalkEverythingAuthFlag)
			case "process- station":
				endpoint = c.ProcessStation()
				data, err = ingestionc.BuildProcessStationPayload(*ingestionProcessStationStationIDFlag, *ingestionProcessStationCompletelyFlag, *ingestionProcessStationSkipManualFlag, *ingestionProcessStationAuthFlag)
			case "process- station- ingestions":
				endpoint = c.ProcessStationIngestions()
				data, err = ingestionc.BuildProcessStationIngestionsPayload(*ingestionProcessStationIngestionsStationIDFlag, *ingestionProcessStationIngestionsAuthFlag)
			case "process- ingestion":
				endpoint = c.ProcessIngestion()
				data, err = ingestionc.BuildProcessIngestionPayload(*ingestionProcessIngestionIngestionIDFlag, *ingestionProcessIngestionAuthFlag)
			case "refresh- views":
				endpoint = c.RefreshViews()
				data, err = ingestionc.BuildRefreshViewsPayload(*ingestionRefreshViewsAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = ingestionc.BuildDeletePayload(*ingestionDeleteIngestionIDFlag, *ingestionDeleteAuthFlag)
			}
		case "modules":
			c := modulesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			}
		case "notes":
			c := notesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update":
				endpoint = c.Update()
				data, err = notesc.BuildUpdatePayload(*notesUpdateBodyFlag, *notesUpdateStationIDFlag, *notesUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = notesc.BuildGetPayload(*notesGetStationIDFlag, *notesGetAuthFlag)
			case "download- media":
				endpoint = c.DownloadMedia()
				data, err = notesc.BuildDownloadMediaPayload(*notesDownloadMediaMediaIDFlag, *notesDownloadMediaAuthFlag)
			case "upload- media":
				endpoint = c.UploadMedia()
				data, err = notesc.BuildUploadMediaPayload(*notesUploadMediaStationIDFlag, *notesUploadMediaKeyFlag, *notesUploadMediaContentTypeFlag, *notesUploadMediaContentLengthFlag, *notesUploadMediaAuthFlag)
				if err == nil {
					data, err = notesc.BuildUploadMediaStreamPayload(data, *notesUploadMediaStreamFlag)
				}
			case "delete- media":
				endpoint = c.DeleteMedia()
				data, err = notesc.BuildDeleteMediaPayload(*notesDeleteMediaMediaIDFlag, *notesDeleteMediaAuthFlag)
			}
		case "notifications":
			c := notificationsc.NewClient(scheme, host, doer, enc, dec, restore, dialer, notificationsConfigurer)
			switch epn {
			case "listen":
				endpoint = c.Listen()
				data = nil
			case "seen":
				endpoint = c.Seen()
				data, err = notificationsc.BuildSeenPayload(*notificationsSeenBodyFlag, *notificationsSeenAuthFlag)
			}
		case "oidc":
			c := oidcc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "required":
				endpoint = c.Required()
				data, err = oidcc.BuildRequiredPayload(*oidcRequiredAfterFlag, *oidcRequiredFollowFlag, *oidcRequiredTokenFlag)
			case "url":
				endpoint = c.URL()
				data, err = oidcc.BuildURLPayload(*oidcURLAfterFlag, *oidcURLFollowFlag, *oidcURLTokenFlag)
			case "authenticate":
				endpoint = c.Authenticate()
				data, err = oidcc.BuildAuthenticatePayload(*oidcAuthenticateStateFlag, *oidcAuthenticateSessionStateFlag, *oidcAuthenticateCodeFlag)
			}
		case "project":
			c := projectc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add- update":
				endpoint = c.AddUpdate()
				data, err = projectc.BuildAddUpdatePayload(*projectAddUpdateBodyFlag, *projectAddUpdateProjectIDFlag, *projectAddUpdateAuthFlag)
			case "delete- update":
				endpoint = c.DeleteUpdate()
				data, err = projectc.BuildDeleteUpdatePayload(*projectDeleteUpdateProjectIDFlag, *projectDeleteUpdateUpdateIDFlag, *projectDeleteUpdateAuthFlag)
			case "modify- update":
				endpoint = c.ModifyUpdate()
				data, err = projectc.BuildModifyUpdatePayload(*projectModifyUpdateBodyFlag, *projectModifyUpdateProjectIDFlag, *projectModifyUpdateUpdateIDFlag, *projectModifyUpdateAuthFlag)
			case "invites":
				endpoint = c.Invites()
				data, err = projectc.BuildInvitesPayload(*projectInvitesAuthFlag)
			case "lookup- invite":
				endpoint = c.LookupInvite()
				data, err = projectc.BuildLookupInvitePayload(*projectLookupInviteTokenFlag, *projectLookupInviteAuthFlag)
			case "accept- project- invite":
				endpoint = c.AcceptProjectInvite()
				data, err = projectc.BuildAcceptProjectInvitePayload(*projectAcceptProjectInviteProjectIDFlag, *projectAcceptProjectInviteAuthFlag)
			case "reject- project- invite":
				endpoint = c.RejectProjectInvite()
				data, err = projectc.BuildRejectProjectInvitePayload(*projectRejectProjectInviteProjectIDFlag, *projectRejectProjectInviteAuthFlag)
			case "accept- invite":
				endpoint = c.AcceptInvite()
				data, err = projectc.BuildAcceptInvitePayload(*projectAcceptInviteIDFlag, *projectAcceptInviteTokenFlag, *projectAcceptInviteAuthFlag)
			case "reject- invite":
				endpoint = c.RejectInvite()
				data, err = projectc.BuildRejectInvitePayload(*projectRejectInviteIDFlag, *projectRejectInviteTokenFlag, *projectRejectInviteAuthFlag)
			case "add":
				endpoint = c.Add()
				data, err = projectc.BuildAddPayload(*projectAddBodyFlag, *projectAddAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = projectc.BuildUpdatePayload(*projectUpdateBodyFlag, *projectUpdateProjectIDFlag, *projectUpdateAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = projectc.BuildGetPayload(*projectGetProjectIDFlag, *projectGetAuthFlag)
			case "list- community":
				endpoint = c.ListCommunity()
				data, err = projectc.BuildListCommunityPayload(*projectListCommunityAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = projectc.BuildListMinePayload(*projectListMineAuthFlag)
			case "invite":
				endpoint = c.Invite()
				data, err = projectc.BuildInvitePayload(*projectInviteBodyFlag, *projectInviteProjectIDFlag, *projectInviteAuthFlag)
			case "edit- user":
				endpoint = c.EditUser()
				data, err = projectc.BuildEditUserPayload(*projectEditUserBodyFlag, *projectEditUserProjectIDFlag, *projectEditUserAuthFlag)
			case "remove- user":
				endpoint = c.RemoveUser()
				data, err = projectc.BuildRemoveUserPayload(*projectRemoveUserBodyFlag, *projectRemoveUserProjectIDFlag, *projectRemoveUserAuthFlag)
			case "add- station":
				endpoint = c.AddStation()
				data, err = projectc.BuildAddStationPayload(*projectAddStationProjectIDFlag, *projectAddStationStationIDFlag, *projectAddStationAuthFlag)
			case "remove- station":
				endpoint = c.RemoveStation()
				data, err = projectc.BuildRemoveStationPayload(*projectRemoveStationProjectIDFlag, *projectRemoveStationStationIDFlag, *projectRemoveStationAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = projectc.BuildDeletePayload(*projectDeleteProjectIDFlag, *projectDeleteAuthFlag)
			case "upload- photo":
				endpoint = c.UploadPhoto()
				data, err = projectc.BuildUploadPhotoPayload(*projectUploadPhotoProjectIDFlag, *projectUploadPhotoContentTypeFlag, *projectUploadPhotoContentLengthFlag, *projectUploadPhotoAuthFlag)
				if err == nil {
					data, err = projectc.BuildUploadPhotoStreamPayload(data, *projectUploadPhotoStreamFlag)
				}
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = projectc.BuildDownloadPhotoPayload(*projectDownloadPhotoProjectIDFlag, *projectDownloadPhotoSizeFlag, *projectDownloadPhotoIfNoneMatchFlag, *projectDownloadPhotoAuthFlag)
			case "get- projects- for- station":
				endpoint = c.GetProjectsForStation()
				data, err = projectc.BuildGetProjectsForStationPayload(*projectGetProjectsForStationIDFlag, *projectGetProjectsForStationTokenFlag, *projectGetProjectsForStationAuthFlag)
			}
		case "records":
			c := recordsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "data":
				endpoint = c.Data()
				data, err = recordsc.BuildDataPayload(*recordsDataRecordIDFlag, *recordsDataAuthFlag)
			case "meta":
				endpoint = c.Meta()
				data, err = recordsc.BuildMetaPayload(*recordsMetaRecordIDFlag, *recordsMetaAuthFlag)
			case "resolved":
				endpoint = c.Resolved()
				data, err = recordsc.BuildResolvedPayload(*recordsResolvedRecordIDFlag, *recordsResolvedAuthFlag)
			}
		case "sensor":
			c := sensorc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "meta":
				endpoint = c.Meta()
				data = nil
			case "station- meta":
				endpoint = c.StationMeta()
				data, err = sensorc.BuildStationMetaPayload(*sensorStationMetaStationsFlag)
			case "sensor- meta":
				endpoint = c.SensorMeta()
				data = nil
			case "data":
				endpoint = c.Data()
				data, err = sensorc.BuildDataPayload(*sensorDataStartFlag, *sensorDataEndFlag, *sensorDataStationsFlag, *sensorDataSensorsFlag, *sensorDataResolutionFlag, *sensorDataAggregateFlag, *sensorDataCompleteFlag, *sensorDataTailFlag, *sensorDataBackendFlag, *sensorDataAuthFlag)
			case "tail":
				endpoint = c.Tail()
				data, err = sensorc.BuildTailPayload(*sensorTailStationsFlag, *sensorTailBackendFlag, *sensorTailAuthFlag)
			case "recently":
				endpoint = c.Recently()
				data, err = sensorc.BuildRecentlyPayload(*sensorRecentlyStationsFlag, *sensorRecentlyAuthFlag)
			case "bookmark":
				endpoint = c.Bookmark()
				data, err = sensorc.BuildBookmarkPayload(*sensorBookmarkBookmarkFlag, *sensorBookmarkAuthFlag)
			case "resolve":
				endpoint = c.Resolve()
				data, err = sensorc.BuildResolvePayload(*sensorResolveV2Flag, *sensorResolveAuthFlag)
			}
		case "information":
			c := informationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "device- layout":
				endpoint = c.DeviceLayout()
				data, err = informationc.BuildDeviceLayoutPayload(*informationDeviceLayoutDeviceIDFlag, *informationDeviceLayoutAuthFlag)
			case "firmware- statistics":
				endpoint = c.FirmwareStatistics()
				data, err = informationc.BuildFirmwareStatisticsPayload(*informationFirmwareStatisticsAuthFlag)
			}
		case "station":
			c := stationc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = stationc.BuildAddPayload(*stationAddBodyFlag, *stationAddAuthFlag)
			case "get":
				endpoint = c.Get()
				data, err = stationc.BuildGetPayload(*stationGetIDFlag, *stationGetAuthFlag)
			case "transfer":
				endpoint = c.Transfer()
				data, err = stationc.BuildTransferPayload(*stationTransferIDFlag, *stationTransferOwnerIDFlag, *stationTransferAuthFlag)
			case "default- photo":
				endpoint = c.DefaultPhoto()
				data, err = stationc.BuildDefaultPhotoPayload(*stationDefaultPhotoIDFlag, *stationDefaultPhotoPhotoIDFlag, *stationDefaultPhotoAuthFlag)
			case "update":
				endpoint = c.Update()
				data, err = stationc.BuildUpdatePayload(*stationUpdateBodyFlag, *stationUpdateIDFlag, *stationUpdateAuthFlag)
			case "list- mine":
				endpoint = c.ListMine()
				data, err = stationc.BuildListMinePayload(*stationListMineAuthFlag)
			case "list- project":
				endpoint = c.ListProject()
				data, err = stationc.BuildListProjectPayload(*stationListProjectIDFlag, *stationListProjectDisableFilteringFlag, *stationListProjectAuthFlag)
			case "list- associated":
				endpoint = c.ListAssociated()
				data, err = stationc.BuildListAssociatedPayload(*stationListAssociatedIDFlag, *stationListAssociatedAuthFlag)
			case "list- project- associated":
				endpoint = c.ListProjectAssociated()
				data, err = stationc.BuildListProjectAssociatedPayload(*stationListProjectAssociatedProjectIDFlag, *stationListProjectAssociatedAuthFlag)
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = stationc.BuildDownloadPhotoPayload(*stationDownloadPhotoStationIDFlag, *stationDownloadPhotoSizeFlag, *stationDownloadPhotoIfNoneMatchFlag, *stationDownloadPhotoAuthFlag)
			case "list- all":
				endpoint = c.ListAll()
				data, err = stationc.BuildListAllPayload(*stationListAllPageFlag, *stationListAllPageSizeFlag, *stationListAllOwnerIDFlag, *stationListAllQueryFlag, *stationListAllSortByFlag, *stationListAllAuthFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = stationc.BuildDeletePayload(*stationDeleteStationIDFlag, *stationDeleteAuthFlag)
			case "admin- search":
				endpoint = c.AdminSearch()
				data, err = stationc.BuildAdminSearchPayload(*stationAdminSearchQueryFlag, *stationAdminSearchAuthFlag)
			case "progress":
				endpoint = c.Progress()
				data, err = stationc.BuildProgressPayload(*stationProgressStationIDFlag, *stationProgressAuthFlag)
			}
		case "tasks":
			c := tasksc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "five":
				endpoint = c.Five()
				data = nil
			}
		case "test":
			c := testc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = testc.BuildGetPayload(*testGetIDFlag)
			case "error":
				endpoint = c.Error()
				data = nil
			case "email":
				endpoint = c.Email()
				data, err = testc.BuildEmailPayload(*testEmailAddressFlag, *testEmailAuthFlag)
			}
		case "ttn":
			c := ttnc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "webhook":
				endpoint = c.Webhook()
				data, err = ttnc.BuildWebhookPayload(*ttnWebhookTokenFlag, *ttnWebhookContentTypeFlag, *ttnWebhookContentLengthFlag, *ttnWebhookAuthFlag)
				if err == nil {
					data, err = ttnc.BuildWebhookStreamPayload(data, *ttnWebhookStreamFlag)
				}
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "roles":
				endpoint = c.Roles()
				data, err = userc.BuildRolesPayload(*userRolesAuthFlag)
			case "upload- photo":
				endpoint = c.UploadPhoto()
				data, err = userc.BuildUploadPhotoPayload(*userUploadPhotoContentTypeFlag, *userUploadPhotoContentLengthFlag, *userUploadPhotoAuthFlag)
				if err == nil {
					data, err = userc.BuildUploadPhotoStreamPayload(data, *userUploadPhotoStreamFlag)
				}
			case "download- photo":
				endpoint = c.DownloadPhoto()
				data, err = userc.BuildDownloadPhotoPayload(*userDownloadPhotoUserIDFlag, *userDownloadPhotoSizeFlag, *userDownloadPhotoIfNoneMatchFlag)
			case "login":
				endpoint = c.Login()
				data, err = userc.BuildLoginPayload(*userLoginBodyFlag)
			case "recovery- lookup":
				endpoint = c.RecoveryLookup()
				data, err = userc.BuildRecoveryLookupPayload(*userRecoveryLookupBodyFlag)
			case "recovery":
				endpoint = c.Recovery()
				data, err = userc.BuildRecoveryPayload(*userRecoveryBodyFlag)
			case "resume":
				endpoint = c.Resume()
				data, err = userc.BuildResumePayload(*userResumeBodyFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = userc.BuildLogoutPayload(*userLogoutAuthFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = userc.BuildRefreshPayload(*userRefreshBodyFlag)
			case "send- validation":
				endpoint = c.SendValidation()
				data, err = userc.BuildSendValidationPayload(*userSendValidationUserIDFlag)
			case "validate":
				endpoint = c.Validate()
				data, err = userc.BuildValidatePayload(*userValidateTokenFlag)
			case "add":
				endpoint = c.Add()
				data, err = userc.BuildAddPayload(*userAddBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = userc.BuildUpdatePayload(*userUpdateBodyFlag, *userUpdateUserIDFlag, *userUpdateAuthFlag)
			case "change- password":
				endpoint = c.ChangePassword()
				data, err = userc.BuildChangePasswordPayload(*userChangePasswordBodyFlag, *userChangePasswordUserIDFlag, *userChangePasswordAuthFlag)
			case "accept- tnc":
				endpoint = c.AcceptTnc()
				data, err = userc.BuildAcceptTncPayload(*userAcceptTncBodyFlag, *userAcceptTncUserIDFlag, *userAcceptTncAuthFlag)
			case "get- current":
				endpoint = c.GetCurrent()
				data, err = userc.BuildGetCurrentPayload(*userGetCurrentAuthFlag)
			case "list- by- project":
				endpoint = c.ListByProject()
				data, err = userc.BuildListByProjectPayload(*userListByProjectProjectIDFlag, *userListByProjectAuthFlag)
			case "issue- transmission- token":
				endpoint = c.IssueTransmissionToken()
				data, err = userc.BuildIssueTransmissionTokenPayload(*userIssueTransmissionTokenAuthFlag)
			case "project- roles":
				endpoint = c.ProjectRoles()
				data = nil
			case "admin- terms- and- conditions":
				endpoint = c.AdminTermsAndConditions()
				data, err = userc.BuildAdminTermsAndConditionsPayload(*userAdminTermsAndConditionsBodyFlag, *userAdminTermsAndConditionsAuthFlag)
			case "admin- delete":
				endpoint = c.AdminDelete()
				data, err = userc.BuildAdminDeletePayload(*userAdminDeleteBodyFlag, *userAdminDeleteAuthFlag)
			case "admin- search":
				endpoint = c.AdminSearch()
				data, err = userc.BuildAdminSearchPayload(*userAdminSearchQueryFlag, *userAdminSearchAuthFlag)
			case "mentionables":
				endpoint = c.Mentionables()
				data, err = userc.BuildMentionablesPayload(*userMentionablesProjectIDFlag, *userMentionablesBookmarkFlag, *userMentionablesQueryFlag, *userMentionablesAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// activityUsage displays the usage of the activity command and its subcommands.
func activityUsage() {
	fmt.Fprintf(os.Stderr, `Service is the activity service interface.
Usage:
    %s [globalflags] activity COMMAND [flags]

COMMAND:
    station: Station implements station.
    project: Project implements project.

Additional help:
    %s activity COMMAND --help
`, os.Args[0], os.Args[0])
}
func activityStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity station -id INT64 -page INT64 -auth STRING

Station implements station.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity station --id 6194776481514002030 --page 8592596582790249171 --auth "Nobis aut minus aut sunt."
`, os.Args[0])
}

func activityProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] activity project -id INT64 -page INT64 -auth STRING

Project implements project.
    -id INT64: 
    -page INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` activity project --id 7658614296992581176 --page 6838412821484741451 --auth "Ipsum ut."
`, os.Args[0])
}

// csvUsage displays the usage of the csv command and its subcommands.
func csvUsage() {
	fmt.Fprintf(os.Stderr, `Service is the csv service interface.
Usage:
    %s [globalflags] csv COMMAND [flags]

COMMAND:
    noop: Noop implements noop.

Additional help:
    %s csv COMMAND --help
`, os.Args[0], os.Args[0])
}
func csvNoopUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] csv noop

Noop implements noop.

Example:
    `+os.Args[0]+` csv noop
`, os.Args[0])
}

// dataUsage displays the usage of the data command and its subcommands.
func dataUsage() {
	fmt.Fprintf(os.Stderr, `Service is the data service interface.
Usage:
    %s [globalflags] data COMMAND [flags]

COMMAND:
    device- summary: DeviceSummary implements device summary.

Additional help:
    %s data COMMAND --help
`, os.Args[0], os.Args[0])
}
func dataDeviceSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] data device- summary -device-id STRING -auth STRING

DeviceSummary implements device summary.
    -device-id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` data device- summary --device-id "Cupiditate sed sint." --auth "Nemo provident blanditiis odio temporibus suscipit voluptatem."
`, os.Args[0])
}

// discourseUsage displays the usage of the discourse command and its
// subcommands.
func discourseUsage() {
	fmt.Fprintf(os.Stderr, `Service is the discourse service interface.
Usage:
    %s [globalflags] discourse COMMAND [flags]

COMMAND:
    authenticate: Authenticate implements authenticate.

Additional help:
    %s discourse COMMAND --help
`, os.Args[0], os.Args[0])
}
func discourseAuthenticateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] discourse authenticate -body JSON -token STRING

Authenticate implements authenticate.
    -body JSON: 
    -token STRING: 

Example:
    `+os.Args[0]+` discourse authenticate --body '{
      "email": "Fuga sunt enim aperiam ut.",
      "password": "zzn",
      "sig": "Quia optio.",
      "sso": "Sint iste voluptate sed iusto."
   }' --token "Aut eos tempore sint beatae."
`, os.Args[0])
}

// discussionUsage displays the usage of the discussion command and its
// subcommands.
func discussionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the discussion service interface.
Usage:
    %s [globalflags] discussion COMMAND [flags]

COMMAND:
    project: Project implements project.
    data: Data implements data.
    post- message: PostMessage implements post message.
    update- message: UpdateMessage implements update message.
    delete- message: DeleteMessage implements delete message.

Additional help:
    %s discussion COMMAND --help
`, os.Args[0], os.Args[0])
}
func discussionProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] discussion project -project-id INT32 -auth STRING

Project implements project.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` discussion project --project-id 2045491323 --auth "Modi consequatur tempora tempore."
`, os.Args[0])
}

func discussionDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] discussion data -bookmark STRING -auth STRING

Data implements data.
    -bookmark STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` discussion data --bookmark "Et libero sit omnis voluptate optio et." --auth "Suscipit quia."
`, os.Args[0])
}

func discussionPostMessageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] discussion post- message -body JSON -auth STRING

PostMessage implements post message.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` discussion post- message --body '{
      "post": {
         "body": "Et debitis autem dolor.",
         "bookmark": "Vero voluptas vitae harum est.",
         "projectId": 1551338576,
         "threadId": 3346156873610408092
      }
   }' --auth "Quisquam eaque exercitationem ea impedit veritatis."
`, os.Args[0])
}

func discussionUpdateMessageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] discussion update- message -body JSON -post-id INT64 -auth STRING

UpdateMessage implements update message.
    -body JSON: 
    -post-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` discussion update- message --body '{
      "body": "Ut blanditiis rerum ea id distinctio."
   }' --post-id 1598055180962966923 --auth "Dolorem modi occaecati quisquam quidem nisi."
`, os.Args[0])
}

func discussionDeleteMessageUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] discussion delete- message -post-id INT64 -auth STRING

DeleteMessage implements delete message.
    -post-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` discussion delete- message --post-id 4268172934550794205 --auth "Velit non dolorem."
`, os.Args[0])
}

// exportUsage displays the usage of the export command and its subcommands.
func exportUsage() {
	fmt.Fprintf(os.Stderr, `Service is the export service interface.
Usage:
    %s [globalflags] export COMMAND [flags]

COMMAND:
    list- mine: ListMine implements list mine.
    status: Status implements status.
    download: Download implements download.
    csv: Csv implements csv.
    json- lines: JSONLines implements json lines.

Additional help:
    %s export COMMAND --help
`, os.Args[0], os.Args[0])
}
func exportListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` export list- mine --auth "In tenetur beatae id commodi et."
`, os.Args[0])
}

func exportStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export status -id STRING -auth STRING

Status implements status.
    -id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export status --id "Et et facere consequatur voluptate debitis rerum." --auth "Quis omnis."
`, os.Args[0])
}

func exportDownloadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export download -id STRING -auth STRING

Download implements download.
    -id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export download --id "Sequi fugiat nemo non repellendus." --auth "Aut non quidem harum adipisci quas."
`, os.Args[0])
}

func exportCsvUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export csv -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -auth STRING

Csv implements csv.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export csv --start 6455708558768720293 --end 2992764723751957837 --stations "Veniam cupiditate eos maiores." --sensors "Et architecto est voluptatibus labore ut." --resolution 1101884986 --aggregate "Consectetur eveniet animi impedit laborum doloremque." --complete false --tail 1978394074 --auth "Quo cum eius."
`, os.Args[0])
}

func exportJSONLinesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] export json- lines -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -auth STRING

JSONLines implements json lines.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` export json- lines --start 1158540562428029349 --end 2077842156625135378 --stations "Alias ut." --sensors "Neque eum voluptatem rem." --resolution 1359520320 --aggregate "Harum rerum incidunt non quo." --complete true --tail 1075406359 --auth "Voluptate fugit."
`, os.Args[0])
}

// firmwareUsage displays the usage of the firmware command and its subcommands.
func firmwareUsage() {
	fmt.Fprintf(os.Stderr, `Service is the firmware service interface.
Usage:
    %s [globalflags] firmware COMMAND [flags]

COMMAND:
    download: Download implements download.
    add: Add implements add.
    list: List implements list.
    delete: Delete implements delete.

Additional help:
    %s firmware COMMAND --help
`, os.Args[0], os.Args[0])
}
func firmwareDownloadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware download -firmware-id INT32

Download implements download.
    -firmware-id INT32: 

Example:
    `+os.Args[0]+` firmware download --firmware-id 1989292546
`, os.Args[0])
}

func firmwareAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware add --body '{
      "etag": "Dolor pariatur qui et voluptas.",
      "logicalAddress": 2776041595619420077,
      "meta": "Aut velit temporibus aut.",
      "module": "Enim qui nam rerum voluptatem ipsam ipsum.",
      "profile": "Explicabo voluptatem.",
      "url": "Voluptatibus quis magnam.",
      "version": "Illo reiciendis excepturi doloremque maxime."
   }' --auth "Ut animi."
`, os.Args[0])
}

func firmwareListUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware list -module STRING -profile STRING -page-size INT32 -page INT32 -auth STRING

List implements list.
    -module STRING: 
    -profile STRING: 
    -page-size INT32: 
    -page INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware list --module "Et perferendis laborum et necessitatibus." --profile "Blanditiis consequatur." --page-size 1877907657 --page 1817218807 --auth "Iste qui porro similique consequuntur."
`, os.Args[0])
}

func firmwareDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] firmware delete -firmware-id INT32 -auth STRING

Delete implements delete.
    -firmware-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` firmware delete --firmware-id 1512147040 --auth "Non et neque ad."
`, os.Args[0])
}

// followingUsage displays the usage of the following command and its
// subcommands.
func followingUsage() {
	fmt.Fprintf(os.Stderr, `Service is the following service interface.
Usage:
    %s [globalflags] following COMMAND [flags]

COMMAND:
    follow: Follow implements follow.
    unfollow: Unfollow implements unfollow.
    followers: Followers implements followers.

Additional help:
    %s following COMMAND --help
`, os.Args[0], os.Args[0])
}
func followingFollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following follow -id INT64 -auth STRING

Follow implements follow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following follow --id 544478178998637133 --auth "Corporis iusto."
`, os.Args[0])
}

func followingUnfollowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following unfollow -id INT64 -auth STRING

Unfollow implements unfollow.
    -id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` following unfollow --id 871042133133529581 --auth "Et non."
`, os.Args[0])
}

func followingFollowersUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] following followers -id INT64 -page INT64

Followers implements followers.
    -id INT64: 
    -page INT64: 

Example:
    `+os.Args[0]+` following followers --id 309300554512427214 --page 3777746732696492102
`, os.Args[0])
}

// ingestionUsage displays the usage of the ingestion command and its
// subcommands.
func ingestionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ingestion service interface.
Usage:
    %s [globalflags] ingestion COMMAND [flags]

COMMAND:
    process- pending: ProcessPending implements process pending.
    walk- everything: WalkEverything implements walk everything.
    process- station: ProcessStation implements process station.
    process- station- ingestions: ProcessStationIngestions implements process station ingestions.
    process- ingestion: ProcessIngestion implements process ingestion.
    refresh- views: RefreshViews implements refresh views.
    delete: Delete implements delete.

Additional help:
    %s ingestion COMMAND --help
`, os.Args[0], os.Args[0])
}
func ingestionProcessPendingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- pending -auth STRING

ProcessPending implements process pending.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- pending --auth "Tempora alias."
`, os.Args[0])
}

func ingestionWalkEverythingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion walk- everything -auth STRING

WalkEverything implements walk everything.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion walk- everything --auth "Quam excepturi est esse itaque consequatur officiis."
`, os.Args[0])
}

func ingestionProcessStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- station -station-id INT32 -completely BOOL -skip-manual BOOL -auth STRING

ProcessStation implements process station.
    -station-id INT32: 
    -completely BOOL: 
    -skip-manual BOOL: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- station --station-id 59837264 --completely false --skip-manual true --auth "Impedit nam dicta at."
`, os.Args[0])
}

func ingestionProcessStationIngestionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- station- ingestions -station-id INT64 -auth STRING

ProcessStationIngestions implements process station ingestions.
    -station-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- station- ingestions --station-id 7213264915663072777 --auth "Voluptate aut praesentium inventore."
`, os.Args[0])
}

func ingestionProcessIngestionUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion process- ingestion -ingestion-id INT64 -auth STRING

ProcessIngestion implements process ingestion.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion process- ingestion --ingestion-id 5890543456993763701 --auth "Aut corporis."
`, os.Args[0])
}

func ingestionRefreshViewsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion refresh- views -auth STRING

RefreshViews implements refresh views.
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion refresh- views --auth "Ab numquam."
`, os.Args[0])
}

func ingestionDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ingestion delete -ingestion-id INT64 -auth STRING

Delete implements delete.
    -ingestion-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` ingestion delete --ingestion-id 6584931014216702226 --auth "Impedit quam."
`, os.Args[0])
}

// modulesUsage displays the usage of the modules command and its subcommands.
func modulesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the modules service interface.
Usage:
    %s [globalflags] modules COMMAND [flags]

COMMAND:
    meta: Meta implements meta.

Additional help:
    %s modules COMMAND --help
`, os.Args[0], os.Args[0])
}
func modulesMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] modules meta

Meta implements meta.

Example:
    `+os.Args[0]+` modules meta
`, os.Args[0])
}

// notesUsage displays the usage of the notes command and its subcommands.
func notesUsage() {
	fmt.Fprintf(os.Stderr, `Service is the notes service interface.
Usage:
    %s [globalflags] notes COMMAND [flags]

COMMAND:
    update: Update implements update.
    get: Get implements get.
    download- media: DownloadMedia implements download media.
    upload- media: UploadMedia implements upload media.
    delete- media: DeleteMedia implements delete media.

Additional help:
    %s notes COMMAND --help
`, os.Args[0], os.Args[0])
}
func notesUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes update -body JSON -station-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes update --body '{
      "notes": {
         "creating": [
            {
               "body": "Laudantium eos soluta distinctio repellat.",
               "key": "Nobis quaerat nesciunt ut.",
               "mediaIds": [
                  2943012989969916972,
                  2435064384007041379,
                  2270616053821177199
               ]
            },
            {
               "body": "Laudantium eos soluta distinctio repellat.",
               "key": "Nobis quaerat nesciunt ut.",
               "mediaIds": [
                  2943012989969916972,
                  2435064384007041379,
                  2270616053821177199
               ]
            },
            {
               "body": "Laudantium eos soluta distinctio repellat.",
               "key": "Nobis quaerat nesciunt ut.",
               "mediaIds": [
                  2943012989969916972,
                  2435064384007041379,
                  2270616053821177199
               ]
            }
         ],
         "notes": [
            {
               "body": "Aut provident.",
               "id": 8533501338479540862,
               "key": "Quam voluptatem illum ea dolorem adipisci.",
               "mediaIds": [
                  198119773969228544,
                  7719255109471820193
               ]
            },
            {
               "body": "Aut provident.",
               "id": 8533501338479540862,
               "key": "Quam voluptatem illum ea dolorem adipisci.",
               "mediaIds": [
                  198119773969228544,
                  7719255109471820193
               ]
            },
            {
               "body": "Aut provident.",
               "id": 8533501338479540862,
               "key": "Quam voluptatem illum ea dolorem adipisci.",
               "mediaIds": [
                  198119773969228544,
                  7719255109471820193
               ]
            }
         ]
      }
   }' --station-id 1994792261 --auth "Et eos dolor."
`, os.Args[0])
}

func notesGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes get -station-id INT32 -auth STRING

Get implements get.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes get --station-id 1574759260 --auth "Tempora quod error non dolores ea et."
`, os.Args[0])
}

func notesDownloadMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes download- media -media-id INT32 -auth STRING

DownloadMedia implements download media.
    -media-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes download- media --media-id 2004294593 --auth "Commodi est quo."
`, os.Args[0])
}

func notesUploadMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes upload- media -station-id INT32 -key STRING -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadMedia implements upload media.
    -station-id INT32: 
    -key STRING: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` notes upload- media --station-id 1486275066 --key "Quia aspernatur necessitatibus possimus." --content-type "Rerum quidem fuga totam." --content-length 5922607138678909113 --auth "Sapiente perspiciatis consequatur dolore adipisci quis repudiandae." --stream "goa.png"
`, os.Args[0])
}

func notesDeleteMediaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notes delete- media -media-id INT32 -auth STRING

DeleteMedia implements delete media.
    -media-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notes delete- media --media-id 2008977010 --auth "Eius molestiae labore et delectus id."
`, os.Args[0])
}

// notificationsUsage displays the usage of the notifications command and its
// subcommands.
func notificationsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the notifications service interface.
Usage:
    %s [globalflags] notifications COMMAND [flags]

COMMAND:
    listen: Listen implements listen.
    seen: Seen implements seen.

Additional help:
    %s notifications COMMAND --help
`, os.Args[0], os.Args[0])
}
func notificationsListenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notifications listen

Listen implements listen.

Example:
    `+os.Args[0]+` notifications listen
`, os.Args[0])
}

func notificationsSeenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] notifications seen -body JSON -auth STRING

Seen implements seen.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` notifications seen --body '{
      "ids": [
         215620773325637799,
         2642081405108272245
      ]
   }' --auth "Veritatis ut laudantium."
`, os.Args[0])
}

// oidcUsage displays the usage of the oidc command and its subcommands.
func oidcUsage() {
	fmt.Fprintf(os.Stderr, `Service is the oidc service interface.
Usage:
    %s [globalflags] oidc COMMAND [flags]

COMMAND:
    required: Required implements required.
    url: URL implements url.
    authenticate: Authenticate implements authenticate.

Additional help:
    %s oidc COMMAND --help
`, os.Args[0], os.Args[0])
}
func oidcRequiredUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] oidc required -after STRING -follow BOOL -token STRING

Required implements required.
    -after STRING: 
    -follow BOOL: 
    -token STRING: 

Example:
    `+os.Args[0]+` oidc required --after "Dolorem vitae." --follow true --token "Non qui blanditiis."
`, os.Args[0])
}

func oidcURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] oidc url -after STRING -follow BOOL -token STRING

URL implements url.
    -after STRING: 
    -follow BOOL: 
    -token STRING: 

Example:
    `+os.Args[0]+` oidc url --after "Asperiores voluptatum rerum ut qui reiciendis." --follow false --token "Omnis optio eligendi."
`, os.Args[0])
}

func oidcAuthenticateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] oidc authenticate -state STRING -session-state STRING -code STRING

Authenticate implements authenticate.
    -state STRING: 
    -session-state STRING: 
    -code STRING: 

Example:
    `+os.Args[0]+` oidc authenticate --state "Eveniet quasi est odit ipsum ut." --session-state "Eos consequuntur sequi distinctio natus." --code "Blanditiis et quisquam numquam fugit."
`, os.Args[0])
}

// projectUsage displays the usage of the project command and its subcommands.
func projectUsage() {
	fmt.Fprintf(os.Stderr, `Service is the project service interface.
Usage:
    %s [globalflags] project COMMAND [flags]

COMMAND:
    add- update: AddUpdate implements add update.
    delete- update: DeleteUpdate implements delete update.
    modify- update: ModifyUpdate implements modify update.
    invites: Invites implements invites.
    lookup- invite: LookupInvite implements lookup invite.
    accept- project- invite: AcceptProjectInvite implements accept project invite.
    reject- project- invite: RejectProjectInvite implements reject project invite.
    accept- invite: AcceptInvite implements accept invite.
    reject- invite: RejectInvite implements reject invite.
    add: Add implements add.
    update: Update implements update.
    get: Get implements get.
    list- community: ListCommunity implements list community.
    list- mine: ListMine implements list mine.
    invite: Invite implements invite.
    edit- user: EditUser implements edit user.
    remove- user: RemoveUser implements remove user.
    add- station: AddStation implements add station.
    remove- station: RemoveStation implements remove station.
    delete: Delete implements delete.
    upload- photo: UploadPhoto implements upload photo.
    download- photo: DownloadPhoto implements download photo.
    get- projects- for- station: GetProjectsForStation implements get projects for station.

Additional help:
    %s project COMMAND --help
`, os.Args[0], os.Args[0])
}
func projectAddUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- update -body JSON -project-id INT32 -auth STRING

AddUpdate implements add update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- update --body '{
      "body": "Non dolores eveniet ipsum in quos incidunt."
   }' --project-id 1918798972 --auth "Et non ut ut quisquam."
`, os.Args[0])
}

func projectDeleteUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete- update -project-id INT32 -update-id INT64 -auth STRING

DeleteUpdate implements delete update.
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete- update --project-id 372289321 --update-id 4570622785010893972 --auth "Id molestiae quo aut excepturi."
`, os.Args[0])
}

func projectModifyUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project modify- update -body JSON -project-id INT32 -update-id INT64 -auth STRING

ModifyUpdate implements modify update.
    -body JSON: 
    -project-id INT32: 
    -update-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project modify- update --body '{
      "body": "Quidem consequatur corporis animi et aliquid."
   }' --project-id 1575020456 --update-id 4753210118588385518 --auth "Quam dolorem aliquid."
`, os.Args[0])
}

func projectInvitesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invites -auth STRING

Invites implements invites.
    -auth STRING: 

Example:
    `+os.Args[0]+` project invites --auth "Ipsam occaecati sint voluptatem."
`, os.Args[0])
}

func projectLookupInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project lookup- invite -token STRING -auth STRING

LookupInvite implements lookup invite.
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project lookup- invite --token "Pariatur placeat fuga animi ab corrupti deleniti." --auth "Omnis tempore."
`, os.Args[0])
}

func projectAcceptProjectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project accept- project- invite -project-id INT32 -auth STRING

AcceptProjectInvite implements accept project invite.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project accept- project- invite --project-id 287657019 --auth "Adipisci quia eaque adipisci et consequatur."
`, os.Args[0])
}

func projectRejectProjectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project reject- project- invite -project-id INT32 -auth STRING

RejectProjectInvite implements reject project invite.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project reject- project- invite --project-id 986797602 --auth "Earum sed recusandae molestiae eos."
`, os.Args[0])
}

func projectAcceptInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project accept- invite -id INT64 -token STRING -auth STRING

AcceptInvite implements accept invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project accept- invite --id 5720835902721915520 --token "A assumenda." --auth "Accusamus doloremque ullam quasi tenetur fuga."
`, os.Args[0])
}

func projectRejectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project reject- invite -id INT64 -token STRING -auth STRING

RejectInvite implements reject invite.
    -id INT64: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project reject- invite --id 5551426720265595946 --token "Autem non dolorem dolor qui occaecati et." --auth "Aut quis et eum qui."
`, os.Args[0])
}

func projectAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add --body '{
      "etag": "Dolor pariatur qui et voluptas.",
      "logicalAddress": 2776041595619420077,
      "meta": "Aut velit temporibus aut.",
      "module": "Enim qui nam rerum voluptatem ipsam ipsum.",
      "profile": "Explicabo voluptatem.",
      "url": "Voluptatibus quis magnam.",
      "version": "Illo reiciendis excepturi doloremque maxime."
   }' --auth "Totam quas voluptatem doloribus non sed et."
`, os.Args[0])
}

func projectUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project update -body JSON -project-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project update --body '{
      "bounds": {
         "max": [
            0.5768667898163508,
            0.8223070785692272
         ],
         "min": [
            0.1874456271006876,
            0.14333533755589298,
            0.997105688494288,
            0.8189136924478222
         ]
      },
      "description": "Veritatis delectus voluptates ex quidem.",
      "endTime": "Ex hic quaerat dignissimos.",
      "goal": "Ab laborum.",
      "location": "Animi reprehenderit autem placeat est eos.",
      "name": "Rerum reiciendis enim reprehenderit.",
      "privacy": 1244779890,
      "showStations": false,
      "startTime": "Veritatis quas necessitatibus ut enim tempore.",
      "tags": "Pariatur omnis tempora aliquid."
   }' --project-id 782990156 --auth "Iure inventore deserunt quia."
`, os.Args[0])
}

func projectGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project get -project-id INT32 -auth STRING

Get implements get.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project get --project-id 1013762623 --auth "Earum facilis recusandae aliquam."
`, os.Args[0])
}

func projectListCommunityUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project list- community -auth STRING

ListCommunity implements list community.
    -auth STRING: 

Example:
    `+os.Args[0]+` project list- community --auth "Eum sed voluptatum culpa porro nisi."
`, os.Args[0])
}

func projectListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` project list- mine --auth "Officiis tempora omnis tempore."
`, os.Args[0])
}

func projectInviteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project invite -body JSON -project-id INT32 -auth STRING

Invite implements invite.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project invite --body '{
      "email": "Quidem dolor architecto illo dolores quisquam.",
      "role": 880472900
   }' --project-id 1607042830 --auth "Perspiciatis quis quia eum a voluptatem."
`, os.Args[0])
}

func projectEditUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project edit- user -body JSON -project-id INT32 -auth STRING

EditUser implements edit user.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project edit- user --body '{
      "email": "Error et quia voluptatem ut.",
      "role": 1798840998
   }' --project-id 207646703 --auth "Tempore in nulla architecto magni doloremque."
`, os.Args[0])
}

func projectRemoveUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project remove- user -body JSON -project-id INT32 -auth STRING

RemoveUser implements remove user.
    -body JSON: 
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project remove- user --body '{
      "email": "Error accusantium voluptates quibusdam."
   }' --project-id 158037153 --auth "Animi maiores."
`, os.Args[0])
}

func projectAddStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project add- station -project-id INT32 -station-id INT32 -auth STRING

AddStation implements add station.
    -project-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project add- station --project-id 30441076 --station-id 1152946721 --auth "Vel asperiores est ratione."
`, os.Args[0])
}

func projectRemoveStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project remove- station -project-id INT32 -station-id INT32 -auth STRING

RemoveStation implements remove station.
    -project-id INT32: 
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project remove- station --project-id 1739616986 --station-id 98739513 --auth "Voluptatibus perferendis quae iste laudantium est natus."
`, os.Args[0])
}

func projectDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project delete -project-id INT32 -auth STRING

Delete implements delete.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project delete --project-id 1283682070 --auth "Sit veritatis sunt sit non."
`, os.Args[0])
}

func projectUploadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project upload- photo -project-id INT32 -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadPhoto implements upload photo.
    -project-id INT32: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` project upload- photo --project-id 1926806860 --content-type "Aperiam rem facilis numquam soluta odio temporibus." --content-length 4473824310114966756 --auth "Sapiente accusamus aut deleniti." --stream "goa.png"
`, os.Args[0])
}

func projectDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project download- photo -project-id INT32 -size INT32 -if-none-match STRING -auth STRING

DownloadPhoto implements download photo.
    -project-id INT32: 
    -size INT32: 
    -if-none-match STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project download- photo --project-id 2124339683 --size 1972881897 --if-none-match "Tenetur omnis nam." --auth "Aliquam corrupti ut recusandae placeat nemo voluptatem."
`, os.Args[0])
}

func projectGetProjectsForStationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] project get- projects- for- station -id INT32 -token STRING -auth STRING

GetProjectsForStation implements get projects for station.
    -id INT32: 
    -token STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` project get- projects- for- station --id 1983205302 --token "Tempora dolor velit quis." --auth "Tempore omnis."
`, os.Args[0])
}

// recordsUsage displays the usage of the records command and its subcommands.
func recordsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the records service interface.
Usage:
    %s [globalflags] records COMMAND [flags]

COMMAND:
    data: Data implements data.
    meta: Meta implements meta.
    resolved: Resolved implements resolved.

Additional help:
    %s records COMMAND --help
`, os.Args[0], os.Args[0])
}
func recordsDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records data -record-id INT64 -auth STRING

Data implements data.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records data --record-id 1154109085306497470 --auth "Aliquam at est nobis voluptates pariatur autem."
`, os.Args[0])
}

func recordsMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records meta -record-id INT64 -auth STRING

Meta implements meta.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records meta --record-id 1454641653565430451 --auth "Error enim veritatis velit voluptatem dolorem hic."
`, os.Args[0])
}

func recordsResolvedUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] records resolved -record-id INT64 -auth STRING

Resolved implements resolved.
    -record-id INT64: 
    -auth STRING: 

Example:
    `+os.Args[0]+` records resolved --record-id 641937676669007670 --auth "Sed fuga."
`, os.Args[0])
}

// sensorUsage displays the usage of the sensor command and its subcommands.
func sensorUsage() {
	fmt.Fprintf(os.Stderr, `Service is the sensor service interface.
Usage:
    %s [globalflags] sensor COMMAND [flags]

COMMAND:
    meta: Meta implements meta.
    station- meta: StationMeta implements station meta.
    sensor- meta: SensorMeta implements sensor meta.
    data: Data implements data.
    tail: Tail implements tail.
    recently: Recently implements recently.
    bookmark: Bookmark implements bookmark.
    resolve: Resolve implements resolve.

Additional help:
    %s sensor COMMAND --help
`, os.Args[0], os.Args[0])
}
func sensorMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor meta

Meta implements meta.

Example:
    `+os.Args[0]+` sensor meta
`, os.Args[0])
}

func sensorStationMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor station- meta -stations STRING

StationMeta implements station meta.
    -stations STRING: 

Example:
    `+os.Args[0]+` sensor station- meta --stations "Et illum praesentium recusandae eos aut id."
`, os.Args[0])
}

func sensorSensorMetaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor sensor- meta

SensorMeta implements sensor meta.

Example:
    `+os.Args[0]+` sensor sensor- meta
`, os.Args[0])
}

func sensorDataUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor data -start INT64 -end INT64 -stations STRING -sensors STRING -resolution INT32 -aggregate STRING -complete BOOL -tail INT32 -backend STRING -auth STRING

Data implements data.
    -start INT64: 
    -end INT64: 
    -stations STRING: 
    -sensors STRING: 
    -resolution INT32: 
    -aggregate STRING: 
    -complete BOOL: 
    -tail INT32: 
    -backend STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor data --start 4905123021041348433 --end 3620182594779415859 --stations "Officia et nulla magni quia ut nam." --sensors "Aut quidem." --resolution 1618937012 --aggregate "Harum animi vel ut repellat consequuntur reiciendis." --complete false --tail 1694482215 --backend "Molestias sequi id ratione cum." --auth "Ipsum et."
`, os.Args[0])
}

func sensorTailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor tail -stations STRING -backend STRING -auth STRING

Tail implements tail.
    -stations STRING: 
    -backend STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor tail --stations "Enim totam nostrum officiis aut." --backend "Sapiente deleniti suscipit." --auth "Veniam quos rerum est tempora."
`, os.Args[0])
}

func sensorRecentlyUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor recently -stations STRING -auth STRING

Recently implements recently.
    -stations STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor recently --stations "Suscipit facilis excepturi velit illo quam omnis." --auth "Nihil id id rerum."
`, os.Args[0])
}

func sensorBookmarkUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor bookmark -bookmark STRING -auth STRING

Bookmark implements bookmark.
    -bookmark STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor bookmark --bookmark "Et sunt dicta sed qui." --auth "Ad aut nihil nam repellendus dolor temporibus."
`, os.Args[0])
}

func sensorResolveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sensor resolve -v2 STRING -auth STRING

Resolve implements resolve.
    -v2 STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` sensor resolve --v2 "Ratione libero fugiat vitae illum." --auth "Quae eum est architecto."
`, os.Args[0])
}

// informationUsage displays the usage of the information command and its
// subcommands.
func informationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the information service interface.
Usage:
    %s [globalflags] information COMMAND [flags]

COMMAND:
    device- layout: DeviceLayout implements device layout.
    firmware- statistics: FirmwareStatistics implements firmware statistics.

Additional help:
    %s information COMMAND --help
`, os.Args[0], os.Args[0])
}
func informationDeviceLayoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information device- layout -device-id STRING -auth STRING

DeviceLayout implements device layout.
    -device-id STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` information device- layout --device-id "Nemo quibusdam delectus expedita." --auth "Rem nesciunt cupiditate dolor."
`, os.Args[0])
}

func informationFirmwareStatisticsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] information firmware- statistics -auth STRING

FirmwareStatistics implements firmware statistics.
    -auth STRING: 

Example:
    `+os.Args[0]+` information firmware- statistics --auth "Id ad est dolores est dignissimos."
`, os.Args[0])
}

// stationUsage displays the usage of the station command and its subcommands.
func stationUsage() {
	fmt.Fprintf(os.Stderr, `Service is the station service interface.
Usage:
    %s [globalflags] station COMMAND [flags]

COMMAND:
    add: Add implements add.
    get: Get implements get.
    transfer: Transfer implements transfer.
    default- photo: DefaultPhoto implements default photo.
    update: Update implements update.
    list- mine: ListMine implements list mine.
    list- project: ListProject implements list project.
    list- associated: ListAssociated implements list associated.
    list- project- associated: ListProjectAssociated implements list project associated.
    download- photo: DownloadPhoto implements download photo.
    list- all: ListAll implements list all.
    delete: Delete implements delete.
    admin- search: AdminSearch implements admin search.
    progress: Progress implements progress.

Additional help:
    %s station COMMAND --help
`, os.Args[0], os.Args[0])
}
func stationAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station add -body JSON -auth STRING

Add implements add.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station add --body '{
      "deviceId": "Aliquid a enim.",
      "locationName": "Culpa odit.",
      "name": "Atque quaerat est odio ullam debitis.",
      "statusPb": "Laudantium autem quibusdam distinctio nisi maiores aspernatur."
   }' --auth "Eius vel pariatur."
`, os.Args[0])
}

func stationGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station get -id INT32 -auth STRING

Get implements get.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station get --id 903725847 --auth "Ab corrupti dicta est."
`, os.Args[0])
}

func stationTransferUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station transfer -id INT32 -owner-id INT32 -auth STRING

Transfer implements transfer.
    -id INT32: 
    -owner-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station transfer --id 1101779159 --owner-id 1364907105 --auth "Quos sapiente est eos dolores quibusdam laudantium."
`, os.Args[0])
}

func stationDefaultPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station default- photo -id INT32 -photo-id INT32 -auth STRING

DefaultPhoto implements default photo.
    -id INT32: 
    -photo-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station default- photo --id 1418667413 --photo-id 2033255282 --auth "Et nihil omnis ut magnam dolor."
`, os.Args[0])
}

func stationUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station update -body JSON -id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station update --body '{
      "locationName": "Repellat voluptatibus.",
      "name": "Enim dolor corporis quasi consectetur.",
      "statusPb": "Iure dolor libero est aperiam dolorum eum."
   }' --id 1827381007 --auth "Autem tenetur voluptatem atque et est quo."
`, os.Args[0])
}

func stationListMineUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- mine -auth STRING

ListMine implements list mine.
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- mine --auth "Dolorem consequatur harum dicta voluptatem."
`, os.Args[0])
}

func stationListProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- project -id INT32 -disable-filtering BOOL -auth STRING

ListProject implements list project.
    -id INT32: 
    -disable-filtering BOOL: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- project --id 240016600 --disable-filtering true --auth "Architecto quibusdam tempora corporis ut."
`, os.Args[0])
}

func stationListAssociatedUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- associated -id INT32 -auth STRING

ListAssociated implements list associated.
    -id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- associated --id 221272064 --auth "Quidem iusto."
`, os.Args[0])
}

func stationListProjectAssociatedUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- project- associated -project-id INT32 -auth STRING

ListProjectAssociated implements list project associated.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- project- associated --project-id 1352657203 --auth "Nam aperiam architecto repudiandae."
`, os.Args[0])
}

func stationDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station download- photo -station-id INT32 -size INT32 -if-none-match STRING -auth STRING

DownloadPhoto implements download photo.
    -station-id INT32: 
    -size INT32: 
    -if-none-match STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station download- photo --station-id 211605205 --size 328272691 --if-none-match "Cumque quis nobis." --auth "Eos rerum omnis voluptas laudantium laudantium."
`, os.Args[0])
}

func stationListAllUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station list- all -page INT32 -page-size INT32 -owner-id INT32 -query STRING -sort-by STRING -auth STRING

ListAll implements list all.
    -page INT32: 
    -page-size INT32: 
    -owner-id INT32: 
    -query STRING: 
    -sort-by STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station list- all --page 1069137496 --page-size 1242404553 --owner-id 1131586057 --query "Sequi earum." --sort-by "Eligendi eos." --auth "Est repellendus quia alias qui dolorem."
`, os.Args[0])
}

func stationDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station delete -station-id INT32 -auth STRING

Delete implements delete.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station delete --station-id 1118615334 --auth "Est aperiam labore incidunt."
`, os.Args[0])
}

func stationAdminSearchUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station admin- search -query STRING -auth STRING

AdminSearch implements admin search.
    -query STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station admin- search --query "Est eum dignissimos qui." --auth "Reprehenderit quasi molestiae quasi corrupti."
`, os.Args[0])
}

func stationProgressUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] station progress -station-id INT32 -auth STRING

Progress implements progress.
    -station-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` station progress --station-id 218167103 --auth "Doloremque ipsum voluptatem et velit quas et."
`, os.Args[0])
}

// tasksUsage displays the usage of the tasks command and its subcommands.
func tasksUsage() {
	fmt.Fprintf(os.Stderr, `Service is the tasks service interface.
Usage:
    %s [globalflags] tasks COMMAND [flags]

COMMAND:
    five: Five implements five.

Additional help:
    %s tasks COMMAND --help
`, os.Args[0], os.Args[0])
}
func tasksFiveUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tasks five

Five implements five.

Example:
    `+os.Args[0]+` tasks five
`, os.Args[0])
}

// testUsage displays the usage of the test command and its subcommands.
func testUsage() {
	fmt.Fprintf(os.Stderr, `Service is the test service interface.
Usage:
    %s [globalflags] test COMMAND [flags]

COMMAND:
    get: Get implements get.
    error: Error implements error.
    email: Email implements email.

Additional help:
    %s test COMMAND --help
`, os.Args[0], os.Args[0])
}
func testGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test get -id INT64

Get implements get.
    -id INT64: 

Example:
    `+os.Args[0]+` test get --id 7963125892625369549
`, os.Args[0])
}

func testErrorUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test error

Error implements error.

Example:
    `+os.Args[0]+` test error
`, os.Args[0])
}

func testEmailUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] test email -address STRING -auth STRING

Email implements email.
    -address STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` test email --address "Nisi voluptas a voluptas." --auth "Error sunt."
`, os.Args[0])
}

// ttnUsage displays the usage of the ttn command and its subcommands.
func ttnUsage() {
	fmt.Fprintf(os.Stderr, `Service is the ttn service interface.
Usage:
    %s [globalflags] ttn COMMAND [flags]

COMMAND:
    webhook: Webhook implements webhook.

Additional help:
    %s ttn COMMAND --help
`, os.Args[0], os.Args[0])
}
func ttnWebhookUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] ttn webhook -token STRING -content-type STRING -content-length INT64 -auth STRING -stream STRING

Webhook implements webhook.
    -token STRING: 
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` ttn webhook --token "Saepe impedit consequatur aut et quia consequatur." --content-type "Ut placeat reprehenderit ut totam repellendus ipsam." --content-length 5038308363120062154 --auth "Minima quod voluptatem rerum." --stream "goa.png"
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the user service interface.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    roles: Roles implements roles.
    upload- photo: UploadPhoto implements upload photo.
    download- photo: DownloadPhoto implements download photo.
    login: Login implements login.
    recovery- lookup: RecoveryLookup implements recovery lookup.
    recovery: Recovery implements recovery.
    resume: Resume implements resume.
    logout: Logout implements logout.
    refresh: Refresh implements refresh.
    send- validation: SendValidation implements send validation.
    validate: Validate implements validate.
    add: Add implements add.
    update: Update implements update.
    change- password: ChangePassword implements change password.
    accept- tnc: AcceptTnc implements accept tnc.
    get- current: GetCurrent implements get current.
    list- by- project: ListByProject implements list by project.
    issue- transmission- token: IssueTransmissionToken implements issue transmission token.
    project- roles: ProjectRoles implements project roles.
    admin- terms- and- conditions: AdminTermsAndConditions implements admin terms and conditions.
    admin- delete: AdminDelete implements admin delete.
    admin- search: AdminSearch implements admin search.
    mentionables: Mentionables implements mentionables.

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user roles -auth STRING

Roles implements roles.
    -auth STRING: 

Example:
    `+os.Args[0]+` user roles --auth "Quisquam harum at."
`, os.Args[0])
}

func userUploadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user upload- photo -content-type STRING -content-length INT64 -auth STRING -stream STRING

UploadPhoto implements upload photo.
    -content-type STRING: 
    -content-length INT64: 
    -auth STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` user upload- photo --content-type "Rerum molestiae velit praesentium." --content-length 4576585892909123315 --auth "Doloribus eveniet qui laborum nulla sit consequatur." --stream "goa.png"
`, os.Args[0])
}

func userDownloadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user download- photo -user-id INT32 -size INT32 -if-none-match STRING

DownloadPhoto implements download photo.
    -user-id INT32: 
    -size INT32: 
    -if-none-match STRING: 

Example:
    `+os.Args[0]+` user download- photo --user-id 731094370 --size 137567131 --if-none-match "Nulla natus excepturi perferendis."
`, os.Args[0])
}

func userLoginUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user login -body JSON

Login implements login.
    -body JSON: 

Example:
    `+os.Args[0]+` user login --body '{
      "email": "8o9",
      "password": "nso"
   }'
`, os.Args[0])
}

func userRecoveryLookupUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user recovery- lookup -body JSON

RecoveryLookup implements recovery lookup.
    -body JSON: 

Example:
    `+os.Args[0]+` user recovery- lookup --body '{
      "email": "Corporis tenetur et sed sunt."
   }'
`, os.Args[0])
}

func userRecoveryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user recovery -body JSON

Recovery implements recovery.
    -body JSON: 

Example:
    `+os.Args[0]+` user recovery --body '{
      "password": "m7u",
      "token": "Modi odio saepe quidem quae."
   }'
`, os.Args[0])
}

func userResumeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user resume -body JSON

Resume implements resume.
    -body JSON: 

Example:
    `+os.Args[0]+` user resume --body '{
      "token": "Sint commodi dolores quia harum rem rem."
   }'
`, os.Args[0])
}

func userLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user logout -auth STRING

Logout implements logout.
    -auth STRING: 

Example:
    `+os.Args[0]+` user logout --auth "Repellendus quis alias ut ab minima."
`, os.Args[0])
}

func userRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user refresh -body JSON

Refresh implements refresh.
    -body JSON: 

Example:
    `+os.Args[0]+` user refresh --body '{
      "refreshToken": "Asperiores eum unde."
   }'
`, os.Args[0])
}

func userSendValidationUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user send- validation -user-id INT32

SendValidation implements send validation.
    -user-id INT32: 

Example:
    `+os.Args[0]+` user send- validation --user-id 724479887
`, os.Args[0])
}

func userValidateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user validate -token STRING

Validate implements validate.
    -token STRING: 

Example:
    `+os.Args[0]+` user validate --token "Aut dolorem minus saepe minus fuga eligendi."
`, os.Args[0])
}

func userAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user add -body JSON

Add implements add.
    -body JSON: 

Example:
    `+os.Args[0]+` user add --body '{
      "etag": "Dolor pariatur qui et voluptas.",
      "logicalAddress": 2776041595619420077,
      "meta": "Aut velit temporibus aut.",
      "module": "Enim qui nam rerum voluptatem ipsam ipsum.",
      "profile": "Explicabo voluptatem.",
      "url": "Voluptatibus quis magnam.",
      "version": "Illo reiciendis excepturi doloremque maxime."
   }'
`, os.Args[0])
}

func userUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user update -body JSON -user-id INT32 -auth STRING

Update implements update.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user update --body '{
      "bounds": {
         "max": [
            0.5768667898163508,
            0.8223070785692272
         ],
         "min": [
            0.1874456271006876,
            0.14333533755589298,
            0.997105688494288,
            0.8189136924478222
         ]
      },
      "description": "Veritatis delectus voluptates ex quidem.",
      "endTime": "Ex hic quaerat dignissimos.",
      "goal": "Ab laborum.",
      "location": "Animi reprehenderit autem placeat est eos.",
      "name": "Rerum reiciendis enim reprehenderit.",
      "privacy": 1244779890,
      "showStations": false,
      "startTime": "Veritatis quas necessitatibus ut enim tempore.",
      "tags": "Pariatur omnis tempora aliquid."
   }' --user-id 279318176 --auth "Vero doloremque."
`, os.Args[0])
}

func userChangePasswordUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user change- password -body JSON -user-id INT32 -auth STRING

ChangePassword implements change password.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user change- password --body '{
      "newPassword": "bgc",
      "oldPassword": "0u1"
   }' --user-id 554636725 --auth "Veritatis corporis et."
`, os.Args[0])
}

func userAcceptTncUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user accept- tnc -body JSON -user-id INT32 -auth STRING

AcceptTnc implements accept tnc.
    -body JSON: 
    -user-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user accept- tnc --body '{
      "accept": true
   }' --user-id 1405503890 --auth "Velit qui commodi dolores iusto possimus eveniet."
`, os.Args[0])
}

func userGetCurrentUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get- current -auth STRING

GetCurrent implements get current.
    -auth STRING: 

Example:
    `+os.Args[0]+` user get- current --auth "Non perspiciatis ab et ipsam quo ut."
`, os.Args[0])
}

func userListByProjectUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user list- by- project -project-id INT32 -auth STRING

ListByProject implements list by project.
    -project-id INT32: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user list- by- project --project-id 313839585 --auth "Incidunt repellat iusto."
`, os.Args[0])
}

func userIssueTransmissionTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user issue- transmission- token -auth STRING

IssueTransmissionToken implements issue transmission token.
    -auth STRING: 

Example:
    `+os.Args[0]+` user issue- transmission- token --auth "Maxime sequi sint quas dolores commodi repellendus."
`, os.Args[0])
}

func userProjectRolesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user project- roles

ProjectRoles implements project roles.

Example:
    `+os.Args[0]+` user project- roles
`, os.Args[0])
}

func userAdminTermsAndConditionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user admin- terms- and- conditions -body JSON -auth STRING

AdminTermsAndConditions implements admin terms and conditions.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user admin- terms- and- conditions --body '{
      "email": "Dolor vitae ratione."
   }' --auth "Eius est odit corporis ut."
`, os.Args[0])
}

func userAdminDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user admin- delete -body JSON -auth STRING

AdminDelete implements admin delete.
    -body JSON: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user admin- delete --body '{
      "email": "Impedit molestiae aut asperiores eos quos enim.",
      "password": "Aperiam adipisci eaque non."
   }' --auth "Libero repellat quisquam aut sed."
`, os.Args[0])
}

func userAdminSearchUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user admin- search -query STRING -auth STRING

AdminSearch implements admin search.
    -query STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user admin- search --query "Eum et voluptatibus." --auth "Perferendis rerum ullam omnis."
`, os.Args[0])
}

func userMentionablesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user mentionables -project-id INT32 -bookmark STRING -query STRING -auth STRING

Mentionables implements mentionables.
    -project-id INT32: 
    -bookmark STRING: 
    -query STRING: 
    -auth STRING: 

Example:
    `+os.Args[0]+` user mentionables --project-id 114757515 --bookmark "Repellat architecto rem natus ut ut." --query "Ab laboriosam ab." --auth "Qui deleniti sunt fugiat et laboriosam earum."
`, os.Args[0])
}
