// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ttn HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	ttn "github.com/fieldkit/cloud/server/api/gen/ttn"
	goa "goa.design/goa/v3/pkg"
)

// WebhookForbiddenResponseBody is the type of the "ttn" service "webhook"
// endpoint HTTP response body for the "forbidden" error.
type WebhookForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WebhookNotFoundResponseBody is the type of the "ttn" service "webhook"
// endpoint HTTP response body for the "not-found" error.
type WebhookNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WebhookBadRequestResponseBody is the type of the "ttn" service "webhook"
// endpoint HTTP response body for the "bad-request" error.
type WebhookBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WebhookUnauthorizedResponseBody is the type of the "ttn" service "webhook"
// endpoint HTTP response body for the "unauthorized" error.
type WebhookUnauthorizedResponseBody string

// NewWebhookForbiddenResponseBody builds the HTTP response body from the
// result of the "webhook" endpoint of the "ttn" service.
func NewWebhookForbiddenResponseBody(res *goa.ServiceError) *WebhookForbiddenResponseBody {
	body := &WebhookForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWebhookNotFoundResponseBody builds the HTTP response body from the result
// of the "webhook" endpoint of the "ttn" service.
func NewWebhookNotFoundResponseBody(res *goa.ServiceError) *WebhookNotFoundResponseBody {
	body := &WebhookNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWebhookBadRequestResponseBody builds the HTTP response body from the
// result of the "webhook" endpoint of the "ttn" service.
func NewWebhookBadRequestResponseBody(res *goa.ServiceError) *WebhookBadRequestResponseBody {
	body := &WebhookBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWebhookUnauthorizedResponseBody builds the HTTP response body from the
// result of the "webhook" endpoint of the "ttn" service.
func NewWebhookUnauthorizedResponseBody(res ttn.Unauthorized) WebhookUnauthorizedResponseBody {
	body := WebhookUnauthorizedResponseBody(res)
	return body
}

// NewWebhookPayload builds a ttn service webhook endpoint payload.
func NewWebhookPayload(token *string, contentType string, contentLength int64, auth *string) *ttn.WebhookPayload {
	v := &ttn.WebhookPayload{}
	v.Token = token
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.Auth = auth

	return v
}
