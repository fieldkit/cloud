// Code generated by goa v3.2.4, DO NOT EDIT.
//
// information HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	information "github.com/fieldkit/cloud/server/api/gen/information"
	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildDeviceLayoutRequest instantiates a HTTP request object with method and
// path set to call the "information" service "device layout" endpoint
func (c *Client) BuildDeviceLayoutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		deviceID string
	)
	{
		p, ok := v.(*information.DeviceLayoutPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("information", "device layout", "*information.DeviceLayoutPayload", v)
		}
		deviceID = p.DeviceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeviceLayoutInformationPath(deviceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("information", "device layout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeviceLayoutRequest returns an encoder for requests sent to the
// information device layout server.
func EncodeDeviceLayoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*information.DeviceLayoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("information", "device layout", "*information.DeviceLayoutPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeviceLayoutResponse returns a decoder for responses returned by the
// information device layout endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeviceLayoutResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeviceLayoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeviceLayoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			p := NewDeviceLayoutResponseViewOK(&body)
			view := "default"
			vres := &informationviews.DeviceLayoutResponse{Projected: p, View: view}
			if err = informationviews.ValidateDeviceLayoutResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("information", "device layout", err)
			}
			res := information.NewDeviceLayoutResponse(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DeviceLayoutUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			err = ValidateDeviceLayoutUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeviceLayoutForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			err = ValidateDeviceLayoutForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeviceLayoutNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			err = ValidateDeviceLayoutNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeviceLayoutBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "device layout", err)
			}
			err = ValidateDeviceLayoutBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "device layout", err)
			}
			return nil, NewDeviceLayoutBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("information", "device layout", resp.StatusCode, string(body))
		}
	}
}

// BuildFirmwareStatisticsRequest instantiates a HTTP request object with
// method and path set to call the "information" service "firmware statistics"
// endpoint
func (c *Client) BuildFirmwareStatisticsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FirmwareStatisticsInformationPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("information", "firmware statistics", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFirmwareStatisticsRequest returns an encoder for requests sent to the
// information firmware statistics server.
func EncodeFirmwareStatisticsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*information.FirmwareStatisticsPayload)
		if !ok {
			return goahttp.ErrInvalidType("information", "firmware statistics", "*information.FirmwareStatisticsPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeFirmwareStatisticsResponse returns a decoder for responses returned by
// the information firmware statistics endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeFirmwareStatisticsResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeFirmwareStatisticsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "firmware statistics", err)
			}
			res := NewFirmwareStatisticsResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body FirmwareStatisticsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "firmware statistics", err)
			}
			err = ValidateFirmwareStatisticsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "firmware statistics", err)
			}
			return nil, NewFirmwareStatisticsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body FirmwareStatisticsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "firmware statistics", err)
			}
			err = ValidateFirmwareStatisticsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "firmware statistics", err)
			}
			return nil, NewFirmwareStatisticsForbidden(&body)
		case http.StatusNotFound:
			var (
				body FirmwareStatisticsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "firmware statistics", err)
			}
			err = ValidateFirmwareStatisticsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "firmware statistics", err)
			}
			return nil, NewFirmwareStatisticsNotFound(&body)
		case http.StatusBadRequest:
			var (
				body FirmwareStatisticsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("information", "firmware statistics", err)
			}
			err = ValidateFirmwareStatisticsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("information", "firmware statistics", err)
			}
			return nil, NewFirmwareStatisticsBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("information", "firmware statistics", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStationConfigurationResponseBodyToInformationviewsStationConfigurationView
// builds a value of type *informationviews.StationConfigurationView from a
// value of type *StationConfigurationResponseBody.
func unmarshalStationConfigurationResponseBodyToInformationviewsStationConfigurationView(v *StationConfigurationResponseBody) *informationviews.StationConfigurationView {
	res := &informationviews.StationConfigurationView{
		ID:           v.ID,
		Time:         v.Time,
		ProvisionID:  v.ProvisionID,
		MetaRecordID: v.MetaRecordID,
		SourceID:     v.SourceID,
	}
	res.Modules = make([]*informationviews.StationModuleView, len(v.Modules))
	for i, val := range v.Modules {
		res.Modules[i] = unmarshalStationModuleResponseBodyToInformationviewsStationModuleView(val)
	}

	return res
}

// unmarshalStationModuleResponseBodyToInformationviewsStationModuleView builds
// a value of type *informationviews.StationModuleView from a value of type
// *StationModuleResponseBody.
func unmarshalStationModuleResponseBodyToInformationviewsStationModuleView(v *StationModuleResponseBody) *informationviews.StationModuleView {
	res := &informationviews.StationModuleView{
		ID:           v.ID,
		HardwareID:   v.HardwareID,
		MetaRecordID: v.MetaRecordID,
		Name:         v.Name,
		Position:     v.Position,
		Flags:        v.Flags,
		Internal:     v.Internal,
		FullKey:      v.FullKey,
	}
	res.Sensors = make([]*informationviews.StationSensorView, len(v.Sensors))
	for i, val := range v.Sensors {
		res.Sensors[i] = unmarshalStationSensorResponseBodyToInformationviewsStationSensorView(val)
	}

	return res
}

// unmarshalStationSensorResponseBodyToInformationviewsStationSensorView builds
// a value of type *informationviews.StationSensorView from a value of type
// *StationSensorResponseBody.
func unmarshalStationSensorResponseBodyToInformationviewsStationSensorView(v *StationSensorResponseBody) *informationviews.StationSensorView {
	res := &informationviews.StationSensorView{
		Name:          v.Name,
		UnitOfMeasure: v.UnitOfMeasure,
		Key:           v.Key,
		FullKey:       v.FullKey,
	}
	if v.Reading != nil {
		res.Reading = unmarshalSensorReadingResponseBodyToInformationviewsSensorReadingView(v.Reading)
	}
	res.Ranges = make([]*informationviews.SensorRangeView, len(v.Ranges))
	for i, val := range v.Ranges {
		res.Ranges[i] = unmarshalSensorRangeResponseBodyToInformationviewsSensorRangeView(val)
	}

	return res
}

// unmarshalSensorReadingResponseBodyToInformationviewsSensorReadingView builds
// a value of type *informationviews.SensorReadingView from a value of type
// *SensorReadingResponseBody.
func unmarshalSensorReadingResponseBodyToInformationviewsSensorReadingView(v *SensorReadingResponseBody) *informationviews.SensorReadingView {
	if v == nil {
		return nil
	}
	res := &informationviews.SensorReadingView{
		Last: v.Last,
		Time: v.Time,
	}

	return res
}

// unmarshalSensorRangeResponseBodyToInformationviewsSensorRangeView builds a
// value of type *informationviews.SensorRangeView from a value of type
// *SensorRangeResponseBody.
func unmarshalSensorRangeResponseBodyToInformationviewsSensorRangeView(v *SensorRangeResponseBody) *informationviews.SensorRangeView {
	res := &informationviews.SensorRangeView{
		Minimum: v.Minimum,
		Maximum: v.Maximum,
	}

	return res
}
