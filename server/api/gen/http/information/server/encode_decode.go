// Code generated by goa v3.2.4, DO NOT EDIT.
//
// information HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	"context"
	"net/http"
	"strings"

	information "github.com/fieldkit/cloud/server/api/gen/information"
	informationviews "github.com/fieldkit/cloud/server/api/gen/information/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeDeviceLayoutResponse returns an encoder for responses returned by the
// information device layout endpoint.
func EncodeDeviceLayoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*informationviews.DeviceLayoutResponse)
		enc := encoder(ctx, w)
		body := NewDeviceLayoutResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeviceLayoutRequest returns a decoder for requests sent to the
// information device layout endpoint.
func DecodeDeviceLayoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			deviceID string
			auth     string
			err      error

			params = mux.Vars(r)
		)
		deviceID = params["deviceId"]
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeviceLayoutPayload(deviceID, auth)
		if strings.Contains(payload.Auth, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Auth, " ", 2)[1]
			payload.Auth = cred
		}

		return payload, nil
	}
}

// EncodeDeviceLayoutError returns an encoder for errors returned by the device
// layout information endpoint.
func EncodeDeviceLayoutError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeviceLayoutUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeviceLayoutForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not-found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeviceLayoutNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad-request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeviceLayoutBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad-request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeFirmwareStatisticsResponse returns an encoder for responses returned
// by the information firmware statistics endpoint.
func EncodeFirmwareStatisticsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*information.FirmwareStatisticsResult)
		enc := encoder(ctx, w)
		body := res.Object
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFirmwareStatisticsRequest returns a decoder for requests sent to the
// information firmware statistics endpoint.
func DecodeFirmwareStatisticsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			auth string
			err  error
		)
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewFirmwareStatisticsPayload(auth)
		if strings.Contains(payload.Auth, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Auth, " ", 2)[1]
			payload.Auth = cred
		}

		return payload, nil
	}
}

// EncodeFirmwareStatisticsError returns an encoder for errors returned by the
// firmware statistics information endpoint.
func EncodeFirmwareStatisticsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFirmwareStatisticsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFirmwareStatisticsForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not-found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFirmwareStatisticsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad-request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewFirmwareStatisticsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad-request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalInformationviewsStationConfigurationViewToStationConfigurationResponseBody
// builds a value of type *StationConfigurationResponseBody from a value of
// type *informationviews.StationConfigurationView.
func marshalInformationviewsStationConfigurationViewToStationConfigurationResponseBody(v *informationviews.StationConfigurationView) *StationConfigurationResponseBody {
	res := &StationConfigurationResponseBody{
		ID:           *v.ID,
		Time:         *v.Time,
		ProvisionID:  *v.ProvisionID,
		MetaRecordID: v.MetaRecordID,
		SourceID:     v.SourceID,
	}
	if v.Modules != nil {
		res.Modules = make([]*StationModuleResponseBody, len(v.Modules))
		for i, val := range v.Modules {
			res.Modules[i] = marshalInformationviewsStationModuleViewToStationModuleResponseBody(val)
		}
	}

	return res
}

// marshalInformationviewsStationModuleViewToStationModuleResponseBody builds a
// value of type *StationModuleResponseBody from a value of type
// *informationviews.StationModuleView.
func marshalInformationviewsStationModuleViewToStationModuleResponseBody(v *informationviews.StationModuleView) *StationModuleResponseBody {
	res := &StationModuleResponseBody{
		ID:           *v.ID,
		HardwareID:   v.HardwareID,
		MetaRecordID: v.MetaRecordID,
		Name:         *v.Name,
		Position:     *v.Position,
		Flags:        *v.Flags,
		Internal:     *v.Internal,
		FullKey:      *v.FullKey,
	}
	if v.Sensors != nil {
		res.Sensors = make([]*StationSensorResponseBody, len(v.Sensors))
		for i, val := range v.Sensors {
			res.Sensors[i] = marshalInformationviewsStationSensorViewToStationSensorResponseBody(val)
		}
	}

	return res
}

// marshalInformationviewsStationSensorViewToStationSensorResponseBody builds a
// value of type *StationSensorResponseBody from a value of type
// *informationviews.StationSensorView.
func marshalInformationviewsStationSensorViewToStationSensorResponseBody(v *informationviews.StationSensorView) *StationSensorResponseBody {
	res := &StationSensorResponseBody{
		Name:          *v.Name,
		UnitOfMeasure: *v.UnitOfMeasure,
		Key:           *v.Key,
		FullKey:       *v.FullKey,
	}
	if v.Reading != nil {
		res.Reading = marshalInformationviewsSensorReadingViewToSensorReadingResponseBody(v.Reading)
	}
	if v.Ranges != nil {
		res.Ranges = make([]*SensorRangeResponseBody, len(v.Ranges))
		for i, val := range v.Ranges {
			res.Ranges[i] = marshalInformationviewsSensorRangeViewToSensorRangeResponseBody(val)
		}
	}

	return res
}

// marshalInformationviewsSensorReadingViewToSensorReadingResponseBody builds a
// value of type *SensorReadingResponseBody from a value of type
// *informationviews.SensorReadingView.
func marshalInformationviewsSensorReadingViewToSensorReadingResponseBody(v *informationviews.SensorReadingView) *SensorReadingResponseBody {
	if v == nil {
		return nil
	}
	res := &SensorReadingResponseBody{
		Last: *v.Last,
		Time: *v.Time,
	}

	return res
}

// marshalInformationviewsSensorRangeViewToSensorRangeResponseBody builds a
// value of type *SensorRangeResponseBody from a value of type
// *informationviews.SensorRangeView.
func marshalInformationviewsSensorRangeViewToSensorRangeResponseBody(v *informationviews.SensorRangeView) *SensorRangeResponseBody {
	res := &SensorRangeResponseBody{
		Minimum: *v.Minimum,
		Maximum: *v.Maximum,
	}

	return res
}
