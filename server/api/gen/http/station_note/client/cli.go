// Code generated by goa v3.2.4, DO NOT EDIT.
//
// station_note HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	stationnote "github.com/fieldkit/cloud/server/api/gen/station_note"
)

// BuildStationPayload builds the payload for the station_note station endpoint
// from CLI flags.
func BuildStationPayload(stationNoteStationStationID string, stationNoteStationAuth string) (*stationnote.StationPayload, error) {
	var err error
	var stationID int32
	{
		var v int64
		v, err = strconv.ParseInt(stationNoteStationStationID, 10, 32)
		stationID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationID, must be INT32")
		}
	}
	var auth *string
	{
		if stationNoteStationAuth != "" {
			auth = &stationNoteStationAuth
		}
	}
	v := &stationnote.StationPayload{}
	v.StationID = stationID
	v.Auth = auth

	return v, nil
}

// BuildAddNotePayload builds the payload for the station_note add note
// endpoint from CLI flags.
func BuildAddNotePayload(stationNoteAddNoteBody string, stationNoteAddNoteStationID string, stationNoteAddNoteAuth string) (*stationnote.AddNotePayload, error) {
	var err error
	var body AddNoteRequestBody
	{
		err = json.Unmarshal([]byte(stationNoteAddNoteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"body\": \"Eos provident deleniti iste eos.\",\n      \"userId\": 1170499894\n   }'")
		}
	}
	var stationID int32
	{
		var v int64
		v, err = strconv.ParseInt(stationNoteAddNoteStationID, 10, 32)
		stationID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationID, must be INT32")
		}
	}
	var auth string
	{
		auth = stationNoteAddNoteAuth
	}
	v := &stationnote.AddNotePayload{
		UserID: body.UserID,
		Body:   body.Body,
	}
	v.StationID = stationID
	v.Auth = auth

	return v, nil
}

// BuildUpdateNotePayload builds the payload for the station_note update note
// endpoint from CLI flags.
func BuildUpdateNotePayload(stationNoteUpdateNoteBody string, stationNoteUpdateNoteStationID string, stationNoteUpdateNoteStationNoteID string, stationNoteUpdateNoteAuth string) (*stationnote.UpdateNotePayload, error) {
	var err error
	var body UpdateNoteRequestBody
	{
		err = json.Unmarshal([]byte(stationNoteUpdateNoteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"body\": \"Voluptas occaecati dolore quam asperiores dolorem.\"\n   }'")
		}
	}
	var stationID int32
	{
		var v int64
		v, err = strconv.ParseInt(stationNoteUpdateNoteStationID, 10, 32)
		stationID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationID, must be INT32")
		}
	}
	var stationNoteID int32
	{
		var v int64
		v, err = strconv.ParseInt(stationNoteUpdateNoteStationNoteID, 10, 32)
		stationNoteID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationNoteID, must be INT32")
		}
	}
	var auth string
	{
		auth = stationNoteUpdateNoteAuth
	}
	v := &stationnote.UpdateNotePayload{
		Body: body.Body,
	}
	v.StationID = stationID
	v.StationNoteID = stationNoteID
	v.Auth = auth

	return v, nil
}

// BuildDeleteNotePayload builds the payload for the station_note delete note
// endpoint from CLI flags.
func BuildDeleteNotePayload(stationNoteDeleteNoteStationID string, stationNoteDeleteNoteStationNoteID string, stationNoteDeleteNoteAuth string) (*stationnote.DeleteNotePayload, error) {
	var err error
	var stationID int32
	{
		var v int64
		v, err = strconv.ParseInt(stationNoteDeleteNoteStationID, 10, 32)
		stationID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationID, must be INT32")
		}
	}
	var stationNoteID int32
	{
		var v int64
		v, err = strconv.ParseInt(stationNoteDeleteNoteStationNoteID, 10, 32)
		stationNoteID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationNoteID, must be INT32")
		}
	}
	var auth string
	{
		auth = stationNoteDeleteNoteAuth
	}
	v := &stationnote.DeleteNotePayload{}
	v.StationID = stationID
	v.StationNoteID = stationNoteID
	v.Auth = auth

	return v, nil
}
