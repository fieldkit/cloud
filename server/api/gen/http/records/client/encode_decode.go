// Code generated by goa v3.2.4, DO NOT EDIT.
//
// records HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	records "github.com/fieldkit/cloud/server/api/gen/records"
	goahttp "goa.design/goa/v3/http"
)

// BuildDataRequest instantiates a HTTP request object with method and path set
// to call the "records" service "data" endpoint
func (c *Client) BuildDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		recordID int64
	)
	{
		p, ok := v.(*records.DataPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("records", "data", "*records.DataPayload", v)
		}
		if p.RecordID != nil {
			recordID = *p.RecordID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DataRecordsPath(recordID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("records", "data", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDataRequest returns an encoder for requests sent to the records data
// server.
func EncodeDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*records.DataPayload)
		if !ok {
			return goahttp.ErrInvalidType("records", "data", "*records.DataPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDataResponse returns a decoder for responses returned by the records
// data endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDataResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "data", err)
			}
			res := NewDataResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "data", err)
			}
			err = ValidateDataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "data", err)
			}
			return nil, NewDataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "data", err)
			}
			err = ValidateDataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "data", err)
			}
			return nil, NewDataForbidden(&body)
		case http.StatusNotFound:
			var (
				body DataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "data", err)
			}
			err = ValidateDataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "data", err)
			}
			return nil, NewDataNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "data", err)
			}
			err = ValidateDataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "data", err)
			}
			return nil, NewDataBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("records", "data", resp.StatusCode, string(body))
		}
	}
}

// BuildMetaRequest instantiates a HTTP request object with method and path set
// to call the "records" service "meta" endpoint
func (c *Client) BuildMetaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		recordID int64
	)
	{
		p, ok := v.(*records.MetaPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("records", "meta", "*records.MetaPayload", v)
		}
		if p.RecordID != nil {
			recordID = *p.RecordID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MetaRecordsPath(recordID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("records", "meta", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMetaRequest returns an encoder for requests sent to the records meta
// server.
func EncodeMetaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*records.MetaPayload)
		if !ok {
			return goahttp.ErrInvalidType("records", "meta", "*records.MetaPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeMetaResponse returns a decoder for responses returned by the records
// meta endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeMetaResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeMetaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "meta", err)
			}
			res := NewMetaResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body MetaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "meta", err)
			}
			err = ValidateMetaUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "meta", err)
			}
			return nil, NewMetaUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body MetaForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "meta", err)
			}
			err = ValidateMetaForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "meta", err)
			}
			return nil, NewMetaForbidden(&body)
		case http.StatusNotFound:
			var (
				body MetaNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "meta", err)
			}
			err = ValidateMetaNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "meta", err)
			}
			return nil, NewMetaNotFound(&body)
		case http.StatusBadRequest:
			var (
				body MetaBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "meta", err)
			}
			err = ValidateMetaBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "meta", err)
			}
			return nil, NewMetaBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("records", "meta", resp.StatusCode, string(body))
		}
	}
}

// BuildResolvedRequest instantiates a HTTP request object with method and path
// set to call the "records" service "resolved" endpoint
func (c *Client) BuildResolvedRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		recordID int64
	)
	{
		p, ok := v.(*records.ResolvedPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("records", "resolved", "*records.ResolvedPayload", v)
		}
		if p.RecordID != nil {
			recordID = *p.RecordID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResolvedRecordsPath(recordID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("records", "resolved", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResolvedRequest returns an encoder for requests sent to the records
// resolved server.
func EncodeResolvedRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*records.ResolvedPayload)
		if !ok {
			return goahttp.ErrInvalidType("records", "resolved", "*records.ResolvedPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeResolvedResponse returns a decoder for responses returned by the
// records resolved endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeResolvedResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeResolvedResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "resolved", err)
			}
			res := NewResolvedResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ResolvedUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "resolved", err)
			}
			err = ValidateResolvedUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "resolved", err)
			}
			return nil, NewResolvedUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ResolvedForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "resolved", err)
			}
			err = ValidateResolvedForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "resolved", err)
			}
			return nil, NewResolvedForbidden(&body)
		case http.StatusNotFound:
			var (
				body ResolvedNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "resolved", err)
			}
			err = ValidateResolvedNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "resolved", err)
			}
			return nil, NewResolvedNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ResolvedBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("records", "resolved", err)
			}
			err = ValidateResolvedBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("records", "resolved", err)
			}
			return nil, NewResolvedBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("records", "resolved", resp.StatusCode, string(body))
		}
	}
}
