// Code generated by goa v3.2.4, DO NOT EDIT.
//
// notes HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	notes "github.com/fieldkit/cloud/server/api/gen/notes"
	notesviews "github.com/fieldkit/cloud/server/api/gen/notes/views"
	goa "goa.design/goa/v3/pkg"
)

// UpdateRequestBody is the type of the "notes" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Notes *FieldNoteUpdateRequestBody `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
}

// UpdateResponseBody is the type of the "notes" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	Notes []*FieldNoteResponseBody `form:"notes" json:"notes" xml:"notes"`
	Media []*NoteMediaResponseBody `form:"media" json:"media" xml:"media"`
}

// GetResponseBody is the type of the "notes" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	Notes []*FieldNoteResponseBody `form:"notes" json:"notes" xml:"notes"`
	Media []*NoteMediaResponseBody `form:"media" json:"media" xml:"media"`
}

// UploadMediaResponseBody is the type of the "notes" service "upload media"
// endpoint HTTP response body.
type UploadMediaResponseBody struct {
	ID  int64  `form:"id" json:"id" xml:"id"`
	URL string `form:"url" json:"url" xml:"url"`
	Key string `form:"key" json:"key" xml:"key"`
}

// UpdateUnauthorizedResponseBody is the type of the "notes" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "notes" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "notes" service "update"
// endpoint HTTP response body for the "not-found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "notes" service "update"
// endpoint HTTP response body for the "bad-request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUnauthorizedResponseBody is the type of the "notes" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetForbiddenResponseBody is the type of the "notes" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "notes" service "get" endpoint
// HTTP response body for the "not-found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "notes" service "get" endpoint
// HTTP response body for the "bad-request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadMediaUnauthorizedResponseBody is the type of the "notes" service
// "download media" endpoint HTTP response body for the "unauthorized" error.
type DownloadMediaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadMediaForbiddenResponseBody is the type of the "notes" service
// "download media" endpoint HTTP response body for the "forbidden" error.
type DownloadMediaForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadMediaNotFoundResponseBody is the type of the "notes" service
// "download media" endpoint HTTP response body for the "not-found" error.
type DownloadMediaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadMediaBadRequestResponseBody is the type of the "notes" service
// "download media" endpoint HTTP response body for the "bad-request" error.
type DownloadMediaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadMediaUnauthorizedResponseBody is the type of the "notes" service
// "upload media" endpoint HTTP response body for the "unauthorized" error.
type UploadMediaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadMediaForbiddenResponseBody is the type of the "notes" service "upload
// media" endpoint HTTP response body for the "forbidden" error.
type UploadMediaForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadMediaNotFoundResponseBody is the type of the "notes" service "upload
// media" endpoint HTTP response body for the "not-found" error.
type UploadMediaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadMediaBadRequestResponseBody is the type of the "notes" service "upload
// media" endpoint HTTP response body for the "bad-request" error.
type UploadMediaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FieldNoteResponseBody is used to define fields on response body types.
type FieldNoteResponseBody struct {
	ID        int64                        `form:"id" json:"id" xml:"id"`
	CreatedAt int64                        `form:"createdAt" json:"createdAt" xml:"createdAt"`
	UpdatedAt int64                        `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Author    *FieldNoteAuthorResponseBody `form:"author" json:"author" xml:"author"`
	Key       *string                      `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	Body      *string                      `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	Version   int64                        `form:"version" json:"version" xml:"version"`
	Media     []*NoteMediaResponseBody     `form:"media" json:"media" xml:"media"`
}

// FieldNoteAuthorResponseBody is used to define fields on response body types.
type FieldNoteAuthorResponseBody struct {
	ID       int32  `form:"id" json:"id" xml:"id"`
	Name     string `form:"name" json:"name" xml:"name"`
	MediaURL string `form:"mediaUrl" json:"mediaUrl" xml:"mediaUrl"`
}

// NoteMediaResponseBody is used to define fields on response body types.
type NoteMediaResponseBody struct {
	ID          int64  `form:"id" json:"id" xml:"id"`
	URL         string `form:"url" json:"url" xml:"url"`
	Key         string `form:"key" json:"key" xml:"key"`
	ContentType string `form:"contentType" json:"contentType" xml:"contentType"`
}

// FieldNoteUpdateRequestBody is used to define fields on request body types.
type FieldNoteUpdateRequestBody struct {
	Notes    []*ExistingFieldNoteRequestBody `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	Creating []*NewFieldNoteRequestBody      `form:"creating,omitempty" json:"creating,omitempty" xml:"creating,omitempty"`
}

// ExistingFieldNoteRequestBody is used to define fields on request body types.
type ExistingFieldNoteRequestBody struct {
	ID       *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Key      *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	Body     *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	MediaIds []int64 `form:"mediaIds,omitempty" json:"mediaIds,omitempty" xml:"mediaIds,omitempty"`
}

// NewFieldNoteRequestBody is used to define fields on request body types.
type NewFieldNoteRequestBody struct {
	Key      *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	Body     *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	MediaIds []int64 `form:"mediaIds,omitempty" json:"mediaIds,omitempty" xml:"mediaIds,omitempty"`
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "notes" service.
func NewUpdateResponseBody(res *notesviews.FieldNotesView) *UpdateResponseBody {
	body := &UpdateResponseBody{}
	if res.Notes != nil {
		body.Notes = make([]*FieldNoteResponseBody, len(res.Notes))
		for i, val := range res.Notes {
			body.Notes[i] = marshalNotesviewsFieldNoteViewToFieldNoteResponseBody(val)
		}
	}
	if res.Media != nil {
		body.Media = make([]*NoteMediaResponseBody, len(res.Media))
		for i, val := range res.Media {
			body.Media[i] = marshalNotesviewsNoteMediaViewToNoteMediaResponseBody(val)
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "notes" service.
func NewGetResponseBody(res *notesviews.FieldNotesView) *GetResponseBody {
	body := &GetResponseBody{}
	if res.Notes != nil {
		body.Notes = make([]*FieldNoteResponseBody, len(res.Notes))
		for i, val := range res.Notes {
			body.Notes[i] = marshalNotesviewsFieldNoteViewToFieldNoteResponseBody(val)
		}
	}
	if res.Media != nil {
		body.Media = make([]*NoteMediaResponseBody, len(res.Media))
		for i, val := range res.Media {
			body.Media[i] = marshalNotesviewsNoteMediaViewToNoteMediaResponseBody(val)
		}
	}
	return body
}

// NewUploadMediaResponseBody builds the HTTP response body from the result of
// the "upload media" endpoint of the "notes" service.
func NewUploadMediaResponseBody(res *notesviews.NoteMediaView) *UploadMediaResponseBody {
	body := &UploadMediaResponseBody{
		ID:  *res.ID,
		URL: *res.URL,
		Key: *res.Key,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "notes" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "notes" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "notes" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "notes" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "notes" service.
func NewGetUnauthorizedResponseBody(res *goa.ServiceError) *GetUnauthorizedResponseBody {
	body := &GetUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "notes" service.
func NewGetForbiddenResponseBody(res *goa.ServiceError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "notes" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "notes" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadMediaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "download media" endpoint of the "notes" service.
func NewDownloadMediaUnauthorizedResponseBody(res *goa.ServiceError) *DownloadMediaUnauthorizedResponseBody {
	body := &DownloadMediaUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadMediaForbiddenResponseBody builds the HTTP response body from the
// result of the "download media" endpoint of the "notes" service.
func NewDownloadMediaForbiddenResponseBody(res *goa.ServiceError) *DownloadMediaForbiddenResponseBody {
	body := &DownloadMediaForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadMediaNotFoundResponseBody builds the HTTP response body from the
// result of the "download media" endpoint of the "notes" service.
func NewDownloadMediaNotFoundResponseBody(res *goa.ServiceError) *DownloadMediaNotFoundResponseBody {
	body := &DownloadMediaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadMediaBadRequestResponseBody builds the HTTP response body from
// the result of the "download media" endpoint of the "notes" service.
func NewDownloadMediaBadRequestResponseBody(res *goa.ServiceError) *DownloadMediaBadRequestResponseBody {
	body := &DownloadMediaBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadMediaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "upload media" endpoint of the "notes" service.
func NewUploadMediaUnauthorizedResponseBody(res *goa.ServiceError) *UploadMediaUnauthorizedResponseBody {
	body := &UploadMediaUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadMediaForbiddenResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "notes" service.
func NewUploadMediaForbiddenResponseBody(res *goa.ServiceError) *UploadMediaForbiddenResponseBody {
	body := &UploadMediaForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadMediaNotFoundResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "notes" service.
func NewUploadMediaNotFoundResponseBody(res *goa.ServiceError) *UploadMediaNotFoundResponseBody {
	body := &UploadMediaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadMediaBadRequestResponseBody builds the HTTP response body from the
// result of the "upload media" endpoint of the "notes" service.
func NewUploadMediaBadRequestResponseBody(res *goa.ServiceError) *UploadMediaBadRequestResponseBody {
	body := &UploadMediaBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePayload builds a notes service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, stationID int32, auth string) *notes.UpdatePayload {
	v := &notes.UpdatePayload{}
	v.Notes = unmarshalFieldNoteUpdateRequestBodyToNotesFieldNoteUpdate(body.Notes)
	v.StationID = stationID
	v.Auth = auth

	return v
}

// NewGetPayload builds a notes service get endpoint payload.
func NewGetPayload(stationID int32, auth string) *notes.GetPayload {
	v := &notes.GetPayload{}
	v.StationID = stationID
	v.Auth = auth

	return v
}

// NewDownloadMediaPayload builds a notes service download media endpoint
// payload.
func NewDownloadMediaPayload(mediaID int32, auth string) *notes.DownloadMediaPayload {
	v := &notes.DownloadMediaPayload{}
	v.MediaID = mediaID
	v.Auth = auth

	return v
}

// NewUploadMediaPayload builds a notes service upload media endpoint payload.
func NewUploadMediaPayload(stationID int32, key string, contentType string, contentLength int64, auth string) *notes.UploadMediaPayload {
	v := &notes.UploadMediaPayload{}
	v.StationID = stationID
	v.Key = key
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.Auth = auth

	return v
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Notes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("notes", "body"))
	}
	if body.Notes != nil {
		if err2 := ValidateFieldNoteUpdateRequestBody(body.Notes); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFieldNoteUpdateRequestBody runs the validations defined on
// FieldNoteUpdateRequestBody
func ValidateFieldNoteUpdateRequestBody(body *FieldNoteUpdateRequestBody) (err error) {
	if body.Notes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("notes", "body"))
	}
	if body.Creating == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("creating", "body"))
	}
	for _, e := range body.Notes {
		if e != nil {
			if err2 := ValidateExistingFieldNoteRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateExistingFieldNoteRequestBody runs the validations defined on
// ExistingFieldNoteRequestBody
func ValidateExistingFieldNoteRequestBody(body *ExistingFieldNoteRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	return
}
