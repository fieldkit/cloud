// Code generated by goa v3.2.4, DO NOT EDIT.
//
// oidc HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"fmt"
	"strconv"

	oidc "github.com/fieldkit/cloud/server/api/gen/oidc"
)

// BuildRequiredPayload builds the payload for the oidc required endpoint from
// CLI flags.
func BuildRequiredPayload(oidcRequiredAfter string, oidcRequiredFollow string, oidcRequiredToken string) (*oidc.RequiredPayload, error) {
	var err error
	var after *string
	{
		if oidcRequiredAfter != "" {
			after = &oidcRequiredAfter
		}
	}
	var follow *bool
	{
		if oidcRequiredFollow != "" {
			var val bool
			val, err = strconv.ParseBool(oidcRequiredFollow)
			follow = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for follow, must be BOOL")
			}
		}
	}
	var token *string
	{
		if oidcRequiredToken != "" {
			token = &oidcRequiredToken
		}
	}
	v := &oidc.RequiredPayload{}
	v.After = after
	v.Follow = follow
	v.Token = token

	return v, nil
}

// BuildURLPayload builds the payload for the oidc url endpoint from CLI flags.
func BuildURLPayload(oidcURLAfter string, oidcURLFollow string, oidcURLToken string) (*oidc.URLPayload, error) {
	var err error
	var after *string
	{
		if oidcURLAfter != "" {
			after = &oidcURLAfter
		}
	}
	var follow *bool
	{
		if oidcURLFollow != "" {
			var val bool
			val, err = strconv.ParseBool(oidcURLFollow)
			follow = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for follow, must be BOOL")
			}
		}
	}
	var token *string
	{
		if oidcURLToken != "" {
			token = &oidcURLToken
		}
	}
	v := &oidc.URLPayload{}
	v.After = after
	v.Follow = follow
	v.Token = token

	return v, nil
}

// BuildAuthenticatePayload builds the payload for the oidc authenticate
// endpoint from CLI flags.
func BuildAuthenticatePayload(oidcAuthenticateState string, oidcAuthenticateSessionState string, oidcAuthenticateCode string) (*oidc.AuthenticatePayload, error) {
	var state string
	{
		state = oidcAuthenticateState
	}
	var sessionState string
	{
		sessionState = oidcAuthenticateSessionState
	}
	var code string
	{
		code = oidcAuthenticateCode
	}
	v := &oidc.AuthenticatePayload{}
	v.State = state
	v.SessionState = sessionState
	v.Code = code

	return v, nil
}
