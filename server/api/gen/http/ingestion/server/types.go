// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ingestion HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	ingestion "github.com/fieldkit/cloud/server/api/gen/ingestion"
	goa "goa.design/goa/v3/pkg"
)

// ProcessPendingUnauthorizedResponseBody is the type of the "ingestion"
// service "process pending" endpoint HTTP response body for the "unauthorized"
// error.
type ProcessPendingUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessPendingForbiddenResponseBody is the type of the "ingestion" service
// "process pending" endpoint HTTP response body for the "forbidden" error.
type ProcessPendingForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessPendingNotFoundResponseBody is the type of the "ingestion" service
// "process pending" endpoint HTTP response body for the "not-found" error.
type ProcessPendingNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessPendingBadRequestResponseBody is the type of the "ingestion" service
// "process pending" endpoint HTTP response body for the "bad-request" error.
type ProcessPendingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WalkEverythingUnauthorizedResponseBody is the type of the "ingestion"
// service "walk everything" endpoint HTTP response body for the "unauthorized"
// error.
type WalkEverythingUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WalkEverythingForbiddenResponseBody is the type of the "ingestion" service
// "walk everything" endpoint HTTP response body for the "forbidden" error.
type WalkEverythingForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WalkEverythingNotFoundResponseBody is the type of the "ingestion" service
// "walk everything" endpoint HTTP response body for the "not-found" error.
type WalkEverythingNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WalkEverythingBadRequestResponseBody is the type of the "ingestion" service
// "walk everything" endpoint HTTP response body for the "bad-request" error.
type WalkEverythingBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessStationUnauthorizedResponseBody is the type of the "ingestion"
// service "process station" endpoint HTTP response body for the "unauthorized"
// error.
type ProcessStationUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessStationForbiddenResponseBody is the type of the "ingestion" service
// "process station" endpoint HTTP response body for the "forbidden" error.
type ProcessStationForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessStationNotFoundResponseBody is the type of the "ingestion" service
// "process station" endpoint HTTP response body for the "not-found" error.
type ProcessStationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessStationBadRequestResponseBody is the type of the "ingestion" service
// "process station" endpoint HTTP response body for the "bad-request" error.
type ProcessStationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessIngestionUnauthorizedResponseBody is the type of the "ingestion"
// service "process ingestion" endpoint HTTP response body for the
// "unauthorized" error.
type ProcessIngestionUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessIngestionForbiddenResponseBody is the type of the "ingestion" service
// "process ingestion" endpoint HTTP response body for the "forbidden" error.
type ProcessIngestionForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessIngestionNotFoundResponseBody is the type of the "ingestion" service
// "process ingestion" endpoint HTTP response body for the "not-found" error.
type ProcessIngestionNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProcessIngestionBadRequestResponseBody is the type of the "ingestion"
// service "process ingestion" endpoint HTTP response body for the
// "bad-request" error.
type ProcessIngestionBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "ingestion" service
// "delete" endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "ingestion" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "ingestion" service "delete"
// endpoint HTTP response body for the "not-found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "ingestion" service "delete"
// endpoint HTTP response body for the "bad-request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewProcessPendingUnauthorizedResponseBody builds the HTTP response body from
// the result of the "process pending" endpoint of the "ingestion" service.
func NewProcessPendingUnauthorizedResponseBody(res *goa.ServiceError) *ProcessPendingUnauthorizedResponseBody {
	body := &ProcessPendingUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessPendingForbiddenResponseBody builds the HTTP response body from
// the result of the "process pending" endpoint of the "ingestion" service.
func NewProcessPendingForbiddenResponseBody(res *goa.ServiceError) *ProcessPendingForbiddenResponseBody {
	body := &ProcessPendingForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessPendingNotFoundResponseBody builds the HTTP response body from the
// result of the "process pending" endpoint of the "ingestion" service.
func NewProcessPendingNotFoundResponseBody(res *goa.ServiceError) *ProcessPendingNotFoundResponseBody {
	body := &ProcessPendingNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessPendingBadRequestResponseBody builds the HTTP response body from
// the result of the "process pending" endpoint of the "ingestion" service.
func NewProcessPendingBadRequestResponseBody(res *goa.ServiceError) *ProcessPendingBadRequestResponseBody {
	body := &ProcessPendingBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWalkEverythingUnauthorizedResponseBody builds the HTTP response body from
// the result of the "walk everything" endpoint of the "ingestion" service.
func NewWalkEverythingUnauthorizedResponseBody(res *goa.ServiceError) *WalkEverythingUnauthorizedResponseBody {
	body := &WalkEverythingUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWalkEverythingForbiddenResponseBody builds the HTTP response body from
// the result of the "walk everything" endpoint of the "ingestion" service.
func NewWalkEverythingForbiddenResponseBody(res *goa.ServiceError) *WalkEverythingForbiddenResponseBody {
	body := &WalkEverythingForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWalkEverythingNotFoundResponseBody builds the HTTP response body from the
// result of the "walk everything" endpoint of the "ingestion" service.
func NewWalkEverythingNotFoundResponseBody(res *goa.ServiceError) *WalkEverythingNotFoundResponseBody {
	body := &WalkEverythingNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWalkEverythingBadRequestResponseBody builds the HTTP response body from
// the result of the "walk everything" endpoint of the "ingestion" service.
func NewWalkEverythingBadRequestResponseBody(res *goa.ServiceError) *WalkEverythingBadRequestResponseBody {
	body := &WalkEverythingBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessStationUnauthorizedResponseBody builds the HTTP response body from
// the result of the "process station" endpoint of the "ingestion" service.
func NewProcessStationUnauthorizedResponseBody(res *goa.ServiceError) *ProcessStationUnauthorizedResponseBody {
	body := &ProcessStationUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessStationForbiddenResponseBody builds the HTTP response body from
// the result of the "process station" endpoint of the "ingestion" service.
func NewProcessStationForbiddenResponseBody(res *goa.ServiceError) *ProcessStationForbiddenResponseBody {
	body := &ProcessStationForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessStationNotFoundResponseBody builds the HTTP response body from the
// result of the "process station" endpoint of the "ingestion" service.
func NewProcessStationNotFoundResponseBody(res *goa.ServiceError) *ProcessStationNotFoundResponseBody {
	body := &ProcessStationNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessStationBadRequestResponseBody builds the HTTP response body from
// the result of the "process station" endpoint of the "ingestion" service.
func NewProcessStationBadRequestResponseBody(res *goa.ServiceError) *ProcessStationBadRequestResponseBody {
	body := &ProcessStationBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessIngestionUnauthorizedResponseBody builds the HTTP response body
// from the result of the "process ingestion" endpoint of the "ingestion"
// service.
func NewProcessIngestionUnauthorizedResponseBody(res *goa.ServiceError) *ProcessIngestionUnauthorizedResponseBody {
	body := &ProcessIngestionUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessIngestionForbiddenResponseBody builds the HTTP response body from
// the result of the "process ingestion" endpoint of the "ingestion" service.
func NewProcessIngestionForbiddenResponseBody(res *goa.ServiceError) *ProcessIngestionForbiddenResponseBody {
	body := &ProcessIngestionForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessIngestionNotFoundResponseBody builds the HTTP response body from
// the result of the "process ingestion" endpoint of the "ingestion" service.
func NewProcessIngestionNotFoundResponseBody(res *goa.ServiceError) *ProcessIngestionNotFoundResponseBody {
	body := &ProcessIngestionNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessIngestionBadRequestResponseBody builds the HTTP response body from
// the result of the "process ingestion" endpoint of the "ingestion" service.
func NewProcessIngestionBadRequestResponseBody(res *goa.ServiceError) *ProcessIngestionBadRequestResponseBody {
	body := &ProcessIngestionBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "ingestion" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "ingestion" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "ingestion" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "ingestion" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProcessPendingPayload builds a ingestion service process pending endpoint
// payload.
func NewProcessPendingPayload(auth string) *ingestion.ProcessPendingPayload {
	v := &ingestion.ProcessPendingPayload{}
	v.Auth = auth

	return v
}

// NewWalkEverythingPayload builds a ingestion service walk everything endpoint
// payload.
func NewWalkEverythingPayload(auth string) *ingestion.WalkEverythingPayload {
	v := &ingestion.WalkEverythingPayload{}
	v.Auth = auth

	return v
}

// NewProcessStationPayload builds a ingestion service process station endpoint
// payload.
func NewProcessStationPayload(stationID int32, completely *bool, auth string) *ingestion.ProcessStationPayload {
	v := &ingestion.ProcessStationPayload{}
	v.StationID = stationID
	v.Completely = completely
	v.Auth = auth

	return v
}

// NewProcessIngestionPayload builds a ingestion service process ingestion
// endpoint payload.
func NewProcessIngestionPayload(ingestionID int64, auth string) *ingestion.ProcessIngestionPayload {
	v := &ingestion.ProcessIngestionPayload{}
	v.IngestionID = ingestionID
	v.Auth = auth

	return v
}

// NewDeletePayload builds a ingestion service delete endpoint payload.
func NewDeletePayload(ingestionID int64, auth string) *ingestion.DeletePayload {
	v := &ingestion.DeletePayload{}
	v.IngestionID = ingestionID
	v.Auth = auth

	return v
}
