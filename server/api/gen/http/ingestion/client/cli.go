// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ingestion HTTP client CLI support package
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"fmt"
	"strconv"

	ingestion "github.com/fieldkit/cloud/server/api/gen/ingestion"
)

// BuildProcessPendingPayload builds the payload for the ingestion process
// pending endpoint from CLI flags.
func BuildProcessPendingPayload(ingestionProcessPendingAuth string) (*ingestion.ProcessPendingPayload, error) {
	var auth string
	{
		auth = ingestionProcessPendingAuth
	}
	v := &ingestion.ProcessPendingPayload{}
	v.Auth = auth

	return v, nil
}

// BuildWalkEverythingPayload builds the payload for the ingestion walk
// everything endpoint from CLI flags.
func BuildWalkEverythingPayload(ingestionWalkEverythingAuth string) (*ingestion.WalkEverythingPayload, error) {
	var auth string
	{
		auth = ingestionWalkEverythingAuth
	}
	v := &ingestion.WalkEverythingPayload{}
	v.Auth = auth

	return v, nil
}

// BuildProcessStationPayload builds the payload for the ingestion process
// station endpoint from CLI flags.
func BuildProcessStationPayload(ingestionProcessStationStationID string, ingestionProcessStationCompletely string, ingestionProcessStationAuth string) (*ingestion.ProcessStationPayload, error) {
	var err error
	var stationID int32
	{
		var v int64
		v, err = strconv.ParseInt(ingestionProcessStationStationID, 10, 32)
		stationID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for stationID, must be INT32")
		}
	}
	var completely *bool
	{
		if ingestionProcessStationCompletely != "" {
			var val bool
			val, err = strconv.ParseBool(ingestionProcessStationCompletely)
			completely = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for completely, must be BOOL")
			}
		}
	}
	var auth string
	{
		auth = ingestionProcessStationAuth
	}
	v := &ingestion.ProcessStationPayload{}
	v.StationID = stationID
	v.Completely = completely
	v.Auth = auth

	return v, nil
}

// BuildProcessIngestionPayload builds the payload for the ingestion process
// ingestion endpoint from CLI flags.
func BuildProcessIngestionPayload(ingestionProcessIngestionIngestionID string, ingestionProcessIngestionAuth string) (*ingestion.ProcessIngestionPayload, error) {
	var err error
	var ingestionID int64
	{
		ingestionID, err = strconv.ParseInt(ingestionProcessIngestionIngestionID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for ingestionID, must be INT64")
		}
	}
	var auth string
	{
		auth = ingestionProcessIngestionAuth
	}
	v := &ingestion.ProcessIngestionPayload{}
	v.IngestionID = ingestionID
	v.Auth = auth

	return v, nil
}

// BuildDeletePayload builds the payload for the ingestion delete endpoint from
// CLI flags.
func BuildDeletePayload(ingestionDeleteIngestionID string, ingestionDeleteAuth string) (*ingestion.DeletePayload, error) {
	var err error
	var ingestionID int64
	{
		ingestionID, err = strconv.ParseInt(ingestionDeleteIngestionID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for ingestionID, must be INT64")
		}
	}
	var auth string
	{
		auth = ingestionDeleteAuth
	}
	v := &ingestion.DeletePayload{}
	v.IngestionID = ingestionID
	v.Auth = auth

	return v, nil
}
