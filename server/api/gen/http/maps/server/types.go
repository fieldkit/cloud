// Code generated by goa v3.2.4, DO NOT EDIT.
//
// maps HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	maps "github.com/fieldkit/cloud/server/api/gen/maps"
	mapsviews "github.com/fieldkit/cloud/server/api/gen/maps/views"
	goa "goa.design/goa/v3/pkg"
)

// CoverageResponseBody is the type of the "maps" service "coverage" endpoint
// HTTP response body.
type CoverageResponseBody struct {
	Features []*MapGeoJSONResponseBody `form:"features" json:"features" xml:"features"`
}

// CoverageForbiddenResponseBody is the type of the "maps" service "coverage"
// endpoint HTTP response body for the "forbidden" error.
type CoverageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CoverageNotFoundResponseBody is the type of the "maps" service "coverage"
// endpoint HTTP response body for the "not-found" error.
type CoverageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CoverageBadRequestResponseBody is the type of the "maps" service "coverage"
// endpoint HTTP response body for the "bad-request" error.
type CoverageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CoverageUnauthorizedResponseBody is the type of the "maps" service
// "coverage" endpoint HTTP response body for the "unauthorized" error.
type CoverageUnauthorizedResponseBody string

// MapGeoJSONResponseBody is used to define fields on response body types.
type MapGeoJSONResponseBody struct {
	Type       string                   `form:"type" json:"type" xml:"type"`
	Geometry   *MapGeometryResponseBody `form:"geometry" json:"geometry" xml:"geometry"`
	Properties map[string]string        `form:"properties" json:"properties" xml:"properties"`
}

// MapGeometryResponseBody is used to define fields on response body types.
type MapGeometryResponseBody struct {
	Type        string    `form:"type" json:"type" xml:"type"`
	Coordinates []float64 `form:"coordinates" json:"coordinates" xml:"coordinates"`
}

// NewCoverageResponseBody builds the HTTP response body from the result of the
// "coverage" endpoint of the "maps" service.
func NewCoverageResponseBody(res *mapsviews.MapView) *CoverageResponseBody {
	body := &CoverageResponseBody{}
	if res.Features != nil {
		body.Features = make([]*MapGeoJSONResponseBody, len(res.Features))
		for i, val := range res.Features {
			body.Features[i] = marshalMapsviewsMapGeoJSONViewToMapGeoJSONResponseBody(val)
		}
	}
	return body
}

// NewCoverageForbiddenResponseBody builds the HTTP response body from the
// result of the "coverage" endpoint of the "maps" service.
func NewCoverageForbiddenResponseBody(res *goa.ServiceError) *CoverageForbiddenResponseBody {
	body := &CoverageForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCoverageNotFoundResponseBody builds the HTTP response body from the
// result of the "coverage" endpoint of the "maps" service.
func NewCoverageNotFoundResponseBody(res *goa.ServiceError) *CoverageNotFoundResponseBody {
	body := &CoverageNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCoverageBadRequestResponseBody builds the HTTP response body from the
// result of the "coverage" endpoint of the "maps" service.
func NewCoverageBadRequestResponseBody(res *goa.ServiceError) *CoverageBadRequestResponseBody {
	body := &CoverageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCoverageUnauthorizedResponseBody builds the HTTP response body from the
// result of the "coverage" endpoint of the "maps" service.
func NewCoverageUnauthorizedResponseBody(res maps.Unauthorized) CoverageUnauthorizedResponseBody {
	body := CoverageUnauthorizedResponseBody(res)
	return body
}
