// Code generated by goa v3.2.4, DO NOT EDIT.
//
// maps HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	maps "github.com/fieldkit/cloud/server/api/gen/maps"
	mapsviews "github.com/fieldkit/cloud/server/api/gen/maps/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCoverageRequest instantiates a HTTP request object with method and path
// set to call the "maps" service "coverage" endpoint
func (c *Client) BuildCoverageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CoverageMapsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("maps", "coverage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCoverageResponse returns a decoder for responses returned by the maps
// coverage endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCoverageResponse may return the following errors:
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "not-found" (type *goa.ServiceError): http.StatusNotFound
//   - "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthorized" (type maps.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCoverageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CoverageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("maps", "coverage", err)
			}
			p := NewCoverageMapOK(&body)
			view := "default"
			vres := &mapsviews.Map{Projected: p, View: view}
			if err = mapsviews.ValidateMap(vres); err != nil {
				return nil, goahttp.ErrValidationError("maps", "coverage", err)
			}
			res := maps.NewMap(vres)
			return res, nil
		case http.StatusForbidden:
			var (
				body CoverageForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("maps", "coverage", err)
			}
			err = ValidateCoverageForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("maps", "coverage", err)
			}
			return nil, NewCoverageForbidden(&body)
		case http.StatusNotFound:
			var (
				body CoverageNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("maps", "coverage", err)
			}
			err = ValidateCoverageNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("maps", "coverage", err)
			}
			return nil, NewCoverageNotFound(&body)
		case http.StatusBadRequest:
			var (
				body CoverageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("maps", "coverage", err)
			}
			err = ValidateCoverageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("maps", "coverage", err)
			}
			return nil, NewCoverageBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body CoverageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("maps", "coverage", err)
			}
			return nil, NewCoverageUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("maps", "coverage", resp.StatusCode, string(body))
		}
	}
}

// unmarshalMapGeoJSONResponseBodyToMapsviewsMapGeoJSONView builds a value of
// type *mapsviews.MapGeoJSONView from a value of type *MapGeoJSONResponseBody.
func unmarshalMapGeoJSONResponseBodyToMapsviewsMapGeoJSONView(v *MapGeoJSONResponseBody) *mapsviews.MapGeoJSONView {
	res := &mapsviews.MapGeoJSONView{
		Type: v.Type,
	}
	res.Geometry = unmarshalMapGeometryResponseBodyToMapsviewsMapGeometryView(v.Geometry)
	res.Properties = make(map[string]string, len(v.Properties))
	for key, val := range v.Properties {
		tk := key
		tv := val
		res.Properties[tk] = tv
	}

	return res
}

// unmarshalMapGeometryResponseBodyToMapsviewsMapGeometryView builds a value of
// type *mapsviews.MapGeometryView from a value of type
// *MapGeometryResponseBody.
func unmarshalMapGeometryResponseBodyToMapsviewsMapGeometryView(v *MapGeometryResponseBody) *mapsviews.MapGeometryView {
	res := &mapsviews.MapGeometryView{
		Type: v.Type,
	}
	res.Coordinates = make([]float64, len(v.Coordinates))
	for i, val := range v.Coordinates {
		res.Coordinates[i] = val
	}

	return res
}
