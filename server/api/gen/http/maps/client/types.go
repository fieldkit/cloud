// Code generated by goa v3.2.4, DO NOT EDIT.
//
// maps HTTP client types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	maps "github.com/fieldkit/cloud/server/api/gen/maps"
	mapsviews "github.com/fieldkit/cloud/server/api/gen/maps/views"
	goa "goa.design/goa/v3/pkg"
)

// CoverageResponseBody is the type of the "maps" service "coverage" endpoint
// HTTP response body.
type CoverageResponseBody struct {
	Features []*MapGeoJSONResponseBody `form:"features,omitempty" json:"features,omitempty" xml:"features,omitempty"`
}

// CoverageForbiddenResponseBody is the type of the "maps" service "coverage"
// endpoint HTTP response body for the "forbidden" error.
type CoverageForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CoverageNotFoundResponseBody is the type of the "maps" service "coverage"
// endpoint HTTP response body for the "not-found" error.
type CoverageNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CoverageBadRequestResponseBody is the type of the "maps" service "coverage"
// endpoint HTTP response body for the "bad-request" error.
type CoverageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CoverageUnauthorizedResponseBody is the type of the "maps" service
// "coverage" endpoint HTTP response body for the "unauthorized" error.
type CoverageUnauthorizedResponseBody string

// MapGeoJSONResponseBody is used to define fields on response body types.
type MapGeoJSONResponseBody struct {
	Type       *string                  `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Geometry   *MapGeometryResponseBody `form:"geometry,omitempty" json:"geometry,omitempty" xml:"geometry,omitempty"`
	Properties map[string]string        `form:"properties,omitempty" json:"properties,omitempty" xml:"properties,omitempty"`
}

// MapGeometryResponseBody is used to define fields on response body types.
type MapGeometryResponseBody struct {
	Type        *string   `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	Coordinates []float64 `form:"coordinates,omitempty" json:"coordinates,omitempty" xml:"coordinates,omitempty"`
}

// NewCoverageMapOK builds a "maps" service "coverage" endpoint result from a
// HTTP "OK" response.
func NewCoverageMapOK(body *CoverageResponseBody) *mapsviews.MapView {
	v := &mapsviews.MapView{}
	v.Features = make([]*mapsviews.MapGeoJSONView, len(body.Features))
	for i, val := range body.Features {
		v.Features[i] = unmarshalMapGeoJSONResponseBodyToMapsviewsMapGeoJSONView(val)
	}

	return v
}

// NewCoverageForbidden builds a maps service coverage endpoint forbidden error.
func NewCoverageForbidden(body *CoverageForbiddenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCoverageNotFound builds a maps service coverage endpoint not-found error.
func NewCoverageNotFound(body *CoverageNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCoverageBadRequest builds a maps service coverage endpoint bad-request
// error.
func NewCoverageBadRequest(body *CoverageBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCoverageUnauthorized builds a maps service coverage endpoint unauthorized
// error.
func NewCoverageUnauthorized(body CoverageUnauthorizedResponseBody) maps.Unauthorized {
	v := maps.Unauthorized(body)
	return v
}

// ValidateCoverageForbiddenResponseBody runs the validations defined on
// coverage_forbidden_response_body
func ValidateCoverageForbiddenResponseBody(body *CoverageForbiddenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCoverageNotFoundResponseBody runs the validations defined on
// coverage_not-found_response_body
func ValidateCoverageNotFoundResponseBody(body *CoverageNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCoverageBadRequestResponseBody runs the validations defined on
// coverage_bad-request_response_body
func ValidateCoverageBadRequestResponseBody(body *CoverageBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMapGeoJSONResponseBody runs the validations defined on
// MapGeoJsonResponseBody
func ValidateMapGeoJSONResponseBody(body *MapGeoJSONResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Geometry == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("geometry", "body"))
	}
	if body.Properties == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("properties", "body"))
	}
	if body.Geometry != nil {
		if err2 := ValidateMapGeometryResponseBody(body.Geometry); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMapGeometryResponseBody runs the validations defined on
// MapGeometryResponseBody
func ValidateMapGeometryResponseBody(body *MapGeometryResponseBody) (err error) {
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Coordinates == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("coordinates", "body"))
	}
	return
}
