// Code generated by goa v3.2.4, DO NOT EDIT.
//
// test HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	test "github.com/fieldkit/cloud/server/api/gen/test"
	goa "goa.design/goa/v3/pkg"
)

// GetForbiddenResponseBody is the type of the "test" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "test" service "get" endpoint
// HTTP response body for the "not-found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "test" service "get" endpoint
// HTTP response body for the "bad-request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUnauthorizedResponseBody is the type of the "test" service "get" endpoint
// HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody string

// ErrorForbiddenResponseBody is the type of the "test" service "error"
// endpoint HTTP response body for the "forbidden" error.
type ErrorForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ErrorNotFoundResponseBody is the type of the "test" service "error" endpoint
// HTTP response body for the "not-found" error.
type ErrorNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ErrorBadRequestResponseBody is the type of the "test" service "error"
// endpoint HTTP response body for the "bad-request" error.
type ErrorBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ErrorUnauthorizedResponseBody is the type of the "test" service "error"
// endpoint HTTP response body for the "unauthorized" error.
type ErrorUnauthorizedResponseBody string

// EmailForbiddenResponseBody is the type of the "test" service "email"
// endpoint HTTP response body for the "forbidden" error.
type EmailForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EmailNotFoundResponseBody is the type of the "test" service "email" endpoint
// HTTP response body for the "not-found" error.
type EmailNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EmailBadRequestResponseBody is the type of the "test" service "email"
// endpoint HTTP response body for the "bad-request" error.
type EmailBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EmailUnauthorizedResponseBody is the type of the "test" service "email"
// endpoint HTTP response body for the "unauthorized" error.
type EmailUnauthorizedResponseBody string

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "test" service.
func NewGetForbiddenResponseBody(res *goa.ServiceError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "test" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "test" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "test" service.
func NewGetUnauthorizedResponseBody(res test.Unauthorized) GetUnauthorizedResponseBody {
	body := GetUnauthorizedResponseBody(res)
	return body
}

// NewErrorForbiddenResponseBody builds the HTTP response body from the result
// of the "error" endpoint of the "test" service.
func NewErrorForbiddenResponseBody(res *goa.ServiceError) *ErrorForbiddenResponseBody {
	body := &ErrorForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewErrorNotFoundResponseBody builds the HTTP response body from the result
// of the "error" endpoint of the "test" service.
func NewErrorNotFoundResponseBody(res *goa.ServiceError) *ErrorNotFoundResponseBody {
	body := &ErrorNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewErrorBadRequestResponseBody builds the HTTP response body from the result
// of the "error" endpoint of the "test" service.
func NewErrorBadRequestResponseBody(res *goa.ServiceError) *ErrorBadRequestResponseBody {
	body := &ErrorBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewErrorUnauthorizedResponseBody builds the HTTP response body from the
// result of the "error" endpoint of the "test" service.
func NewErrorUnauthorizedResponseBody(res test.Unauthorized) ErrorUnauthorizedResponseBody {
	body := ErrorUnauthorizedResponseBody(res)
	return body
}

// NewEmailForbiddenResponseBody builds the HTTP response body from the result
// of the "email" endpoint of the "test" service.
func NewEmailForbiddenResponseBody(res *goa.ServiceError) *EmailForbiddenResponseBody {
	body := &EmailForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEmailNotFoundResponseBody builds the HTTP response body from the result
// of the "email" endpoint of the "test" service.
func NewEmailNotFoundResponseBody(res *goa.ServiceError) *EmailNotFoundResponseBody {
	body := &EmailNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEmailBadRequestResponseBody builds the HTTP response body from the result
// of the "email" endpoint of the "test" service.
func NewEmailBadRequestResponseBody(res *goa.ServiceError) *EmailBadRequestResponseBody {
	body := &EmailBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEmailUnauthorizedResponseBody builds the HTTP response body from the
// result of the "email" endpoint of the "test" service.
func NewEmailUnauthorizedResponseBody(res test.Unauthorized) EmailUnauthorizedResponseBody {
	body := EmailUnauthorizedResponseBody(res)
	return body
}

// NewGetPayload builds a test service get endpoint payload.
func NewGetPayload(id int64) *test.GetPayload {
	v := &test.GetPayload{}
	v.ID = &id

	return v
}

// NewEmailPayload builds a test service email endpoint payload.
func NewEmailPayload(address string, auth string) *test.EmailPayload {
	v := &test.EmailPayload{}
	v.Address = address
	v.Auth = auth

	return v
}
