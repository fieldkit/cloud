// Code generated by goa v3.2.4, DO NOT EDIT.
//
// export HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	export "github.com/fieldkit/cloud/server/api/gen/export"
	exportviews "github.com/fieldkit/cloud/server/api/gen/export/views"
	goa "goa.design/goa/v3/pkg"
)

// ListMineResponseBody is the type of the "export" service "list mine"
// endpoint HTTP response body.
type ListMineResponseBody struct {
	Exports []*ExportStatusResponseBody `form:"exports" json:"exports" xml:"exports"`
}

// StatusResponseBody is the type of the "export" service "status" endpoint
// HTTP response body.
type StatusResponseBody struct {
	ID          int64       `form:"id" json:"id" xml:"id"`
	Token       string      `form:"token" json:"token" xml:"token"`
	CreatedAt   int64       `form:"createdAt" json:"createdAt" xml:"createdAt"`
	CompletedAt *int64      `form:"completedAt,omitempty" json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	Format      string      `form:"format" json:"format" xml:"format"`
	Progress    float32     `form:"progress" json:"progress" xml:"progress"`
	Message     *string     `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	StatusURL   string      `form:"statusUrl" json:"statusUrl" xml:"statusUrl"`
	DownloadURL *string     `form:"downloadUrl,omitempty" json:"downloadUrl,omitempty" xml:"downloadUrl,omitempty"`
	Size        *int32      `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Args        interface{} `form:"args" json:"args" xml:"args"`
}

// ListMineUnauthorizedResponseBody is the type of the "export" service "list
// mine" endpoint HTTP response body for the "unauthorized" error.
type ListMineUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineForbiddenResponseBody is the type of the "export" service "list
// mine" endpoint HTTP response body for the "forbidden" error.
type ListMineForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineNotFoundResponseBody is the type of the "export" service "list mine"
// endpoint HTTP response body for the "not-found" error.
type ListMineNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineBadRequestResponseBody is the type of the "export" service "list
// mine" endpoint HTTP response body for the "bad-request" error.
type ListMineBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusUnauthorizedResponseBody is the type of the "export" service "status"
// endpoint HTTP response body for the "unauthorized" error.
type StatusUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusForbiddenResponseBody is the type of the "export" service "status"
// endpoint HTTP response body for the "forbidden" error.
type StatusForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusNotFoundResponseBody is the type of the "export" service "status"
// endpoint HTTP response body for the "not-found" error.
type StatusNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StatusBadRequestResponseBody is the type of the "export" service "status"
// endpoint HTTP response body for the "bad-request" error.
type StatusBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadUnauthorizedResponseBody is the type of the "export" service
// "download" endpoint HTTP response body for the "unauthorized" error.
type DownloadUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadForbiddenResponseBody is the type of the "export" service "download"
// endpoint HTTP response body for the "forbidden" error.
type DownloadForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadNotFoundResponseBody is the type of the "export" service "download"
// endpoint HTTP response body for the "not-found" error.
type DownloadNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadBadRequestResponseBody is the type of the "export" service
// "download" endpoint HTTP response body for the "bad-request" error.
type DownloadBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CsvUnauthorizedResponseBody is the type of the "export" service "csv"
// endpoint HTTP response body for the "unauthorized" error.
type CsvUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CsvForbiddenResponseBody is the type of the "export" service "csv" endpoint
// HTTP response body for the "forbidden" error.
type CsvForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CsvNotFoundResponseBody is the type of the "export" service "csv" endpoint
// HTTP response body for the "not-found" error.
type CsvNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CsvBadRequestResponseBody is the type of the "export" service "csv" endpoint
// HTTP response body for the "bad-request" error.
type CsvBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// JSONLinesUnauthorizedResponseBody is the type of the "export" service "json
// lines" endpoint HTTP response body for the "unauthorized" error.
type JSONLinesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// JSONLinesForbiddenResponseBody is the type of the "export" service "json
// lines" endpoint HTTP response body for the "forbidden" error.
type JSONLinesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// JSONLinesNotFoundResponseBody is the type of the "export" service "json
// lines" endpoint HTTP response body for the "not-found" error.
type JSONLinesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// JSONLinesBadRequestResponseBody is the type of the "export" service "json
// lines" endpoint HTTP response body for the "bad-request" error.
type JSONLinesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ExportStatusResponseBody is used to define fields on response body types.
type ExportStatusResponseBody struct {
	ID          int64       `form:"id" json:"id" xml:"id"`
	Token       string      `form:"token" json:"token" xml:"token"`
	CreatedAt   int64       `form:"createdAt" json:"createdAt" xml:"createdAt"`
	CompletedAt *int64      `form:"completedAt,omitempty" json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	Format      string      `form:"format" json:"format" xml:"format"`
	Progress    float32     `form:"progress" json:"progress" xml:"progress"`
	Message     *string     `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	StatusURL   string      `form:"statusUrl" json:"statusUrl" xml:"statusUrl"`
	DownloadURL *string     `form:"downloadUrl,omitempty" json:"downloadUrl,omitempty" xml:"downloadUrl,omitempty"`
	Size        *int32      `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	Args        interface{} `form:"args" json:"args" xml:"args"`
}

// NewListMineResponseBody builds the HTTP response body from the result of the
// "list mine" endpoint of the "export" service.
func NewListMineResponseBody(res *exportviews.UserExportsView) *ListMineResponseBody {
	body := &ListMineResponseBody{}
	if res.Exports != nil {
		body.Exports = make([]*ExportStatusResponseBody, len(res.Exports))
		for i, val := range res.Exports {
			body.Exports[i] = marshalExportviewsExportStatusViewToExportStatusResponseBody(val)
		}
	}
	return body
}

// NewStatusResponseBody builds the HTTP response body from the result of the
// "status" endpoint of the "export" service.
func NewStatusResponseBody(res *exportviews.ExportStatusView) *StatusResponseBody {
	body := &StatusResponseBody{
		ID:          *res.ID,
		Token:       *res.Token,
		CreatedAt:   *res.CreatedAt,
		CompletedAt: res.CompletedAt,
		Format:      *res.Format,
		Progress:    *res.Progress,
		Message:     res.Message,
		StatusURL:   *res.StatusURL,
		DownloadURL: res.DownloadURL,
		Size:        res.Size,
		Args:        res.Args,
	}
	return body
}

// NewListMineUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "export" service.
func NewListMineUnauthorizedResponseBody(res *goa.ServiceError) *ListMineUnauthorizedResponseBody {
	body := &ListMineUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineForbiddenResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "export" service.
func NewListMineForbiddenResponseBody(res *goa.ServiceError) *ListMineForbiddenResponseBody {
	body := &ListMineForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineNotFoundResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "export" service.
func NewListMineNotFoundResponseBody(res *goa.ServiceError) *ListMineNotFoundResponseBody {
	body := &ListMineNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineBadRequestResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "export" service.
func NewListMineBadRequestResponseBody(res *goa.ServiceError) *ListMineBadRequestResponseBody {
	body := &ListMineBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusUnauthorizedResponseBody builds the HTTP response body from the
// result of the "status" endpoint of the "export" service.
func NewStatusUnauthorizedResponseBody(res *goa.ServiceError) *StatusUnauthorizedResponseBody {
	body := &StatusUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusForbiddenResponseBody builds the HTTP response body from the result
// of the "status" endpoint of the "export" service.
func NewStatusForbiddenResponseBody(res *goa.ServiceError) *StatusForbiddenResponseBody {
	body := &StatusForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusNotFoundResponseBody builds the HTTP response body from the result
// of the "status" endpoint of the "export" service.
func NewStatusNotFoundResponseBody(res *goa.ServiceError) *StatusNotFoundResponseBody {
	body := &StatusNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStatusBadRequestResponseBody builds the HTTP response body from the
// result of the "status" endpoint of the "export" service.
func NewStatusBadRequestResponseBody(res *goa.ServiceError) *StatusBadRequestResponseBody {
	body := &StatusBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadUnauthorizedResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "export" service.
func NewDownloadUnauthorizedResponseBody(res *goa.ServiceError) *DownloadUnauthorizedResponseBody {
	body := &DownloadUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadForbiddenResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "export" service.
func NewDownloadForbiddenResponseBody(res *goa.ServiceError) *DownloadForbiddenResponseBody {
	body := &DownloadForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadNotFoundResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "export" service.
func NewDownloadNotFoundResponseBody(res *goa.ServiceError) *DownloadNotFoundResponseBody {
	body := &DownloadNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadBadRequestResponseBody builds the HTTP response body from the
// result of the "download" endpoint of the "export" service.
func NewDownloadBadRequestResponseBody(res *goa.ServiceError) *DownloadBadRequestResponseBody {
	body := &DownloadBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCsvUnauthorizedResponseBody builds the HTTP response body from the result
// of the "csv" endpoint of the "export" service.
func NewCsvUnauthorizedResponseBody(res *goa.ServiceError) *CsvUnauthorizedResponseBody {
	body := &CsvUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCsvForbiddenResponseBody builds the HTTP response body from the result of
// the "csv" endpoint of the "export" service.
func NewCsvForbiddenResponseBody(res *goa.ServiceError) *CsvForbiddenResponseBody {
	body := &CsvForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCsvNotFoundResponseBody builds the HTTP response body from the result of
// the "csv" endpoint of the "export" service.
func NewCsvNotFoundResponseBody(res *goa.ServiceError) *CsvNotFoundResponseBody {
	body := &CsvNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCsvBadRequestResponseBody builds the HTTP response body from the result
// of the "csv" endpoint of the "export" service.
func NewCsvBadRequestResponseBody(res *goa.ServiceError) *CsvBadRequestResponseBody {
	body := &CsvBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewJSONLinesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "json lines" endpoint of the "export" service.
func NewJSONLinesUnauthorizedResponseBody(res *goa.ServiceError) *JSONLinesUnauthorizedResponseBody {
	body := &JSONLinesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewJSONLinesForbiddenResponseBody builds the HTTP response body from the
// result of the "json lines" endpoint of the "export" service.
func NewJSONLinesForbiddenResponseBody(res *goa.ServiceError) *JSONLinesForbiddenResponseBody {
	body := &JSONLinesForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewJSONLinesNotFoundResponseBody builds the HTTP response body from the
// result of the "json lines" endpoint of the "export" service.
func NewJSONLinesNotFoundResponseBody(res *goa.ServiceError) *JSONLinesNotFoundResponseBody {
	body := &JSONLinesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewJSONLinesBadRequestResponseBody builds the HTTP response body from the
// result of the "json lines" endpoint of the "export" service.
func NewJSONLinesBadRequestResponseBody(res *goa.ServiceError) *JSONLinesBadRequestResponseBody {
	body := &JSONLinesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMinePayload builds a export service list mine endpoint payload.
func NewListMinePayload(auth string) *export.ListMinePayload {
	v := &export.ListMinePayload{}
	v.Auth = auth

	return v
}

// NewStatusPayload builds a export service status endpoint payload.
func NewStatusPayload(id string, auth string) *export.StatusPayload {
	v := &export.StatusPayload{}
	v.ID = id
	v.Auth = auth

	return v
}

// NewDownloadPayload builds a export service download endpoint payload.
func NewDownloadPayload(id string, auth string) *export.DownloadPayload {
	v := &export.DownloadPayload{}
	v.ID = id
	v.Auth = auth

	return v
}

// NewCsvPayload builds a export service csv endpoint payload.
func NewCsvPayload(start *int64, end *int64, stations *string, sensors *string, resolution *int32, aggregate *string, complete *bool, tail *int32, auth string) *export.CsvPayload {
	v := &export.CsvPayload{}
	v.Start = start
	v.End = end
	v.Stations = stations
	v.Sensors = sensors
	v.Resolution = resolution
	v.Aggregate = aggregate
	v.Complete = complete
	v.Tail = tail
	v.Auth = auth

	return v
}

// NewJSONLinesPayload builds a export service json lines endpoint payload.
func NewJSONLinesPayload(start *int64, end *int64, stations *string, sensors *string, resolution *int32, aggregate *string, complete *bool, tail *int32, auth string) *export.JSONLinesPayload {
	v := &export.JSONLinesPayload{}
	v.Start = start
	v.End = end
	v.Stations = stations
	v.Sensors = sensors
	v.Resolution = resolution
	v.Aggregate = aggregate
	v.Complete = complete
	v.Tail = tail
	v.Auth = auth

	return v
}
