// Code generated by goa v3.2.4, DO NOT EDIT.
//
// station HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	station "github.com/fieldkit/cloud/server/api/gen/station"
	stationviews "github.com/fieldkit/cloud/server/api/gen/station/views"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "station" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Name         *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	DeviceID     *string `form:"deviceId,omitempty" json:"deviceId,omitempty" xml:"deviceId,omitempty"`
	LocationName *string `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	StatusPb     *string `form:"statusPb,omitempty" json:"statusPb,omitempty" xml:"statusPb,omitempty"`
}

// UpdateRequestBody is the type of the "station" service "update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	Name         *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	LocationName *string `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	StatusPb     *string `form:"statusPb,omitempty" json:"statusPb,omitempty" xml:"statusPb,omitempty"`
}

// AddResponseBody is the type of the "station" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	ID                 int32                              `form:"id" json:"id" xml:"id"`
	Name               string                             `form:"name" json:"name" xml:"name"`
	Owner              *StationOwnerResponseBody          `form:"owner" json:"owner" xml:"owner"`
	DeviceID           string                             `form:"deviceId" json:"deviceId" xml:"deviceId"`
	Uploads            []*StationUploadResponseBody       `form:"uploads" json:"uploads" xml:"uploads"`
	Photos             *StationPhotosResponseBody         `form:"photos" json:"photos" xml:"photos"`
	ReadOnly           bool                               `form:"readOnly" json:"readOnly" xml:"readOnly"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
	UpdatedAt          int64                              `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceNameOther     *string                            `form:"placeNameOther,omitempty" json:"placeNameOther,omitempty" xml:"placeNameOther,omitempty"`
	PlaceNameNative    *string                            `form:"placeNameNative,omitempty" json:"placeNameNative,omitempty" xml:"placeNameNative,omitempty"`
	Data               *StationDataSummaryResponseBody    `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetResponseBody is the type of the "station" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	ID                 int32                              `form:"id" json:"id" xml:"id"`
	Name               string                             `form:"name" json:"name" xml:"name"`
	Owner              *StationOwnerResponseBody          `form:"owner" json:"owner" xml:"owner"`
	DeviceID           string                             `form:"deviceId" json:"deviceId" xml:"deviceId"`
	Uploads            []*StationUploadResponseBody       `form:"uploads" json:"uploads" xml:"uploads"`
	Photos             *StationPhotosResponseBody         `form:"photos" json:"photos" xml:"photos"`
	ReadOnly           bool                               `form:"readOnly" json:"readOnly" xml:"readOnly"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
	UpdatedAt          int64                              `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceNameOther     *string                            `form:"placeNameOther,omitempty" json:"placeNameOther,omitempty" xml:"placeNameOther,omitempty"`
	PlaceNameNative    *string                            `form:"placeNameNative,omitempty" json:"placeNameNative,omitempty" xml:"placeNameNative,omitempty"`
	Data               *StationDataSummaryResponseBody    `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UpdateResponseBody is the type of the "station" service "update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	ID                 int32                              `form:"id" json:"id" xml:"id"`
	Name               string                             `form:"name" json:"name" xml:"name"`
	Owner              *StationOwnerResponseBody          `form:"owner" json:"owner" xml:"owner"`
	DeviceID           string                             `form:"deviceId" json:"deviceId" xml:"deviceId"`
	Uploads            []*StationUploadResponseBody       `form:"uploads" json:"uploads" xml:"uploads"`
	Photos             *StationPhotosResponseBody         `form:"photos" json:"photos" xml:"photos"`
	ReadOnly           bool                               `form:"readOnly" json:"readOnly" xml:"readOnly"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
	UpdatedAt          int64                              `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceNameOther     *string                            `form:"placeNameOther,omitempty" json:"placeNameOther,omitempty" xml:"placeNameOther,omitempty"`
	PlaceNameNative    *string                            `form:"placeNameNative,omitempty" json:"placeNameNative,omitempty" xml:"placeNameNative,omitempty"`
	Data               *StationDataSummaryResponseBody    `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ListMineResponseBody is the type of the "station" service "list mine"
// endpoint HTTP response body.
type ListMineResponseBody struct {
	Stations StationFullResponseBodyCollection `form:"stations" json:"stations" xml:"stations"`
}

// ListProjectResponseBody is the type of the "station" service "list project"
// endpoint HTTP response body.
type ListProjectResponseBody struct {
	Stations StationFullResponseBodyCollection `form:"stations" json:"stations" xml:"stations"`
}

// DownloadPhotoResponseBody is the type of the "station" service "download
// photo" endpoint HTTP response body.
type DownloadPhotoResponseBody struct {
	Length      int64  `form:"length" json:"length" xml:"length"`
	Body        []byte `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	ContentType string `form:"contentType" json:"contentType" xml:"contentType"`
	Etag        string `form:"etag" json:"etag" xml:"etag"`
}

// ListAllResponseBody is the type of the "station" service "list all" endpoint
// HTTP response body.
type ListAllResponseBody struct {
	Stations []*EssentialStationResponseBody `form:"stations" json:"stations" xml:"stations"`
	Total    int32                           `form:"total" json:"total" xml:"total"`
}

// AdminSearchResponseBody is the type of the "station" service "admin search"
// endpoint HTTP response body.
type AdminSearchResponseBody struct {
	Stations []*EssentialStationResponseBody `form:"stations" json:"stations" xml:"stations"`
	Total    int32                           `form:"total" json:"total" xml:"total"`
}

// AddStationOwnerConflictResponseBody is the type of the "station" service
// "add" endpoint HTTP response body for the "station-owner-conflict" error.
type AddStationOwnerConflictResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddBadRequestResponseBody is the type of the "station" service "add"
// endpoint HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddUnauthorizedResponseBody is the type of the "station" service "add"
// endpoint HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddForbiddenResponseBody is the type of the "station" service "add" endpoint
// HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddNotFoundResponseBody is the type of the "station" service "add" endpoint
// HTTP response body for the "not-found" error.
type AddNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUnauthorizedResponseBody is the type of the "station" service "get"
// endpoint HTTP response body for the "unauthorized" error.
type GetUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetForbiddenResponseBody is the type of the "station" service "get" endpoint
// HTTP response body for the "forbidden" error.
type GetForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetNotFoundResponseBody is the type of the "station" service "get" endpoint
// HTTP response body for the "not-found" error.
type GetNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "station" service "get"
// endpoint HTTP response body for the "bad-request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TransferUnauthorizedResponseBody is the type of the "station" service
// "transfer" endpoint HTTP response body for the "unauthorized" error.
type TransferUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TransferForbiddenResponseBody is the type of the "station" service
// "transfer" endpoint HTTP response body for the "forbidden" error.
type TransferForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TransferNotFoundResponseBody is the type of the "station" service "transfer"
// endpoint HTTP response body for the "not-found" error.
type TransferNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TransferBadRequestResponseBody is the type of the "station" service
// "transfer" endpoint HTTP response body for the "bad-request" error.
type TransferBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUnauthorizedResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "not-found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "station" service "update"
// endpoint HTTP response body for the "bad-request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineUnauthorizedResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "unauthorized" error.
type ListMineUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineForbiddenResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "forbidden" error.
type ListMineForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineNotFoundResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "not-found" error.
type ListMineNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListMineBadRequestResponseBody is the type of the "station" service "list
// mine" endpoint HTTP response body for the "bad-request" error.
type ListMineBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectUnauthorizedResponseBody is the type of the "station" service
// "list project" endpoint HTTP response body for the "unauthorized" error.
type ListProjectUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectForbiddenResponseBody is the type of the "station" service "list
// project" endpoint HTTP response body for the "forbidden" error.
type ListProjectForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectNotFoundResponseBody is the type of the "station" service "list
// project" endpoint HTTP response body for the "not-found" error.
type ListProjectNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListProjectBadRequestResponseBody is the type of the "station" service "list
// project" endpoint HTTP response body for the "bad-request" error.
type ListProjectBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoUnauthorizedResponseBody is the type of the "station" service
// "download photo" endpoint HTTP response body for the "unauthorized" error.
type DownloadPhotoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoForbiddenResponseBody is the type of the "station" service
// "download photo" endpoint HTTP response body for the "forbidden" error.
type DownloadPhotoForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoNotFoundResponseBody is the type of the "station" service
// "download photo" endpoint HTTP response body for the "not-found" error.
type DownloadPhotoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoBadRequestResponseBody is the type of the "station" service
// "download photo" endpoint HTTP response body for the "bad-request" error.
type DownloadPhotoBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAllUnauthorizedResponseBody is the type of the "station" service "list
// all" endpoint HTTP response body for the "unauthorized" error.
type ListAllUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAllForbiddenResponseBody is the type of the "station" service "list all"
// endpoint HTTP response body for the "forbidden" error.
type ListAllForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAllNotFoundResponseBody is the type of the "station" service "list all"
// endpoint HTTP response body for the "not-found" error.
type ListAllNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListAllBadRequestResponseBody is the type of the "station" service "list
// all" endpoint HTTP response body for the "bad-request" error.
type ListAllBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "station" service "delete"
// endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "station" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "station" service "delete"
// endpoint HTTP response body for the "not-found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "station" service "delete"
// endpoint HTTP response body for the "bad-request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchUnauthorizedResponseBody is the type of the "station" service
// "admin search" endpoint HTTP response body for the "unauthorized" error.
type AdminSearchUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchForbiddenResponseBody is the type of the "station" service "admin
// search" endpoint HTTP response body for the "forbidden" error.
type AdminSearchForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchNotFoundResponseBody is the type of the "station" service "admin
// search" endpoint HTTP response body for the "not-found" error.
type AdminSearchNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchBadRequestResponseBody is the type of the "station" service
// "admin search" endpoint HTTP response body for the "bad-request" error.
type AdminSearchBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationOwnerResponseBody is used to define fields on response body types.
type StationOwnerResponseBody struct {
	ID   int32  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// StationUploadResponseBody is used to define fields on response body types.
type StationUploadResponseBody struct {
	ID       int64   `form:"id" json:"id" xml:"id"`
	Time     int64   `form:"time" json:"time" xml:"time"`
	UploadID string  `form:"uploadId" json:"uploadId" xml:"uploadId"`
	Size     int64   `form:"size" json:"size" xml:"size"`
	URL      string  `form:"url" json:"url" xml:"url"`
	Type     string  `form:"type" json:"type" xml:"type"`
	Blocks   []int64 `form:"blocks" json:"blocks" xml:"blocks"`
}

// StationPhotosResponseBody is used to define fields on response body types.
type StationPhotosResponseBody struct {
	Small string `form:"small" json:"small" xml:"small"`
}

// StationConfigurationsResponseBody is used to define fields on response body
// types.
type StationConfigurationsResponseBody struct {
	All []*StationConfigurationResponseBody `form:"all" json:"all" xml:"all"`
}

// StationConfigurationResponseBody is used to define fields on response body
// types.
type StationConfigurationResponseBody struct {
	ID           int64                        `form:"id" json:"id" xml:"id"`
	Time         int64                        `form:"time" json:"time" xml:"time"`
	ProvisionID  int64                        `form:"provisionId" json:"provisionId" xml:"provisionId"`
	MetaRecordID *int64                       `form:"metaRecordId,omitempty" json:"metaRecordId,omitempty" xml:"metaRecordId,omitempty"`
	SourceID     *int32                       `form:"sourceId,omitempty" json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	Modules      []*StationModuleResponseBody `form:"modules" json:"modules" xml:"modules"`
}

// StationModuleResponseBody is used to define fields on response body types.
type StationModuleResponseBody struct {
	ID           int64                        `form:"id" json:"id" xml:"id"`
	HardwareID   *string                      `form:"hardwareId,omitempty" json:"hardwareId,omitempty" xml:"hardwareId,omitempty"`
	MetaRecordID *int64                       `form:"metaRecordId,omitempty" json:"metaRecordId,omitempty" xml:"metaRecordId,omitempty"`
	Name         string                       `form:"name" json:"name" xml:"name"`
	Position     int32                        `form:"position" json:"position" xml:"position"`
	Flags        int32                        `form:"flags" json:"flags" xml:"flags"`
	Internal     bool                         `form:"internal" json:"internal" xml:"internal"`
	FullKey      string                       `form:"fullKey" json:"fullKey" xml:"fullKey"`
	Sensors      []*StationSensorResponseBody `form:"sensors" json:"sensors" xml:"sensors"`
}

// StationSensorResponseBody is used to define fields on response body types.
type StationSensorResponseBody struct {
	Name          string                     `form:"name" json:"name" xml:"name"`
	UnitOfMeasure string                     `form:"unitOfMeasure" json:"unitOfMeasure" xml:"unitOfMeasure"`
	Reading       *SensorReadingResponseBody `form:"reading,omitempty" json:"reading,omitempty" xml:"reading,omitempty"`
	Key           string                     `form:"key" json:"key" xml:"key"`
	FullKey       string                     `form:"fullKey" json:"fullKey" xml:"fullKey"`
	Ranges        []*SensorRangeResponseBody `form:"ranges" json:"ranges" xml:"ranges"`
}

// SensorReadingResponseBody is used to define fields on response body types.
type SensorReadingResponseBody struct {
	Last float32 `form:"last" json:"last" xml:"last"`
	Time int64   `form:"time" json:"time" xml:"time"`
}

// SensorRangeResponseBody is used to define fields on response body types.
type SensorRangeResponseBody struct {
	Minimum float32 `form:"minimum" json:"minimum" xml:"minimum"`
	Maximum float32 `form:"maximum" json:"maximum" xml:"maximum"`
}

// StationLocationResponseBody is used to define fields on response body types.
type StationLocationResponseBody struct {
	Precise []float64                    `form:"precise,omitempty" json:"precise,omitempty" xml:"precise,omitempty"`
	Regions []*StationRegionResponseBody `form:"regions,omitempty" json:"regions,omitempty" xml:"regions,omitempty"`
	URL     *string                      `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// StationRegionResponseBody is used to define fields on response body types.
type StationRegionResponseBody struct {
	Name  string        `form:"name" json:"name" xml:"name"`
	Shape [][][]float64 `form:"shape" json:"shape" xml:"shape"`
}

// StationDataSummaryResponseBody is used to define fields on response body
// types.
type StationDataSummaryResponseBody struct {
	Start           int64 `form:"start" json:"start" xml:"start"`
	End             int64 `form:"end" json:"end" xml:"end"`
	NumberOfSamples int64 `form:"numberOfSamples" json:"numberOfSamples" xml:"numberOfSamples"`
}

// StationFullResponseBodyCollection is used to define fields on response body
// types.
type StationFullResponseBodyCollection []*StationFullResponseBody

// StationFullResponseBody is used to define fields on response body types.
type StationFullResponseBody struct {
	ID                 int32                              `form:"id" json:"id" xml:"id"`
	Name               string                             `form:"name" json:"name" xml:"name"`
	Owner              *StationOwnerResponseBody          `form:"owner" json:"owner" xml:"owner"`
	DeviceID           string                             `form:"deviceId" json:"deviceId" xml:"deviceId"`
	Uploads            []*StationUploadResponseBody       `form:"uploads" json:"uploads" xml:"uploads"`
	Photos             *StationPhotosResponseBody         `form:"photos" json:"photos" xml:"photos"`
	ReadOnly           bool                               `form:"readOnly" json:"readOnly" xml:"readOnly"`
	Battery            *float32                           `form:"battery,omitempty" json:"battery,omitempty" xml:"battery,omitempty"`
	RecordingStartedAt *int64                             `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                             `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                             `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                             `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                             `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Configurations     *StationConfigurationsResponseBody `form:"configurations" json:"configurations" xml:"configurations"`
	UpdatedAt          int64                              `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Location           *StationLocationResponseBody       `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	LocationName       *string                            `form:"locationName,omitempty" json:"locationName,omitempty" xml:"locationName,omitempty"`
	PlaceNameOther     *string                            `form:"placeNameOther,omitempty" json:"placeNameOther,omitempty" xml:"placeNameOther,omitempty"`
	PlaceNameNative    *string                            `form:"placeNameNative,omitempty" json:"placeNameNative,omitempty" xml:"placeNameNative,omitempty"`
	Data               *StationDataSummaryResponseBody    `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// EssentialStationResponseBody is used to define fields on response body types.
type EssentialStationResponseBody struct {
	ID                 int64                        `form:"id" json:"id" xml:"id"`
	DeviceID           string                       `form:"deviceId" json:"deviceId" xml:"deviceId"`
	Name               string                       `form:"name" json:"name" xml:"name"`
	Owner              *StationOwnerResponseBody    `form:"owner" json:"owner" xml:"owner"`
	CreatedAt          int64                        `form:"createdAt" json:"createdAt" xml:"createdAt"`
	UpdatedAt          int64                        `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	RecordingStartedAt *int64                       `form:"recordingStartedAt,omitempty" json:"recordingStartedAt,omitempty" xml:"recordingStartedAt,omitempty"`
	MemoryUsed         *int32                       `form:"memoryUsed,omitempty" json:"memoryUsed,omitempty" xml:"memoryUsed,omitempty"`
	MemoryAvailable    *int32                       `form:"memoryAvailable,omitempty" json:"memoryAvailable,omitempty" xml:"memoryAvailable,omitempty"`
	FirmwareNumber     *int32                       `form:"firmwareNumber,omitempty" json:"firmwareNumber,omitempty" xml:"firmwareNumber,omitempty"`
	FirmwareTime       *int64                       `form:"firmwareTime,omitempty" json:"firmwareTime,omitempty" xml:"firmwareTime,omitempty"`
	Location           *StationLocationResponseBody `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	LastIngestionAt    *int64                       `form:"lastIngestionAt,omitempty" json:"lastIngestionAt,omitempty" xml:"lastIngestionAt,omitempty"`
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "station" service.
func NewAddResponseBody(res *stationviews.StationFullView) *AddResponseBody {
	body := &AddResponseBody{
		ID:                 *res.ID,
		Name:               *res.Name,
		DeviceID:           *res.DeviceID,
		ReadOnly:           *res.ReadOnly,
		Battery:            res.Battery,
		RecordingStartedAt: res.RecordingStartedAt,
		MemoryUsed:         res.MemoryUsed,
		MemoryAvailable:    res.MemoryAvailable,
		FirmwareNumber:     res.FirmwareNumber,
		FirmwareTime:       res.FirmwareTime,
		UpdatedAt:          *res.UpdatedAt,
		LocationName:       res.LocationName,
		PlaceNameOther:     res.PlaceNameOther,
		PlaceNameNative:    res.PlaceNameNative,
	}
	if res.Owner != nil {
		body.Owner = marshalStationviewsStationOwnerViewToStationOwnerResponseBody(res.Owner)
	}
	if res.Uploads != nil {
		body.Uploads = make([]*StationUploadResponseBody, len(res.Uploads))
		for i, val := range res.Uploads {
			body.Uploads[i] = marshalStationviewsStationUploadViewToStationUploadResponseBody(val)
		}
	}
	if res.Photos != nil {
		body.Photos = marshalStationviewsStationPhotosViewToStationPhotosResponseBody(res.Photos)
	}
	if res.Configurations != nil {
		body.Configurations = marshalStationviewsStationConfigurationsViewToStationConfigurationsResponseBody(res.Configurations)
	}
	if res.Location != nil {
		body.Location = marshalStationviewsStationLocationViewToStationLocationResponseBody(res.Location)
	}
	if res.Data != nil {
		body.Data = marshalStationviewsStationDataSummaryViewToStationDataSummaryResponseBody(res.Data)
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "station" service.
func NewGetResponseBody(res *stationviews.StationFullView) *GetResponseBody {
	body := &GetResponseBody{
		ID:                 *res.ID,
		Name:               *res.Name,
		DeviceID:           *res.DeviceID,
		ReadOnly:           *res.ReadOnly,
		Battery:            res.Battery,
		RecordingStartedAt: res.RecordingStartedAt,
		MemoryUsed:         res.MemoryUsed,
		MemoryAvailable:    res.MemoryAvailable,
		FirmwareNumber:     res.FirmwareNumber,
		FirmwareTime:       res.FirmwareTime,
		UpdatedAt:          *res.UpdatedAt,
		LocationName:       res.LocationName,
		PlaceNameOther:     res.PlaceNameOther,
		PlaceNameNative:    res.PlaceNameNative,
	}
	if res.Owner != nil {
		body.Owner = marshalStationviewsStationOwnerViewToStationOwnerResponseBody(res.Owner)
	}
	if res.Uploads != nil {
		body.Uploads = make([]*StationUploadResponseBody, len(res.Uploads))
		for i, val := range res.Uploads {
			body.Uploads[i] = marshalStationviewsStationUploadViewToStationUploadResponseBody(val)
		}
	}
	if res.Photos != nil {
		body.Photos = marshalStationviewsStationPhotosViewToStationPhotosResponseBody(res.Photos)
	}
	if res.Configurations != nil {
		body.Configurations = marshalStationviewsStationConfigurationsViewToStationConfigurationsResponseBody(res.Configurations)
	}
	if res.Location != nil {
		body.Location = marshalStationviewsStationLocationViewToStationLocationResponseBody(res.Location)
	}
	if res.Data != nil {
		body.Data = marshalStationviewsStationDataSummaryViewToStationDataSummaryResponseBody(res.Data)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "station" service.
func NewUpdateResponseBody(res *stationviews.StationFullView) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:                 *res.ID,
		Name:               *res.Name,
		DeviceID:           *res.DeviceID,
		ReadOnly:           *res.ReadOnly,
		Battery:            res.Battery,
		RecordingStartedAt: res.RecordingStartedAt,
		MemoryUsed:         res.MemoryUsed,
		MemoryAvailable:    res.MemoryAvailable,
		FirmwareNumber:     res.FirmwareNumber,
		FirmwareTime:       res.FirmwareTime,
		UpdatedAt:          *res.UpdatedAt,
		LocationName:       res.LocationName,
		PlaceNameOther:     res.PlaceNameOther,
		PlaceNameNative:    res.PlaceNameNative,
	}
	if res.Owner != nil {
		body.Owner = marshalStationviewsStationOwnerViewToStationOwnerResponseBody(res.Owner)
	}
	if res.Uploads != nil {
		body.Uploads = make([]*StationUploadResponseBody, len(res.Uploads))
		for i, val := range res.Uploads {
			body.Uploads[i] = marshalStationviewsStationUploadViewToStationUploadResponseBody(val)
		}
	}
	if res.Photos != nil {
		body.Photos = marshalStationviewsStationPhotosViewToStationPhotosResponseBody(res.Photos)
	}
	if res.Configurations != nil {
		body.Configurations = marshalStationviewsStationConfigurationsViewToStationConfigurationsResponseBody(res.Configurations)
	}
	if res.Location != nil {
		body.Location = marshalStationviewsStationLocationViewToStationLocationResponseBody(res.Location)
	}
	if res.Data != nil {
		body.Data = marshalStationviewsStationDataSummaryViewToStationDataSummaryResponseBody(res.Data)
	}
	return body
}

// NewListMineResponseBody builds the HTTP response body from the result of the
// "list mine" endpoint of the "station" service.
func NewListMineResponseBody(res *stationviews.StationsFullView) *ListMineResponseBody {
	body := &ListMineResponseBody{}
	if res.Stations != nil {
		body.Stations = make([]*StationFullResponseBody, len(res.Stations))
		for i, val := range res.Stations {
			body.Stations[i] = marshalStationviewsStationFullViewToStationFullResponseBody(val)
		}
	}
	return body
}

// NewListProjectResponseBody builds the HTTP response body from the result of
// the "list project" endpoint of the "station" service.
func NewListProjectResponseBody(res *stationviews.StationsFullView) *ListProjectResponseBody {
	body := &ListProjectResponseBody{}
	if res.Stations != nil {
		body.Stations = make([]*StationFullResponseBody, len(res.Stations))
		for i, val := range res.Stations {
			body.Stations[i] = marshalStationviewsStationFullViewToStationFullResponseBody(val)
		}
	}
	return body
}

// NewDownloadPhotoResponseBody builds the HTTP response body from the result
// of the "download photo" endpoint of the "station" service.
func NewDownloadPhotoResponseBody(res *stationviews.DownloadedPhotoView) *DownloadPhotoResponseBody {
	body := &DownloadPhotoResponseBody{
		Length:      *res.Length,
		ContentType: *res.ContentType,
		Etag:        *res.Etag,
		Body:        res.Body,
	}
	return body
}

// NewListAllResponseBody builds the HTTP response body from the result of the
// "list all" endpoint of the "station" service.
func NewListAllResponseBody(res *stationviews.PageOfStationsView) *ListAllResponseBody {
	body := &ListAllResponseBody{
		Total: *res.Total,
	}
	if res.Stations != nil {
		body.Stations = make([]*EssentialStationResponseBody, len(res.Stations))
		for i, val := range res.Stations {
			body.Stations[i] = marshalStationviewsEssentialStationViewToEssentialStationResponseBody(val)
		}
	}
	return body
}

// NewAdminSearchResponseBody builds the HTTP response body from the result of
// the "admin search" endpoint of the "station" service.
func NewAdminSearchResponseBody(res *stationviews.PageOfStationsView) *AdminSearchResponseBody {
	body := &AdminSearchResponseBody{
		Total: *res.Total,
	}
	if res.Stations != nil {
		body.Stations = make([]*EssentialStationResponseBody, len(res.Stations))
		for i, val := range res.Stations {
			body.Stations[i] = marshalStationviewsEssentialStationViewToEssentialStationResponseBody(val)
		}
	}
	return body
}

// NewAddStationOwnerConflictResponseBody builds the HTTP response body from
// the result of the "add" endpoint of the "station" service.
func NewAddStationOwnerConflictResponseBody(res *goa.ServiceError) *AddStationOwnerConflictResponseBody {
	body := &AddStationOwnerConflictResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddBadRequestResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "station" service.
func NewAddBadRequestResponseBody(res *goa.ServiceError) *AddBadRequestResponseBody {
	body := &AddBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddUnauthorizedResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "station" service.
func NewAddUnauthorizedResponseBody(res *goa.ServiceError) *AddUnauthorizedResponseBody {
	body := &AddUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddForbiddenResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "station" service.
func NewAddForbiddenResponseBody(res *goa.ServiceError) *AddForbiddenResponseBody {
	body := &AddForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddNotFoundResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "station" service.
func NewAddNotFoundResponseBody(res *goa.ServiceError) *AddNotFoundResponseBody {
	body := &AddNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUnauthorizedResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "station" service.
func NewGetUnauthorizedResponseBody(res *goa.ServiceError) *GetUnauthorizedResponseBody {
	body := &GetUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetForbiddenResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "station" service.
func NewGetForbiddenResponseBody(res *goa.ServiceError) *GetForbiddenResponseBody {
	body := &GetForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "station" service.
func NewGetNotFoundResponseBody(res *goa.ServiceError) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "station" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTransferUnauthorizedResponseBody builds the HTTP response body from the
// result of the "transfer" endpoint of the "station" service.
func NewTransferUnauthorizedResponseBody(res *goa.ServiceError) *TransferUnauthorizedResponseBody {
	body := &TransferUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTransferForbiddenResponseBody builds the HTTP response body from the
// result of the "transfer" endpoint of the "station" service.
func NewTransferForbiddenResponseBody(res *goa.ServiceError) *TransferForbiddenResponseBody {
	body := &TransferForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTransferNotFoundResponseBody builds the HTTP response body from the
// result of the "transfer" endpoint of the "station" service.
func NewTransferNotFoundResponseBody(res *goa.ServiceError) *TransferNotFoundResponseBody {
	body := &TransferNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTransferBadRequestResponseBody builds the HTTP response body from the
// result of the "transfer" endpoint of the "station" service.
func NewTransferBadRequestResponseBody(res *goa.ServiceError) *TransferBadRequestResponseBody {
	body := &TransferBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "station" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "station" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "station" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "station" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "station" service.
func NewListMineUnauthorizedResponseBody(res *goa.ServiceError) *ListMineUnauthorizedResponseBody {
	body := &ListMineUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineForbiddenResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "station" service.
func NewListMineForbiddenResponseBody(res *goa.ServiceError) *ListMineForbiddenResponseBody {
	body := &ListMineForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineNotFoundResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "station" service.
func NewListMineNotFoundResponseBody(res *goa.ServiceError) *ListMineNotFoundResponseBody {
	body := &ListMineNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMineBadRequestResponseBody builds the HTTP response body from the
// result of the "list mine" endpoint of the "station" service.
func NewListMineBadRequestResponseBody(res *goa.ServiceError) *ListMineBadRequestResponseBody {
	body := &ListMineBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list project" endpoint of the "station" service.
func NewListProjectUnauthorizedResponseBody(res *goa.ServiceError) *ListProjectUnauthorizedResponseBody {
	body := &ListProjectUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectForbiddenResponseBody builds the HTTP response body from the
// result of the "list project" endpoint of the "station" service.
func NewListProjectForbiddenResponseBody(res *goa.ServiceError) *ListProjectForbiddenResponseBody {
	body := &ListProjectForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "list project" endpoint of the "station" service.
func NewListProjectNotFoundResponseBody(res *goa.ServiceError) *ListProjectNotFoundResponseBody {
	body := &ListProjectNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListProjectBadRequestResponseBody builds the HTTP response body from the
// result of the "list project" endpoint of the "station" service.
func NewListProjectBadRequestResponseBody(res *goa.ServiceError) *ListProjectBadRequestResponseBody {
	body := &ListProjectBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoUnauthorizedResponseBody builds the HTTP response body from
// the result of the "download photo" endpoint of the "station" service.
func NewDownloadPhotoUnauthorizedResponseBody(res *goa.ServiceError) *DownloadPhotoUnauthorizedResponseBody {
	body := &DownloadPhotoUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoForbiddenResponseBody builds the HTTP response body from the
// result of the "download photo" endpoint of the "station" service.
func NewDownloadPhotoForbiddenResponseBody(res *goa.ServiceError) *DownloadPhotoForbiddenResponseBody {
	body := &DownloadPhotoForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoNotFoundResponseBody builds the HTTP response body from the
// result of the "download photo" endpoint of the "station" service.
func NewDownloadPhotoNotFoundResponseBody(res *goa.ServiceError) *DownloadPhotoNotFoundResponseBody {
	body := &DownloadPhotoNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoBadRequestResponseBody builds the HTTP response body from
// the result of the "download photo" endpoint of the "station" service.
func NewDownloadPhotoBadRequestResponseBody(res *goa.ServiceError) *DownloadPhotoBadRequestResponseBody {
	body := &DownloadPhotoBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAllUnauthorizedResponseBody builds the HTTP response body from the
// result of the "list all" endpoint of the "station" service.
func NewListAllUnauthorizedResponseBody(res *goa.ServiceError) *ListAllUnauthorizedResponseBody {
	body := &ListAllUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAllForbiddenResponseBody builds the HTTP response body from the
// result of the "list all" endpoint of the "station" service.
func NewListAllForbiddenResponseBody(res *goa.ServiceError) *ListAllForbiddenResponseBody {
	body := &ListAllForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAllNotFoundResponseBody builds the HTTP response body from the result
// of the "list all" endpoint of the "station" service.
func NewListAllNotFoundResponseBody(res *goa.ServiceError) *ListAllNotFoundResponseBody {
	body := &ListAllNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListAllBadRequestResponseBody builds the HTTP response body from the
// result of the "list all" endpoint of the "station" service.
func NewListAllBadRequestResponseBody(res *goa.ServiceError) *ListAllBadRequestResponseBody {
	body := &ListAllBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "station" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "station" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "station" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "station" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchUnauthorizedResponseBody builds the HTTP response body from
// the result of the "admin search" endpoint of the "station" service.
func NewAdminSearchUnauthorizedResponseBody(res *goa.ServiceError) *AdminSearchUnauthorizedResponseBody {
	body := &AdminSearchUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchForbiddenResponseBody builds the HTTP response body from the
// result of the "admin search" endpoint of the "station" service.
func NewAdminSearchForbiddenResponseBody(res *goa.ServiceError) *AdminSearchForbiddenResponseBody {
	body := &AdminSearchForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchNotFoundResponseBody builds the HTTP response body from the
// result of the "admin search" endpoint of the "station" service.
func NewAdminSearchNotFoundResponseBody(res *goa.ServiceError) *AdminSearchNotFoundResponseBody {
	body := &AdminSearchNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchBadRequestResponseBody builds the HTTP response body from the
// result of the "admin search" endpoint of the "station" service.
func NewAdminSearchBadRequestResponseBody(res *goa.ServiceError) *AdminSearchBadRequestResponseBody {
	body := &AdminSearchBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddPayload builds a station service add endpoint payload.
func NewAddPayload(body *AddRequestBody, auth string) *station.AddPayload {
	v := &station.AddPayload{
		Name:         *body.Name,
		DeviceID:     *body.DeviceID,
		LocationName: body.LocationName,
		StatusPb:     body.StatusPb,
	}
	v.Auth = auth

	return v
}

// NewGetPayload builds a station service get endpoint payload.
func NewGetPayload(id int32, auth string) *station.GetPayload {
	v := &station.GetPayload{}
	v.ID = id
	v.Auth = auth

	return v
}

// NewTransferPayload builds a station service transfer endpoint payload.
func NewTransferPayload(id int32, ownerID int32, auth string) *station.TransferPayload {
	v := &station.TransferPayload{}
	v.ID = id
	v.OwnerID = ownerID
	v.Auth = auth

	return v
}

// NewUpdatePayload builds a station service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id int32, auth string) *station.UpdatePayload {
	v := &station.UpdatePayload{
		Name:         *body.Name,
		LocationName: body.LocationName,
		StatusPb:     body.StatusPb,
	}
	v.ID = id
	v.Auth = auth

	return v
}

// NewListMinePayload builds a station service list mine endpoint payload.
func NewListMinePayload(auth string) *station.ListMinePayload {
	v := &station.ListMinePayload{}
	v.Auth = auth

	return v
}

// NewListProjectPayload builds a station service list project endpoint payload.
func NewListProjectPayload(id int32, auth *string) *station.ListProjectPayload {
	v := &station.ListProjectPayload{}
	v.ID = id
	v.Auth = auth

	return v
}

// NewDownloadPhotoPayload builds a station service download photo endpoint
// payload.
func NewDownloadPhotoPayload(stationID int32, size *int32, ifNoneMatch *string, auth string) *station.DownloadPhotoPayload {
	v := &station.DownloadPhotoPayload{}
	v.StationID = stationID
	v.Size = size
	v.IfNoneMatch = ifNoneMatch
	v.Auth = auth

	return v
}

// NewListAllPayload builds a station service list all endpoint payload.
func NewListAllPayload(page *int32, pageSize *int32, ownerID *int32, query *string, sortBy *string, auth string) *station.ListAllPayload {
	v := &station.ListAllPayload{}
	v.Page = page
	v.PageSize = pageSize
	v.OwnerID = ownerID
	v.Query = query
	v.SortBy = sortBy
	v.Auth = auth

	return v
}

// NewDeletePayload builds a station service delete endpoint payload.
func NewDeletePayload(stationID int32, auth string) *station.DeletePayload {
	v := &station.DeletePayload{}
	v.StationID = stationID
	v.Auth = auth

	return v
}

// NewAdminSearchPayload builds a station service admin search endpoint payload.
func NewAdminSearchPayload(query string, auth string) *station.AdminSearchPayload {
	v := &station.AdminSearchPayload{}
	v.Query = query
	v.Auth = auth

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.DeviceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deviceId", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
