// Code generated by goa v3.2.4, DO NOT EDIT.
//
// station HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	station "github.com/fieldkit/cloud/server/api/gen/station"
	stationviews "github.com/fieldkit/cloud/server/api/gen/station/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "station" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddStationPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the station add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "add", "*station.AddPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("station", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the station
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//	- "station-owner-conflict" (type *goa.ServiceError): http.StatusBadRequest
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "add", err)
			}
			p := NewAddStationFullOK(&body)
			view := "default"
			vres := &stationviews.StationFull{Projected: p, View: view}
			if err = stationviews.ValidateStationFull(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "add", err)
			}
			res := station.NewStationFull(vres)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "station-owner-conflict":
				var (
					body AddStationOwnerConflictResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("station", "add", err)
				}
				err = ValidateAddStationOwnerConflictResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("station", "add", err)
				}
				return nil, NewAddStationOwnerConflict(&body)
			case "bad-request":
				var (
					body AddBadRequestResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("station", "add", err)
				}
				err = ValidateAddBadRequestResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("station", "add", err)
				}
				return nil, NewAddBadRequest(&body)
			default:
				body, _ := ioutil.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("station", "add", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body AddUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "add", err)
			}
			err = ValidateAddUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "add", err)
			}
			return nil, NewAddUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "add", err)
			}
			err = ValidateAddForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "add", err)
			}
			return nil, NewAddForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "add", err)
			}
			err = ValidateAddNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "add", err)
			}
			return nil, NewAddNotFound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "station" service "get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int32
	)
	{
		p, ok := v.(*station.GetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "get", "*station.GetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetStationPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetRequest returns an encoder for requests sent to the station get
// server.
func EncodeGetRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.GetPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "get", "*station.GetPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetResponse returns a decoder for responses returned by the station
// get endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "get", err)
			}
			p := NewGetStationFullOK(&body)
			view := "default"
			vres := &stationviews.StationFull{Projected: p, View: view}
			if err = stationviews.ValidateStationFull(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "get", err)
			}
			res := station.NewStationFull(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "get", err)
			}
			err = ValidateGetUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "get", err)
			}
			return nil, NewGetUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body GetForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "get", err)
			}
			err = ValidateGetForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "get", err)
			}
			return nil, NewGetForbidden(&body)
		case http.StatusNotFound:
			var (
				body GetNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "get", err)
			}
			err = ValidateGetNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "get", err)
			}
			return nil, NewGetNotFound(&body)
		case http.StatusBadRequest:
			var (
				body GetBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "get", err)
			}
			err = ValidateGetBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "get", err)
			}
			return nil, NewGetBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "get", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferRequest instantiates a HTTP request object with method and path
// set to call the "station" service "transfer" endpoint
func (c *Client) BuildTransferRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id      int32
		ownerID int32
	)
	{
		p, ok := v.(*station.TransferPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "transfer", "*station.TransferPayload", v)
		}
		id = p.ID
		ownerID = p.OwnerID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferStationPath(id, ownerID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "transfer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTransferRequest returns an encoder for requests sent to the station
// transfer server.
func EncodeTransferRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.TransferPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "transfer", "*station.TransferPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeTransferResponse returns a decoder for responses returned by the
// station transfer endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeTransferResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeTransferResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body TransferUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "transfer", err)
			}
			err = ValidateTransferUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "transfer", err)
			}
			return nil, NewTransferUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body TransferForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "transfer", err)
			}
			err = ValidateTransferForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "transfer", err)
			}
			return nil, NewTransferForbidden(&body)
		case http.StatusNotFound:
			var (
				body TransferNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "transfer", err)
			}
			err = ValidateTransferNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "transfer", err)
			}
			return nil, NewTransferNotFound(&body)
		case http.StatusBadRequest:
			var (
				body TransferBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "transfer", err)
			}
			err = ValidateTransferBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "transfer", err)
			}
			return nil, NewTransferBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "transfer", resp.StatusCode, string(body))
		}
	}
}

// BuildDefaultPhotoRequest instantiates a HTTP request object with method and
// path set to call the "station" service "default photo" endpoint
func (c *Client) BuildDefaultPhotoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id      int32
		photoID int32
	)
	{
		p, ok := v.(*station.DefaultPhotoPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "default photo", "*station.DefaultPhotoPayload", v)
		}
		id = p.ID
		photoID = p.PhotoID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DefaultPhotoStationPath(id, photoID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "default photo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDefaultPhotoRequest returns an encoder for requests sent to the
// station default photo server.
func EncodeDefaultPhotoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.DefaultPhotoPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "default photo", "*station.DefaultPhotoPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDefaultPhotoResponse returns a decoder for responses returned by the
// station default photo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDefaultPhotoResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDefaultPhotoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DefaultPhotoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "default photo", err)
			}
			err = ValidateDefaultPhotoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "default photo", err)
			}
			return nil, NewDefaultPhotoUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DefaultPhotoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "default photo", err)
			}
			err = ValidateDefaultPhotoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "default photo", err)
			}
			return nil, NewDefaultPhotoForbidden(&body)
		case http.StatusNotFound:
			var (
				body DefaultPhotoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "default photo", err)
			}
			err = ValidateDefaultPhotoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "default photo", err)
			}
			return nil, NewDefaultPhotoNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DefaultPhotoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "default photo", err)
			}
			err = ValidateDefaultPhotoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "default photo", err)
			}
			return nil, NewDefaultPhotoBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "default photo", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "station" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int32
	)
	{
		p, ok := v.(*station.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "update", "*station.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateStationPath(id)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the station
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "update", "*station.UpdatePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("station", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the station
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "update", err)
			}
			p := NewUpdateStationFullOK(&body)
			view := "default"
			vres := &stationviews.StationFull{Projected: p, View: view}
			if err = stationviews.ValidateStationFull(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "update", err)
			}
			res := station.NewStationFull(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "update", err)
			}
			err = ValidateUpdateUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "update", err)
			}
			return nil, NewUpdateUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "update", err)
			}
			err = ValidateUpdateForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "update", err)
			}
			return nil, NewUpdateForbidden(&body)
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "update", err)
			}
			err = ValidateUpdateBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "update", err)
			}
			return nil, NewUpdateBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildListMineRequest instantiates a HTTP request object with method and path
// set to call the "station" service "list mine" endpoint
func (c *Client) BuildListMineRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListMineStationPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "list mine", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListMineRequest returns an encoder for requests sent to the station
// list mine server.
func EncodeListMineRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.ListMinePayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "list mine", "*station.ListMinePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListMineResponse returns a decoder for responses returned by the
// station list mine endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListMineResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListMineResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListMineResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list mine", err)
			}
			p := NewListMineStationsFullOK(&body)
			view := "default"
			vres := &stationviews.StationsFull{Projected: p, View: view}
			if err = stationviews.ValidateStationsFull(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "list mine", err)
			}
			res := station.NewStationsFull(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListMineUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list mine", err)
			}
			err = ValidateListMineUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list mine", err)
			}
			return nil, NewListMineUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListMineForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list mine", err)
			}
			err = ValidateListMineForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list mine", err)
			}
			return nil, NewListMineForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListMineNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list mine", err)
			}
			err = ValidateListMineNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list mine", err)
			}
			return nil, NewListMineNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListMineBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list mine", err)
			}
			err = ValidateListMineBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list mine", err)
			}
			return nil, NewListMineBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "list mine", resp.StatusCode, string(body))
		}
	}
}

// BuildListProjectRequest instantiates a HTTP request object with method and
// path set to call the "station" service "list project" endpoint
func (c *Client) BuildListProjectRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int32
	)
	{
		p, ok := v.(*station.ListProjectPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "list project", "*station.ListProjectPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListProjectStationPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "list project", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListProjectRequest returns an encoder for requests sent to the station
// list project server.
func EncodeListProjectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.ListProjectPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "list project", "*station.ListProjectPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListProjectResponse returns a decoder for responses returned by the
// station list project endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListProjectResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListProjectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListProjectResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list project", err)
			}
			p := NewListProjectStationsFullOK(&body)
			view := "default"
			vres := &stationviews.StationsFull{Projected: p, View: view}
			if err = stationviews.ValidateStationsFull(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "list project", err)
			}
			res := station.NewStationsFull(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListProjectUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list project", err)
			}
			err = ValidateListProjectUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list project", err)
			}
			return nil, NewListProjectUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListProjectForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list project", err)
			}
			err = ValidateListProjectForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list project", err)
			}
			return nil, NewListProjectForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListProjectNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list project", err)
			}
			err = ValidateListProjectNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list project", err)
			}
			return nil, NewListProjectNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListProjectBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list project", err)
			}
			err = ValidateListProjectBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list project", err)
			}
			return nil, NewListProjectBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "list project", resp.StatusCode, string(body))
		}
	}
}

// BuildListAssociatedRequest instantiates a HTTP request object with method
// and path set to call the "station" service "list associated" endpoint
func (c *Client) BuildListAssociatedRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int32
	)
	{
		p, ok := v.(*station.ListAssociatedPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "list associated", "*station.ListAssociatedPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAssociatedStationPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "list associated", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListAssociatedRequest returns an encoder for requests sent to the
// station list associated server.
func EncodeListAssociatedRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.ListAssociatedPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "list associated", "*station.ListAssociatedPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeListAssociatedResponse returns a decoder for responses returned by the
// station list associated endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListAssociatedResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListAssociatedResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListAssociatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list associated", err)
			}
			p := NewListAssociatedAssociatedStationsOK(&body)
			view := "default"
			vres := &stationviews.AssociatedStations{Projected: p, View: view}
			if err = stationviews.ValidateAssociatedStations(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "list associated", err)
			}
			res := station.NewAssociatedStations(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListAssociatedUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list associated", err)
			}
			err = ValidateListAssociatedUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list associated", err)
			}
			return nil, NewListAssociatedUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListAssociatedForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list associated", err)
			}
			err = ValidateListAssociatedForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list associated", err)
			}
			return nil, NewListAssociatedForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListAssociatedNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list associated", err)
			}
			err = ValidateListAssociatedNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list associated", err)
			}
			return nil, NewListAssociatedNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListAssociatedBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list associated", err)
			}
			err = ValidateListAssociatedBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list associated", err)
			}
			return nil, NewListAssociatedBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "list associated", resp.StatusCode, string(body))
		}
	}
}

// BuildDownloadPhotoRequest instantiates a HTTP request object with method and
// path set to call the "station" service "download photo" endpoint
func (c *Client) BuildDownloadPhotoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		stationID int32
	)
	{
		p, ok := v.(*station.DownloadPhotoPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "download photo", "*station.DownloadPhotoPayload", v)
		}
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DownloadPhotoStationPath(stationID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "download photo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDownloadPhotoRequest returns an encoder for requests sent to the
// station download photo server.
func EncodeDownloadPhotoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.DownloadPhotoPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "download photo", "*station.DownloadPhotoPayload", v)
		}
		if p.IfNoneMatch != nil {
			head := *p.IfNoneMatch
			req.Header.Set("If-None-Match", head)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDownloadPhotoResponse returns a decoder for responses returned by the
// station download photo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDownloadPhotoResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDownloadPhotoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DownloadPhotoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "download photo", err)
			}
			p := NewDownloadPhotoDownloadedPhotoOK(&body)
			view := "default"
			vres := &stationviews.DownloadedPhoto{Projected: p, View: view}
			if err = stationviews.ValidateDownloadedPhoto(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "download photo", err)
			}
			res := station.NewDownloadedPhoto(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DownloadPhotoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "download photo", err)
			}
			err = ValidateDownloadPhotoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "download photo", err)
			}
			return nil, NewDownloadPhotoUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DownloadPhotoForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "download photo", err)
			}
			err = ValidateDownloadPhotoForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "download photo", err)
			}
			return nil, NewDownloadPhotoForbidden(&body)
		case http.StatusNotFound:
			var (
				body DownloadPhotoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "download photo", err)
			}
			err = ValidateDownloadPhotoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "download photo", err)
			}
			return nil, NewDownloadPhotoNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DownloadPhotoBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "download photo", err)
			}
			err = ValidateDownloadPhotoBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "download photo", err)
			}
			return nil, NewDownloadPhotoBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "download photo", resp.StatusCode, string(body))
		}
	}
}

// BuildListAllRequest instantiates a HTTP request object with method and path
// set to call the "station" service "list all" endpoint
func (c *Client) BuildListAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAllStationPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "list all", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListAllRequest returns an encoder for requests sent to the station
// list all server.
func EncodeListAllRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.ListAllPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "list all", "*station.ListAllPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.PageSize != nil {
			values.Add("pageSize", fmt.Sprintf("%v", *p.PageSize))
		}
		if p.OwnerID != nil {
			values.Add("ownerId", fmt.Sprintf("%v", *p.OwnerID))
		}
		if p.Query != nil {
			values.Add("query", *p.Query)
		}
		if p.SortBy != nil {
			values.Add("sortBy", *p.SortBy)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListAllResponse returns a decoder for responses returned by the
// station list all endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListAllResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeListAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListAllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list all", err)
			}
			p := NewListAllPageOfStationsOK(&body)
			view := "default"
			vres := &stationviews.PageOfStations{Projected: p, View: view}
			if err = stationviews.ValidatePageOfStations(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "list all", err)
			}
			res := station.NewPageOfStations(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListAllUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list all", err)
			}
			err = ValidateListAllUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list all", err)
			}
			return nil, NewListAllUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ListAllForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list all", err)
			}
			err = ValidateListAllForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list all", err)
			}
			return nil, NewListAllForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListAllNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list all", err)
			}
			err = ValidateListAllNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list all", err)
			}
			return nil, NewListAllNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListAllBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "list all", err)
			}
			err = ValidateListAllBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "list all", err)
			}
			return nil, NewListAllBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "list all", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "station" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		stationID int32
	)
	{
		p, ok := v.(*station.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "delete", "*station.DeletePayload", v)
		}
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteStationPath(stationID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the station
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "delete", "*station.DeletePayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the station
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "delete", err)
			}
			err = ValidateDeleteUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "delete", err)
			}
			return nil, NewDeleteUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "delete", err)
			}
			err = ValidateDeleteForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "delete", err)
			}
			return nil, NewDeleteForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "delete", err)
			}
			err = ValidateDeleteBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "delete", err)
			}
			return nil, NewDeleteBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "delete", resp.StatusCode, string(body))
		}
	}
}

// BuildAdminSearchRequest instantiates a HTTP request object with method and
// path set to call the "station" service "admin search" endpoint
func (c *Client) BuildAdminSearchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AdminSearchStationPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "admin search", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAdminSearchRequest returns an encoder for requests sent to the station
// admin search server.
func EncodeAdminSearchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.AdminSearchPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "admin search", "*station.AdminSearchPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("query", p.Query)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeAdminSearchResponse returns a decoder for responses returned by the
// station admin search endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAdminSearchResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeAdminSearchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AdminSearchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "admin search", err)
			}
			p := NewAdminSearchPageOfStationsOK(&body)
			view := "default"
			vres := &stationviews.PageOfStations{Projected: p, View: view}
			if err = stationviews.ValidatePageOfStations(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "admin search", err)
			}
			res := station.NewPageOfStations(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AdminSearchUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "admin search", err)
			}
			err = ValidateAdminSearchUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "admin search", err)
			}
			return nil, NewAdminSearchUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AdminSearchForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "admin search", err)
			}
			err = ValidateAdminSearchForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "admin search", err)
			}
			return nil, NewAdminSearchForbidden(&body)
		case http.StatusNotFound:
			var (
				body AdminSearchNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "admin search", err)
			}
			err = ValidateAdminSearchNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "admin search", err)
			}
			return nil, NewAdminSearchNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AdminSearchBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "admin search", err)
			}
			err = ValidateAdminSearchBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "admin search", err)
			}
			return nil, NewAdminSearchBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "admin search", resp.StatusCode, string(body))
		}
	}
}

// BuildProgressRequest instantiates a HTTP request object with method and path
// set to call the "station" service "progress" endpoint
func (c *Client) BuildProgressRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		stationID int32
	)
	{
		p, ok := v.(*station.ProgressPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("station", "progress", "*station.ProgressPayload", v)
		}
		stationID = p.StationID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ProgressStationPath(stationID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("station", "progress", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeProgressRequest returns an encoder for requests sent to the station
// progress server.
func EncodeProgressRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*station.ProgressPayload)
		if !ok {
			return goahttp.ErrInvalidType("station", "progress", "*station.ProgressPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeProgressResponse returns a decoder for responses returned by the
// station progress endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeProgressResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeProgressResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ProgressResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "progress", err)
			}
			p := NewProgressStationProgressOK(&body)
			view := "default"
			vres := &stationviews.StationProgress{Projected: p, View: view}
			if err = stationviews.ValidateStationProgress(vres); err != nil {
				return nil, goahttp.ErrValidationError("station", "progress", err)
			}
			res := station.NewStationProgress(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ProgressUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "progress", err)
			}
			err = ValidateProgressUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "progress", err)
			}
			return nil, NewProgressUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ProgressForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "progress", err)
			}
			err = ValidateProgressForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "progress", err)
			}
			return nil, NewProgressForbidden(&body)
		case http.StatusNotFound:
			var (
				body ProgressNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "progress", err)
			}
			err = ValidateProgressNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "progress", err)
			}
			return nil, NewProgressNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ProgressBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("station", "progress", err)
			}
			err = ValidateProgressBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("station", "progress", err)
			}
			return nil, NewProgressBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("station", "progress", resp.StatusCode, string(body))
		}
	}
}

// unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView builds a
// value of type *stationviews.StationOwnerView from a value of type
// *StationOwnerResponseBody.
func unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(v *StationOwnerResponseBody) *stationviews.StationOwnerView {
	res := &stationviews.StationOwnerView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalStationInterestingnessResponseBodyToStationviewsStationInterestingnessView
// builds a value of type *stationviews.StationInterestingnessView from a value
// of type *StationInterestingnessResponseBody.
func unmarshalStationInterestingnessResponseBodyToStationviewsStationInterestingnessView(v *StationInterestingnessResponseBody) *stationviews.StationInterestingnessView {
	res := &stationviews.StationInterestingnessView{}
	res.Windows = make([]*stationviews.StationInterestingnessWindowView, len(v.Windows))
	for i, val := range v.Windows {
		res.Windows[i] = unmarshalStationInterestingnessWindowResponseBodyToStationviewsStationInterestingnessWindowView(val)
	}

	return res
}

// unmarshalStationInterestingnessWindowResponseBodyToStationviewsStationInterestingnessWindowView
// builds a value of type *stationviews.StationInterestingnessWindowView from a
// value of type *StationInterestingnessWindowResponseBody.
func unmarshalStationInterestingnessWindowResponseBodyToStationviewsStationInterestingnessWindowView(v *StationInterestingnessWindowResponseBody) *stationviews.StationInterestingnessWindowView {
	res := &stationviews.StationInterestingnessWindowView{
		Seconds:         v.Seconds,
		Interestingness: v.Interestingness,
		Value:           v.Value,
		Time:            v.Time,
	}

	return res
}

// unmarshalStationProjectAttributesResponseBodyToStationviewsStationProjectAttributesView
// builds a value of type *stationviews.StationProjectAttributesView from a
// value of type *StationProjectAttributesResponseBody.
func unmarshalStationProjectAttributesResponseBodyToStationviewsStationProjectAttributesView(v *StationProjectAttributesResponseBody) *stationviews.StationProjectAttributesView {
	res := &stationviews.StationProjectAttributesView{}
	res.Attributes = make([]*stationviews.StationProjectAttributeView, len(v.Attributes))
	for i, val := range v.Attributes {
		res.Attributes[i] = unmarshalStationProjectAttributeResponseBodyToStationviewsStationProjectAttributeView(val)
	}

	return res
}

// unmarshalStationProjectAttributeResponseBodyToStationviewsStationProjectAttributeView
// builds a value of type *stationviews.StationProjectAttributeView from a
// value of type *StationProjectAttributeResponseBody.
func unmarshalStationProjectAttributeResponseBodyToStationviewsStationProjectAttributeView(v *StationProjectAttributeResponseBody) *stationviews.StationProjectAttributeView {
	res := &stationviews.StationProjectAttributeView{
		ProjectID:   v.ProjectID,
		AttributeID: v.AttributeID,
		Name:        v.Name,
		StringValue: v.StringValue,
	}

	return res
}

// unmarshalStationUploadResponseBodyToStationviewsStationUploadView builds a
// value of type *stationviews.StationUploadView from a value of type
// *StationUploadResponseBody.
func unmarshalStationUploadResponseBodyToStationviewsStationUploadView(v *StationUploadResponseBody) *stationviews.StationUploadView {
	res := &stationviews.StationUploadView{
		ID:       v.ID,
		Time:     v.Time,
		UploadID: v.UploadID,
		Size:     v.Size,
		URL:      v.URL,
		Type:     v.Type,
	}
	res.Blocks = make([]int64, len(v.Blocks))
	for i, val := range v.Blocks {
		res.Blocks[i] = val
	}

	return res
}

// unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView builds a
// value of type *stationviews.StationPhotosView from a value of type
// *StationPhotosResponseBody.
func unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView(v *StationPhotosResponseBody) *stationviews.StationPhotosView {
	res := &stationviews.StationPhotosView{
		Small: v.Small,
	}

	return res
}

// unmarshalStationConfigurationsResponseBodyToStationviewsStationConfigurationsView
// builds a value of type *stationviews.StationConfigurationsView from a value
// of type *StationConfigurationsResponseBody.
func unmarshalStationConfigurationsResponseBodyToStationviewsStationConfigurationsView(v *StationConfigurationsResponseBody) *stationviews.StationConfigurationsView {
	res := &stationviews.StationConfigurationsView{}
	res.All = make([]*stationviews.StationConfigurationView, len(v.All))
	for i, val := range v.All {
		res.All[i] = unmarshalStationConfigurationResponseBodyToStationviewsStationConfigurationView(val)
	}

	return res
}

// unmarshalStationConfigurationResponseBodyToStationviewsStationConfigurationView
// builds a value of type *stationviews.StationConfigurationView from a value
// of type *StationConfigurationResponseBody.
func unmarshalStationConfigurationResponseBodyToStationviewsStationConfigurationView(v *StationConfigurationResponseBody) *stationviews.StationConfigurationView {
	res := &stationviews.StationConfigurationView{
		ID:           v.ID,
		Time:         v.Time,
		ProvisionID:  v.ProvisionID,
		MetaRecordID: v.MetaRecordID,
		SourceID:     v.SourceID,
	}
	res.Modules = make([]*stationviews.StationModuleView, len(v.Modules))
	for i, val := range v.Modules {
		res.Modules[i] = unmarshalStationModuleResponseBodyToStationviewsStationModuleView(val)
	}

	return res
}

// unmarshalStationModuleResponseBodyToStationviewsStationModuleView builds a
// value of type *stationviews.StationModuleView from a value of type
// *StationModuleResponseBody.
func unmarshalStationModuleResponseBodyToStationviewsStationModuleView(v *StationModuleResponseBody) *stationviews.StationModuleView {
	res := &stationviews.StationModuleView{
		ID:           v.ID,
		HardwareID:   v.HardwareID,
		MetaRecordID: v.MetaRecordID,
		Name:         v.Name,
		Position:     v.Position,
		Flags:        v.Flags,
		Internal:     v.Internal,
		FullKey:      v.FullKey,
	}
	res.Sensors = make([]*stationviews.StationSensorView, len(v.Sensors))
	for i, val := range v.Sensors {
		res.Sensors[i] = unmarshalStationSensorResponseBodyToStationviewsStationSensorView(val)
	}
	if v.Meta != nil {
		res.Meta = make(map[string]interface{}, len(v.Meta))
		for key, val := range v.Meta {
			tk := key
			tv := val
			res.Meta[tk] = tv
		}
	}

	return res
}

// unmarshalStationSensorResponseBodyToStationviewsStationSensorView builds a
// value of type *stationviews.StationSensorView from a value of type
// *StationSensorResponseBody.
func unmarshalStationSensorResponseBodyToStationviewsStationSensorView(v *StationSensorResponseBody) *stationviews.StationSensorView {
	res := &stationviews.StationSensorView{
		Name:          v.Name,
		UnitOfMeasure: v.UnitOfMeasure,
		Key:           v.Key,
		FullKey:       v.FullKey,
	}
	if v.Reading != nil {
		res.Reading = unmarshalSensorReadingResponseBodyToStationviewsSensorReadingView(v.Reading)
	}
	res.Ranges = make([]*stationviews.SensorRangeView, len(v.Ranges))
	for i, val := range v.Ranges {
		res.Ranges[i] = unmarshalSensorRangeResponseBodyToStationviewsSensorRangeView(val)
	}
	if v.Meta != nil {
		res.Meta = make(map[string]interface{}, len(v.Meta))
		for key, val := range v.Meta {
			tk := key
			tv := val
			res.Meta[tk] = tv
		}
	}

	return res
}

// unmarshalSensorReadingResponseBodyToStationviewsSensorReadingView builds a
// value of type *stationviews.SensorReadingView from a value of type
// *SensorReadingResponseBody.
func unmarshalSensorReadingResponseBodyToStationviewsSensorReadingView(v *SensorReadingResponseBody) *stationviews.SensorReadingView {
	if v == nil {
		return nil
	}
	res := &stationviews.SensorReadingView{
		Last: v.Last,
		Time: v.Time,
	}

	return res
}

// unmarshalSensorRangeResponseBodyToStationviewsSensorRangeView builds a value
// of type *stationviews.SensorRangeView from a value of type
// *SensorRangeResponseBody.
func unmarshalSensorRangeResponseBodyToStationviewsSensorRangeView(v *SensorRangeResponseBody) *stationviews.SensorRangeView {
	res := &stationviews.SensorRangeView{
		Minimum: v.Minimum,
		Maximum: v.Maximum,
	}

	return res
}

// unmarshalStationLocationResponseBodyToStationviewsStationLocationView builds
// a value of type *stationviews.StationLocationView from a value of type
// *StationLocationResponseBody.
func unmarshalStationLocationResponseBodyToStationviewsStationLocationView(v *StationLocationResponseBody) *stationviews.StationLocationView {
	if v == nil {
		return nil
	}
	res := &stationviews.StationLocationView{
		URL: v.URL,
	}
	if v.Precise != nil {
		res.Precise = make([]float64, len(v.Precise))
		for i, val := range v.Precise {
			res.Precise[i] = val
		}
	}
	if v.Regions != nil {
		res.Regions = make([]*stationviews.StationRegionView, len(v.Regions))
		for i, val := range v.Regions {
			res.Regions[i] = unmarshalStationRegionResponseBodyToStationviewsStationRegionView(val)
		}
	}

	return res
}

// unmarshalStationRegionResponseBodyToStationviewsStationRegionView builds a
// value of type *stationviews.StationRegionView from a value of type
// *StationRegionResponseBody.
func unmarshalStationRegionResponseBodyToStationviewsStationRegionView(v *StationRegionResponseBody) *stationviews.StationRegionView {
	if v == nil {
		return nil
	}
	res := &stationviews.StationRegionView{
		Name: v.Name,
	}
	res.Shape = make([][][]float64, len(v.Shape))
	for i, val := range v.Shape {
		res.Shape[i] = make([][]float64, len(val))
		for j, val := range val {
			res.Shape[i][j] = make([]float64, len(val))
			for k, val := range val {
				res.Shape[i][j][k] = val
			}
		}
	}

	return res
}

// unmarshalStationDataSummaryResponseBodyToStationviewsStationDataSummaryView
// builds a value of type *stationviews.StationDataSummaryView from a value of
// type *StationDataSummaryResponseBody.
func unmarshalStationDataSummaryResponseBodyToStationviewsStationDataSummaryView(v *StationDataSummaryResponseBody) *stationviews.StationDataSummaryView {
	if v == nil {
		return nil
	}
	res := &stationviews.StationDataSummaryView{
		Start:           v.Start,
		End:             v.End,
		NumberOfSamples: v.NumberOfSamples,
	}

	return res
}

// unmarshalStationFullResponseBodyToStationviewsStationFullView builds a value
// of type *stationviews.StationFullView from a value of type
// *StationFullResponseBody.
func unmarshalStationFullResponseBodyToStationviewsStationFullView(v *StationFullResponseBody) *stationviews.StationFullView {
	res := &stationviews.StationFullView{
		ID:                 v.ID,
		Name:               v.Name,
		DeviceID:           v.DeviceID,
		ReadOnly:           v.ReadOnly,
		Battery:            v.Battery,
		RecordingStartedAt: v.RecordingStartedAt,
		MemoryUsed:         v.MemoryUsed,
		MemoryAvailable:    v.MemoryAvailable,
		FirmwareNumber:     v.FirmwareNumber,
		FirmwareTime:       v.FirmwareTime,
		UpdatedAt:          v.UpdatedAt,
		LocationName:       v.LocationName,
		PlaceNameOther:     v.PlaceNameOther,
		PlaceNameNative:    v.PlaceNameNative,
		SyncedAt:           v.SyncedAt,
		IngestionAt:        v.IngestionAt,
	}
	res.Owner = unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(v.Owner)
	res.Interestingness = unmarshalStationInterestingnessResponseBodyToStationviewsStationInterestingnessView(v.Interestingness)
	res.Attributes = unmarshalStationProjectAttributesResponseBodyToStationviewsStationProjectAttributesView(v.Attributes)
	res.Uploads = make([]*stationviews.StationUploadView, len(v.Uploads))
	for i, val := range v.Uploads {
		res.Uploads[i] = unmarshalStationUploadResponseBodyToStationviewsStationUploadView(val)
	}
	res.Photos = unmarshalStationPhotosResponseBodyToStationviewsStationPhotosView(v.Photos)
	res.Configurations = unmarshalStationConfigurationsResponseBodyToStationviewsStationConfigurationsView(v.Configurations)
	if v.Location != nil {
		res.Location = unmarshalStationLocationResponseBodyToStationviewsStationLocationView(v.Location)
	}
	if v.Data != nil {
		res.Data = unmarshalStationDataSummaryResponseBodyToStationviewsStationDataSummaryView(v.Data)
	}

	return res
}

// unmarshalAssociatedStationResponseBodyToStationviewsAssociatedStationView
// builds a value of type *stationviews.AssociatedStationView from a value of
// type *AssociatedStationResponseBody.
func unmarshalAssociatedStationResponseBodyToStationviewsAssociatedStationView(v *AssociatedStationResponseBody) *stationviews.AssociatedStationView {
	res := &stationviews.AssociatedStationView{}
	res.Station = unmarshalStationFullResponseBodyToStationviewsStationFullView(v.Station)
	if v.Project != nil {
		res.Project = unmarshalAssociatedViaProjectResponseBodyToStationviewsAssociatedViaProjectView(v.Project)
	}
	if v.Location != nil {
		res.Location = unmarshalAssociatedViaLocationResponseBodyToStationviewsAssociatedViaLocationView(v.Location)
	}
	if v.Manual != nil {
		res.Manual = unmarshalAssociatedViaManualResponseBodyToStationviewsAssociatedViaManualView(v.Manual)
	}

	return res
}

// unmarshalAssociatedViaProjectResponseBodyToStationviewsAssociatedViaProjectView
// builds a value of type *stationviews.AssociatedViaProjectView from a value
// of type *AssociatedViaProjectResponseBody.
func unmarshalAssociatedViaProjectResponseBodyToStationviewsAssociatedViaProjectView(v *AssociatedViaProjectResponseBody) *stationviews.AssociatedViaProjectView {
	if v == nil {
		return nil
	}
	res := &stationviews.AssociatedViaProjectView{
		ID: v.ID,
	}

	return res
}

// unmarshalAssociatedViaLocationResponseBodyToStationviewsAssociatedViaLocationView
// builds a value of type *stationviews.AssociatedViaLocationView from a value
// of type *AssociatedViaLocationResponseBody.
func unmarshalAssociatedViaLocationResponseBodyToStationviewsAssociatedViaLocationView(v *AssociatedViaLocationResponseBody) *stationviews.AssociatedViaLocationView {
	if v == nil {
		return nil
	}
	res := &stationviews.AssociatedViaLocationView{
		Distance: v.Distance,
	}

	return res
}

// unmarshalAssociatedViaManualResponseBodyToStationviewsAssociatedViaManualView
// builds a value of type *stationviews.AssociatedViaManualView from a value of
// type *AssociatedViaManualResponseBody.
func unmarshalAssociatedViaManualResponseBodyToStationviewsAssociatedViaManualView(v *AssociatedViaManualResponseBody) *stationviews.AssociatedViaManualView {
	if v == nil {
		return nil
	}
	res := &stationviews.AssociatedViaManualView{
		Priority: v.Priority,
	}

	return res
}

// unmarshalEssentialStationResponseBodyToStationviewsEssentialStationView
// builds a value of type *stationviews.EssentialStationView from a value of
// type *EssentialStationResponseBody.
func unmarshalEssentialStationResponseBodyToStationviewsEssentialStationView(v *EssentialStationResponseBody) *stationviews.EssentialStationView {
	res := &stationviews.EssentialStationView{
		ID:                 v.ID,
		DeviceID:           v.DeviceID,
		Name:               v.Name,
		CreatedAt:          v.CreatedAt,
		UpdatedAt:          v.UpdatedAt,
		RecordingStartedAt: v.RecordingStartedAt,
		MemoryUsed:         v.MemoryUsed,
		MemoryAvailable:    v.MemoryAvailable,
		FirmwareNumber:     v.FirmwareNumber,
		FirmwareTime:       v.FirmwareTime,
		LastIngestionAt:    v.LastIngestionAt,
	}
	res.Owner = unmarshalStationOwnerResponseBodyToStationviewsStationOwnerView(v.Owner)
	if v.Location != nil {
		res.Location = unmarshalStationLocationResponseBodyToStationviewsStationLocationView(v.Location)
	}

	return res
}

// unmarshalStationJobResponseBodyToStationviewsStationJobView builds a value
// of type *stationviews.StationJobView from a value of type
// *StationJobResponseBody.
func unmarshalStationJobResponseBodyToStationviewsStationJobView(v *StationJobResponseBody) *stationviews.StationJobView {
	res := &stationviews.StationJobView{
		Title:       v.Title,
		StartedAt:   v.StartedAt,
		CompletedAt: v.CompletedAt,
		Progress:    v.Progress,
	}

	return res
}
