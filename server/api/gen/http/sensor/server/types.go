// Code generated by goa v3.2.4, DO NOT EDIT.
//
// sensor HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	sensor "github.com/fieldkit/cloud/server/api/gen/sensor"
	sensorviews "github.com/fieldkit/cloud/server/api/gen/sensor/views"
	goa "goa.design/goa/v3/pkg"
)

// BookmarkResponseBody is the type of the "sensor" service "bookmark" endpoint
// HTTP response body.
type BookmarkResponseBody struct {
	URL      string `form:"url" json:"url" xml:"url"`
	Bookmark string `form:"bookmark" json:"bookmark" xml:"bookmark"`
	Token    string `form:"token" json:"token" xml:"token"`
}

// ResolveResponseBody is the type of the "sensor" service "resolve" endpoint
// HTTP response body.
type ResolveResponseBody struct {
	URL      string `form:"url" json:"url" xml:"url"`
	Bookmark string `form:"bookmark" json:"bookmark" xml:"bookmark"`
	Token    string `form:"token" json:"token" xml:"token"`
}

// MetaUnauthorizedResponseBody is the type of the "sensor" service "meta"
// endpoint HTTP response body for the "unauthorized" error.
type MetaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MetaForbiddenResponseBody is the type of the "sensor" service "meta"
// endpoint HTTP response body for the "forbidden" error.
type MetaForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MetaNotFoundResponseBody is the type of the "sensor" service "meta" endpoint
// HTTP response body for the "not-found" error.
type MetaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MetaBadRequestResponseBody is the type of the "sensor" service "meta"
// endpoint HTTP response body for the "bad-request" error.
type MetaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationMetaUnauthorizedResponseBody is the type of the "sensor" service
// "station meta" endpoint HTTP response body for the "unauthorized" error.
type StationMetaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationMetaForbiddenResponseBody is the type of the "sensor" service
// "station meta" endpoint HTTP response body for the "forbidden" error.
type StationMetaForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationMetaNotFoundResponseBody is the type of the "sensor" service "station
// meta" endpoint HTTP response body for the "not-found" error.
type StationMetaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationMetaBadRequestResponseBody is the type of the "sensor" service
// "station meta" endpoint HTTP response body for the "bad-request" error.
type StationMetaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SensorMetaUnauthorizedResponseBody is the type of the "sensor" service
// "sensor meta" endpoint HTTP response body for the "unauthorized" error.
type SensorMetaUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SensorMetaForbiddenResponseBody is the type of the "sensor" service "sensor
// meta" endpoint HTTP response body for the "forbidden" error.
type SensorMetaForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SensorMetaNotFoundResponseBody is the type of the "sensor" service "sensor
// meta" endpoint HTTP response body for the "not-found" error.
type SensorMetaNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SensorMetaBadRequestResponseBody is the type of the "sensor" service "sensor
// meta" endpoint HTTP response body for the "bad-request" error.
type SensorMetaBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataUnauthorizedResponseBody is the type of the "sensor" service "data"
// endpoint HTTP response body for the "unauthorized" error.
type DataUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataForbiddenResponseBody is the type of the "sensor" service "data"
// endpoint HTTP response body for the "forbidden" error.
type DataForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataNotFoundResponseBody is the type of the "sensor" service "data" endpoint
// HTTP response body for the "not-found" error.
type DataNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataBadRequestResponseBody is the type of the "sensor" service "data"
// endpoint HTTP response body for the "bad-request" error.
type DataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BookmarkUnauthorizedResponseBody is the type of the "sensor" service
// "bookmark" endpoint HTTP response body for the "unauthorized" error.
type BookmarkUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BookmarkForbiddenResponseBody is the type of the "sensor" service "bookmark"
// endpoint HTTP response body for the "forbidden" error.
type BookmarkForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BookmarkNotFoundResponseBody is the type of the "sensor" service "bookmark"
// endpoint HTTP response body for the "not-found" error.
type BookmarkNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// BookmarkBadRequestResponseBody is the type of the "sensor" service
// "bookmark" endpoint HTTP response body for the "bad-request" error.
type BookmarkBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveUnauthorizedResponseBody is the type of the "sensor" service
// "resolve" endpoint HTTP response body for the "unauthorized" error.
type ResolveUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveForbiddenResponseBody is the type of the "sensor" service "resolve"
// endpoint HTTP response body for the "forbidden" error.
type ResolveForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveNotFoundResponseBody is the type of the "sensor" service "resolve"
// endpoint HTTP response body for the "not-found" error.
type ResolveNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResolveBadRequestResponseBody is the type of the "sensor" service "resolve"
// endpoint HTTP response body for the "bad-request" error.
type ResolveBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewBookmarkResponseBody builds the HTTP response body from the result of the
// "bookmark" endpoint of the "sensor" service.
func NewBookmarkResponseBody(res *sensorviews.SavedBookmarkView) *BookmarkResponseBody {
	body := &BookmarkResponseBody{
		URL:      *res.URL,
		Bookmark: *res.Bookmark,
		Token:    *res.Token,
	}
	return body
}

// NewResolveResponseBody builds the HTTP response body from the result of the
// "resolve" endpoint of the "sensor" service.
func NewResolveResponseBody(res *sensorviews.SavedBookmarkView) *ResolveResponseBody {
	body := &ResolveResponseBody{
		URL:      *res.URL,
		Bookmark: *res.Bookmark,
		Token:    *res.Token,
	}
	return body
}

// NewMetaUnauthorizedResponseBody builds the HTTP response body from the
// result of the "meta" endpoint of the "sensor" service.
func NewMetaUnauthorizedResponseBody(res *goa.ServiceError) *MetaUnauthorizedResponseBody {
	body := &MetaUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMetaForbiddenResponseBody builds the HTTP response body from the result
// of the "meta" endpoint of the "sensor" service.
func NewMetaForbiddenResponseBody(res *goa.ServiceError) *MetaForbiddenResponseBody {
	body := &MetaForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMetaNotFoundResponseBody builds the HTTP response body from the result of
// the "meta" endpoint of the "sensor" service.
func NewMetaNotFoundResponseBody(res *goa.ServiceError) *MetaNotFoundResponseBody {
	body := &MetaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMetaBadRequestResponseBody builds the HTTP response body from the result
// of the "meta" endpoint of the "sensor" service.
func NewMetaBadRequestResponseBody(res *goa.ServiceError) *MetaBadRequestResponseBody {
	body := &MetaBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationMetaUnauthorizedResponseBody builds the HTTP response body from
// the result of the "station meta" endpoint of the "sensor" service.
func NewStationMetaUnauthorizedResponseBody(res *goa.ServiceError) *StationMetaUnauthorizedResponseBody {
	body := &StationMetaUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationMetaForbiddenResponseBody builds the HTTP response body from the
// result of the "station meta" endpoint of the "sensor" service.
func NewStationMetaForbiddenResponseBody(res *goa.ServiceError) *StationMetaForbiddenResponseBody {
	body := &StationMetaForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationMetaNotFoundResponseBody builds the HTTP response body from the
// result of the "station meta" endpoint of the "sensor" service.
func NewStationMetaNotFoundResponseBody(res *goa.ServiceError) *StationMetaNotFoundResponseBody {
	body := &StationMetaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationMetaBadRequestResponseBody builds the HTTP response body from the
// result of the "station meta" endpoint of the "sensor" service.
func NewStationMetaBadRequestResponseBody(res *goa.ServiceError) *StationMetaBadRequestResponseBody {
	body := &StationMetaBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSensorMetaUnauthorizedResponseBody builds the HTTP response body from the
// result of the "sensor meta" endpoint of the "sensor" service.
func NewSensorMetaUnauthorizedResponseBody(res *goa.ServiceError) *SensorMetaUnauthorizedResponseBody {
	body := &SensorMetaUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSensorMetaForbiddenResponseBody builds the HTTP response body from the
// result of the "sensor meta" endpoint of the "sensor" service.
func NewSensorMetaForbiddenResponseBody(res *goa.ServiceError) *SensorMetaForbiddenResponseBody {
	body := &SensorMetaForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSensorMetaNotFoundResponseBody builds the HTTP response body from the
// result of the "sensor meta" endpoint of the "sensor" service.
func NewSensorMetaNotFoundResponseBody(res *goa.ServiceError) *SensorMetaNotFoundResponseBody {
	body := &SensorMetaNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSensorMetaBadRequestResponseBody builds the HTTP response body from the
// result of the "sensor meta" endpoint of the "sensor" service.
func NewSensorMetaBadRequestResponseBody(res *goa.ServiceError) *SensorMetaBadRequestResponseBody {
	body := &SensorMetaBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataUnauthorizedResponseBody builds the HTTP response body from the
// result of the "data" endpoint of the "sensor" service.
func NewDataUnauthorizedResponseBody(res *goa.ServiceError) *DataUnauthorizedResponseBody {
	body := &DataUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataForbiddenResponseBody builds the HTTP response body from the result
// of the "data" endpoint of the "sensor" service.
func NewDataForbiddenResponseBody(res *goa.ServiceError) *DataForbiddenResponseBody {
	body := &DataForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataNotFoundResponseBody builds the HTTP response body from the result of
// the "data" endpoint of the "sensor" service.
func NewDataNotFoundResponseBody(res *goa.ServiceError) *DataNotFoundResponseBody {
	body := &DataNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataBadRequestResponseBody builds the HTTP response body from the result
// of the "data" endpoint of the "sensor" service.
func NewDataBadRequestResponseBody(res *goa.ServiceError) *DataBadRequestResponseBody {
	body := &DataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBookmarkUnauthorizedResponseBody builds the HTTP response body from the
// result of the "bookmark" endpoint of the "sensor" service.
func NewBookmarkUnauthorizedResponseBody(res *goa.ServiceError) *BookmarkUnauthorizedResponseBody {
	body := &BookmarkUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBookmarkForbiddenResponseBody builds the HTTP response body from the
// result of the "bookmark" endpoint of the "sensor" service.
func NewBookmarkForbiddenResponseBody(res *goa.ServiceError) *BookmarkForbiddenResponseBody {
	body := &BookmarkForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBookmarkNotFoundResponseBody builds the HTTP response body from the
// result of the "bookmark" endpoint of the "sensor" service.
func NewBookmarkNotFoundResponseBody(res *goa.ServiceError) *BookmarkNotFoundResponseBody {
	body := &BookmarkNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewBookmarkBadRequestResponseBody builds the HTTP response body from the
// result of the "bookmark" endpoint of the "sensor" service.
func NewBookmarkBadRequestResponseBody(res *goa.ServiceError) *BookmarkBadRequestResponseBody {
	body := &BookmarkBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveUnauthorizedResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "sensor" service.
func NewResolveUnauthorizedResponseBody(res *goa.ServiceError) *ResolveUnauthorizedResponseBody {
	body := &ResolveUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveForbiddenResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "sensor" service.
func NewResolveForbiddenResponseBody(res *goa.ServiceError) *ResolveForbiddenResponseBody {
	body := &ResolveForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveNotFoundResponseBody builds the HTTP response body from the result
// of the "resolve" endpoint of the "sensor" service.
func NewResolveNotFoundResponseBody(res *goa.ServiceError) *ResolveNotFoundResponseBody {
	body := &ResolveNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResolveBadRequestResponseBody builds the HTTP response body from the
// result of the "resolve" endpoint of the "sensor" service.
func NewResolveBadRequestResponseBody(res *goa.ServiceError) *ResolveBadRequestResponseBody {
	body := &ResolveBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationMetaPayload builds a sensor service station meta endpoint payload.
func NewStationMetaPayload(stations *string) *sensor.StationMetaPayload {
	v := &sensor.StationMetaPayload{}
	v.Stations = stations

	return v
}

// NewDataPayload builds a sensor service data endpoint payload.
func NewDataPayload(start *int64, end *int64, stations *string, sensors *string, resolution *int32, aggregate *string, complete *bool, tail *int32, backend *string, auth *string) *sensor.DataPayload {
	v := &sensor.DataPayload{}
	v.Start = start
	v.End = end
	v.Stations = stations
	v.Sensors = sensors
	v.Resolution = resolution
	v.Aggregate = aggregate
	v.Complete = complete
	v.Tail = tail
	v.Backend = backend
	v.Auth = auth

	return v
}

// NewBookmarkPayload builds a sensor service bookmark endpoint payload.
func NewBookmarkPayload(bookmark string, auth *string) *sensor.BookmarkPayload {
	v := &sensor.BookmarkPayload{}
	v.Bookmark = bookmark
	v.Auth = auth

	return v
}

// NewResolvePayload builds a sensor service resolve endpoint payload.
func NewResolvePayload(v2 string, auth *string) *sensor.ResolvePayload {
	v := &sensor.ResolvePayload{}
	v.V = v2
	v.Auth = auth

	return v
}
