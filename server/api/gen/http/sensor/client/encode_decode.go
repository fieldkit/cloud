// Code generated by goa v3.2.4, DO NOT EDIT.
//
// sensor HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	sensor "github.com/fieldkit/cloud/server/api/gen/sensor"
	sensorviews "github.com/fieldkit/cloud/server/api/gen/sensor/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildMetaRequest instantiates a HTTP request object with method and path set
// to call the "sensor" service "meta" endpoint
func (c *Client) BuildMetaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MetaSensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "meta", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMetaResponse returns a decoder for responses returned by the sensor
// meta endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeMetaResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeMetaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "meta", err)
			}
			res := NewMetaResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body MetaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "meta", err)
			}
			err = ValidateMetaUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "meta", err)
			}
			return nil, NewMetaUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body MetaForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "meta", err)
			}
			err = ValidateMetaForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "meta", err)
			}
			return nil, NewMetaForbidden(&body)
		case http.StatusNotFound:
			var (
				body MetaNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "meta", err)
			}
			err = ValidateMetaNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "meta", err)
			}
			return nil, NewMetaNotFound(&body)
		case http.StatusBadRequest:
			var (
				body MetaBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "meta", err)
			}
			err = ValidateMetaBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "meta", err)
			}
			return nil, NewMetaBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "meta", resp.StatusCode, string(body))
		}
	}
}

// BuildStationMetaRequest instantiates a HTTP request object with method and
// path set to call the "sensor" service "station meta" endpoint
func (c *Client) BuildStationMetaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StationMetaSensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "station meta", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStationMetaRequest returns an encoder for requests sent to the sensor
// station meta server.
func EncodeStationMetaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sensor.StationMetaPayload)
		if !ok {
			return goahttp.ErrInvalidType("sensor", "station meta", "*sensor.StationMetaPayload", v)
		}
		values := req.URL.Query()
		if p.Stations != nil {
			values.Add("stations", *p.Stations)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeStationMetaResponse returns a decoder for responses returned by the
// sensor station meta endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeStationMetaResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeStationMetaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "station meta", err)
			}
			res := NewStationMetaResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body StationMetaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "station meta", err)
			}
			err = ValidateStationMetaUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "station meta", err)
			}
			return nil, NewStationMetaUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body StationMetaForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "station meta", err)
			}
			err = ValidateStationMetaForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "station meta", err)
			}
			return nil, NewStationMetaForbidden(&body)
		case http.StatusNotFound:
			var (
				body StationMetaNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "station meta", err)
			}
			err = ValidateStationMetaNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "station meta", err)
			}
			return nil, NewStationMetaNotFound(&body)
		case http.StatusBadRequest:
			var (
				body StationMetaBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "station meta", err)
			}
			err = ValidateStationMetaBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "station meta", err)
			}
			return nil, NewStationMetaBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "station meta", resp.StatusCode, string(body))
		}
	}
}

// BuildSensorMetaRequest instantiates a HTTP request object with method and
// path set to call the "sensor" service "sensor meta" endpoint
func (c *Client) BuildSensorMetaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SensorMetaSensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "sensor meta", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSensorMetaResponse returns a decoder for responses returned by the
// sensor sensor meta endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSensorMetaResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeSensorMetaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "sensor meta", err)
			}
			res := NewSensorMetaResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SensorMetaUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "sensor meta", err)
			}
			err = ValidateSensorMetaUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "sensor meta", err)
			}
			return nil, NewSensorMetaUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body SensorMetaForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "sensor meta", err)
			}
			err = ValidateSensorMetaForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "sensor meta", err)
			}
			return nil, NewSensorMetaForbidden(&body)
		case http.StatusNotFound:
			var (
				body SensorMetaNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "sensor meta", err)
			}
			err = ValidateSensorMetaNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "sensor meta", err)
			}
			return nil, NewSensorMetaNotFound(&body)
		case http.StatusBadRequest:
			var (
				body SensorMetaBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "sensor meta", err)
			}
			err = ValidateSensorMetaBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "sensor meta", err)
			}
			return nil, NewSensorMetaBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "sensor meta", resp.StatusCode, string(body))
		}
	}
}

// BuildDataRequest instantiates a HTTP request object with method and path set
// to call the "sensor" service "data" endpoint
func (c *Client) BuildDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DataSensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "data", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDataRequest returns an encoder for requests sent to the sensor data
// server.
func EncodeDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sensor.DataPayload)
		if !ok {
			return goahttp.ErrInvalidType("sensor", "data", "*sensor.DataPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Start != nil {
			values.Add("start", fmt.Sprintf("%v", *p.Start))
		}
		if p.End != nil {
			values.Add("end", fmt.Sprintf("%v", *p.End))
		}
		if p.Stations != nil {
			values.Add("stations", *p.Stations)
		}
		if p.Sensors != nil {
			values.Add("sensors", *p.Sensors)
		}
		if p.Resolution != nil {
			values.Add("resolution", fmt.Sprintf("%v", *p.Resolution))
		}
		if p.Aggregate != nil {
			values.Add("aggregate", *p.Aggregate)
		}
		if p.Complete != nil {
			values.Add("complete", fmt.Sprintf("%v", *p.Complete))
		}
		if p.Tail != nil {
			values.Add("tail", fmt.Sprintf("%v", *p.Tail))
		}
		if p.Backend != nil {
			values.Add("backend", *p.Backend)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDataResponse returns a decoder for responses returned by the sensor
// data endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDataResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "data", err)
			}
			res := NewDataResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DataUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "data", err)
			}
			err = ValidateDataUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "data", err)
			}
			return nil, NewDataUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DataForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "data", err)
			}
			err = ValidateDataForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "data", err)
			}
			return nil, NewDataForbidden(&body)
		case http.StatusNotFound:
			var (
				body DataNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "data", err)
			}
			err = ValidateDataNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "data", err)
			}
			return nil, NewDataNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "data", err)
			}
			err = ValidateDataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "data", err)
			}
			return nil, NewDataBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "data", resp.StatusCode, string(body))
		}
	}
}

// BuildTailRequest instantiates a HTTP request object with method and path set
// to call the "sensor" service "tail" endpoint
func (c *Client) BuildTailRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TailSensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "tail", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTailRequest returns an encoder for requests sent to the sensor tail
// server.
func EncodeTailRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sensor.TailPayload)
		if !ok {
			return goahttp.ErrInvalidType("sensor", "tail", "*sensor.TailPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Stations != nil {
			values.Add("stations", *p.Stations)
		}
		if p.Backend != nil {
			values.Add("backend", *p.Backend)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeTailResponse returns a decoder for responses returned by the sensor
// tail endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeTailResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeTailResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "tail", err)
			}
			res := NewTailResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body TailUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "tail", err)
			}
			err = ValidateTailUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "tail", err)
			}
			return nil, NewTailUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body TailForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "tail", err)
			}
			err = ValidateTailForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "tail", err)
			}
			return nil, NewTailForbidden(&body)
		case http.StatusNotFound:
			var (
				body TailNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "tail", err)
			}
			err = ValidateTailNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "tail", err)
			}
			return nil, NewTailNotFound(&body)
		case http.StatusBadRequest:
			var (
				body TailBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "tail", err)
			}
			err = ValidateTailBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "tail", err)
			}
			return nil, NewTailBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "tail", resp.StatusCode, string(body))
		}
	}
}

// BuildRecentlyRequest instantiates a HTTP request object with method and path
// set to call the "sensor" service "recently" endpoint
func (c *Client) BuildRecentlyRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RecentlySensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "recently", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRecentlyRequest returns an encoder for requests sent to the sensor
// recently server.
func EncodeRecentlyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sensor.RecentlyPayload)
		if !ok {
			return goahttp.ErrInvalidType("sensor", "recently", "*sensor.RecentlyPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Stations != nil {
			values.Add("stations", *p.Stations)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRecentlyResponse returns a decoder for responses returned by the
// sensor recently endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeRecentlyResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeRecentlyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "recently", err)
			}
			res := NewRecentlyResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body RecentlyUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "recently", err)
			}
			err = ValidateRecentlyUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "recently", err)
			}
			return nil, NewRecentlyUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body RecentlyForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "recently", err)
			}
			err = ValidateRecentlyForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "recently", err)
			}
			return nil, NewRecentlyForbidden(&body)
		case http.StatusNotFound:
			var (
				body RecentlyNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "recently", err)
			}
			err = ValidateRecentlyNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "recently", err)
			}
			return nil, NewRecentlyNotFound(&body)
		case http.StatusBadRequest:
			var (
				body RecentlyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "recently", err)
			}
			err = ValidateRecentlyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "recently", err)
			}
			return nil, NewRecentlyBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "recently", resp.StatusCode, string(body))
		}
	}
}

// BuildBookmarkRequest instantiates a HTTP request object with method and path
// set to call the "sensor" service "bookmark" endpoint
func (c *Client) BuildBookmarkRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BookmarkSensorPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "bookmark", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBookmarkRequest returns an encoder for requests sent to the sensor
// bookmark server.
func EncodeBookmarkRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sensor.BookmarkPayload)
		if !ok {
			return goahttp.ErrInvalidType("sensor", "bookmark", "*sensor.BookmarkPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("bookmark", p.Bookmark)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeBookmarkResponse returns a decoder for responses returned by the
// sensor bookmark endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeBookmarkResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeBookmarkResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body BookmarkResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "bookmark", err)
			}
			p := NewBookmarkSavedBookmarkOK(&body)
			view := "default"
			vres := &sensorviews.SavedBookmark{Projected: p, View: view}
			if err = sensorviews.ValidateSavedBookmark(vres); err != nil {
				return nil, goahttp.ErrValidationError("sensor", "bookmark", err)
			}
			res := sensor.NewSavedBookmark(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body BookmarkUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "bookmark", err)
			}
			err = ValidateBookmarkUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "bookmark", err)
			}
			return nil, NewBookmarkUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body BookmarkForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "bookmark", err)
			}
			err = ValidateBookmarkForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "bookmark", err)
			}
			return nil, NewBookmarkForbidden(&body)
		case http.StatusNotFound:
			var (
				body BookmarkNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "bookmark", err)
			}
			err = ValidateBookmarkNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "bookmark", err)
			}
			return nil, NewBookmarkNotFound(&body)
		case http.StatusBadRequest:
			var (
				body BookmarkBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "bookmark", err)
			}
			err = ValidateBookmarkBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "bookmark", err)
			}
			return nil, NewBookmarkBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "bookmark", resp.StatusCode, string(body))
		}
	}
}

// BuildResolveRequest instantiates a HTTP request object with method and path
// set to call the "sensor" service "resolve" endpoint
func (c *Client) BuildResolveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ResolveSensorPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sensor", "resolve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeResolveRequest returns an encoder for requests sent to the sensor
// resolve server.
func EncodeResolveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sensor.ResolvePayload)
		if !ok {
			return goahttp.ErrInvalidType("sensor", "resolve", "*sensor.ResolvePayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("v", p.V)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeResolveResponse returns a decoder for responses returned by the sensor
// resolve endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeResolveResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeResolveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ResolveResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "resolve", err)
			}
			p := NewResolveSavedBookmarkOK(&body)
			view := "default"
			vres := &sensorviews.SavedBookmark{Projected: p, View: view}
			if err = sensorviews.ValidateSavedBookmark(vres); err != nil {
				return nil, goahttp.ErrValidationError("sensor", "resolve", err)
			}
			res := sensor.NewSavedBookmark(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ResolveUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "resolve", err)
			}
			err = ValidateResolveUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "resolve", err)
			}
			return nil, NewResolveUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body ResolveForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "resolve", err)
			}
			err = ValidateResolveForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "resolve", err)
			}
			return nil, NewResolveForbidden(&body)
		case http.StatusNotFound:
			var (
				body ResolveNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "resolve", err)
			}
			err = ValidateResolveNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "resolve", err)
			}
			return nil, NewResolveNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ResolveBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sensor", "resolve", err)
			}
			err = ValidateResolveBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sensor", "resolve", err)
			}
			return nil, NewResolveBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sensor", "resolve", resp.StatusCode, string(body))
		}
	}
}
