// Code generated by goa v3.2.4, DO NOT EDIT.
//
// notifications HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	notifications "github.com/fieldkit/cloud/server/api/gen/notifications"
	notificationsviews "github.com/fieldkit/cloud/server/api/gen/notifications/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListenRequest instantiates a HTTP request object with method and path
// set to call the "notifications" service "listen" endpoint
func (c *Client) BuildListenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: ListenNotificationsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("notifications", "listen", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListenResponse returns a decoder for responses returned by the
// notifications listen endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListenResponse may return the following errors:
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- "unauthorized" (type notifications.Unauthorized): http.StatusUnauthorized
//	- error: internal error
func DecodeListenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "listen", err)
			}
			p := NewListenNotificationOK(&body)
			view := "default"
			vres := &notificationsviews.Notification{Projected: p, View: view}
			if err = notificationsviews.ValidateNotification(vres); err != nil {
				return nil, goahttp.ErrValidationError("notifications", "listen", err)
			}
			res := notifications.NewNotification(vres)
			return res, nil
		case http.StatusForbidden:
			var (
				body ListenForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "listen", err)
			}
			err = ValidateListenForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("notifications", "listen", err)
			}
			return nil, NewListenForbidden(&body)
		case http.StatusNotFound:
			var (
				body ListenNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "listen", err)
			}
			err = ValidateListenNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("notifications", "listen", err)
			}
			return nil, NewListenNotFound(&body)
		case http.StatusBadRequest:
			var (
				body ListenBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "listen", err)
			}
			err = ValidateListenBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("notifications", "listen", err)
			}
			return nil, NewListenBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body ListenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "listen", err)
			}
			return nil, NewListenUnauthorized(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("notifications", "listen", resp.StatusCode, string(body))
		}
	}
}
