// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	data "github.com/fieldkit/cloud/server/api/gen/data"
	dataviews "github.com/fieldkit/cloud/server/api/gen/data/views"
	goa "goa.design/goa/v3/pkg"
)

// DeviceSummaryResponseBody is the type of the "data" service "device summary"
// endpoint HTTP response body.
type DeviceSummaryResponseBody struct {
	Provisions DeviceProvisionSummaryResponseBodyCollection `form:"provisions" json:"provisions" xml:"provisions"`
}

// DeviceSummaryUnauthorizedResponseBody is the type of the "data" service
// "device summary" endpoint HTTP response body for the "unauthorized" error.
type DeviceSummaryUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeviceSummaryForbiddenResponseBody is the type of the "data" service "device
// summary" endpoint HTTP response body for the "forbidden" error.
type DeviceSummaryForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeviceSummaryNotFoundResponseBody is the type of the "data" service "device
// summary" endpoint HTTP response body for the "not-found" error.
type DeviceSummaryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeviceSummaryBadRequestResponseBody is the type of the "data" service
// "device summary" endpoint HTTP response body for the "bad-request" error.
type DeviceSummaryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeviceProvisionSummaryResponseBodyCollection is used to define fields on
// response body types.
type DeviceProvisionSummaryResponseBodyCollection []*DeviceProvisionSummaryResponseBody

// DeviceProvisionSummaryResponseBody is used to define fields on response body
// types.
type DeviceProvisionSummaryResponseBody struct {
	Generation string                         `form:"generation" json:"generation" xml:"generation"`
	Created    int64                          `form:"created" json:"created" xml:"created"`
	Updated    int64                          `form:"updated" json:"updated" xml:"updated"`
	Meta       *DeviceMetaSummaryResponseBody `form:"meta" json:"meta" xml:"meta"`
	Data       *DeviceDataSummaryResponseBody `form:"data" json:"data" xml:"data"`
}

// DeviceMetaSummaryResponseBody is used to define fields on response body
// types.
type DeviceMetaSummaryResponseBody struct {
	Size  int64 `form:"size" json:"size" xml:"size"`
	First int64 `form:"first" json:"first" xml:"first"`
	Last  int64 `form:"last" json:"last" xml:"last"`
}

// DeviceDataSummaryResponseBody is used to define fields on response body
// types.
type DeviceDataSummaryResponseBody struct {
	Size  int64 `form:"size" json:"size" xml:"size"`
	First int64 `form:"first" json:"first" xml:"first"`
	Last  int64 `form:"last" json:"last" xml:"last"`
}

// NewDeviceSummaryResponseBody builds the HTTP response body from the result
// of the "device summary" endpoint of the "data" service.
func NewDeviceSummaryResponseBody(res *dataviews.DeviceDataSummaryResponseView) *DeviceSummaryResponseBody {
	body := &DeviceSummaryResponseBody{}
	if res.Provisions != nil {
		body.Provisions = make([]*DeviceProvisionSummaryResponseBody, len(res.Provisions))
		for i, val := range res.Provisions {
			body.Provisions[i] = marshalDataviewsDeviceProvisionSummaryViewToDeviceProvisionSummaryResponseBody(val)
		}
	}
	return body
}

// NewDeviceSummaryUnauthorizedResponseBody builds the HTTP response body from
// the result of the "device summary" endpoint of the "data" service.
func NewDeviceSummaryUnauthorizedResponseBody(res *goa.ServiceError) *DeviceSummaryUnauthorizedResponseBody {
	body := &DeviceSummaryUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeviceSummaryForbiddenResponseBody builds the HTTP response body from the
// result of the "device summary" endpoint of the "data" service.
func NewDeviceSummaryForbiddenResponseBody(res *goa.ServiceError) *DeviceSummaryForbiddenResponseBody {
	body := &DeviceSummaryForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeviceSummaryNotFoundResponseBody builds the HTTP response body from the
// result of the "device summary" endpoint of the "data" service.
func NewDeviceSummaryNotFoundResponseBody(res *goa.ServiceError) *DeviceSummaryNotFoundResponseBody {
	body := &DeviceSummaryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeviceSummaryBadRequestResponseBody builds the HTTP response body from
// the result of the "device summary" endpoint of the "data" service.
func NewDeviceSummaryBadRequestResponseBody(res *goa.ServiceError) *DeviceSummaryBadRequestResponseBody {
	body := &DeviceSummaryBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeviceSummaryPayload builds a data service device summary endpoint
// payload.
func NewDeviceSummaryPayload(deviceID string, auth *string) *data.DeviceSummaryPayload {
	v := &data.DeviceSummaryPayload{}
	v.DeviceID = deviceID
	v.Auth = auth

	return v
}
