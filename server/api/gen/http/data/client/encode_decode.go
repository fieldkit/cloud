// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	data "github.com/fieldkit/cloud/server/api/gen/data"
	dataviews "github.com/fieldkit/cloud/server/api/gen/data/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildDeviceSummaryRequest instantiates a HTTP request object with method and
// path set to call the "data" service "device summary" endpoint
func (c *Client) BuildDeviceSummaryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		deviceID string
	)
	{
		p, ok := v.(*data.DeviceSummaryPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data", "device summary", "*data.DeviceSummaryPayload", v)
		}
		deviceID = p.DeviceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeviceSummaryDataPath(deviceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data", "device summary", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeviceSummaryRequest returns an encoder for requests sent to the data
// device summary server.
func EncodeDeviceSummaryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*data.DeviceSummaryPayload)
		if !ok {
			return goahttp.ErrInvalidType("data", "device summary", "*data.DeviceSummaryPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeviceSummaryResponse returns a decoder for responses returned by the
// data device summary endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeviceSummaryResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeDeviceSummaryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeviceSummaryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "device summary", err)
			}
			p := NewDeviceSummaryDeviceDataSummaryResponseOK(&body)
			view := "default"
			vres := &dataviews.DeviceDataSummaryResponse{Projected: p, View: view}
			if err = dataviews.ValidateDeviceDataSummaryResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("data", "device summary", err)
			}
			res := data.NewDeviceDataSummaryResponse(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DeviceSummaryUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "device summary", err)
			}
			err = ValidateDeviceSummaryUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "device summary", err)
			}
			return nil, NewDeviceSummaryUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeviceSummaryForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "device summary", err)
			}
			err = ValidateDeviceSummaryForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "device summary", err)
			}
			return nil, NewDeviceSummaryForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeviceSummaryNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "device summary", err)
			}
			err = ValidateDeviceSummaryNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "device summary", err)
			}
			return nil, NewDeviceSummaryNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeviceSummaryBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data", "device summary", err)
			}
			err = ValidateDeviceSummaryBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data", "device summary", err)
			}
			return nil, NewDeviceSummaryBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data", "device summary", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDeviceProvisionSummaryResponseBodyToDataviewsDeviceProvisionSummaryView
// builds a value of type *dataviews.DeviceProvisionSummaryView from a value of
// type *DeviceProvisionSummaryResponseBody.
func unmarshalDeviceProvisionSummaryResponseBodyToDataviewsDeviceProvisionSummaryView(v *DeviceProvisionSummaryResponseBody) *dataviews.DeviceProvisionSummaryView {
	res := &dataviews.DeviceProvisionSummaryView{
		Generation: v.Generation,
		Created:    v.Created,
		Updated:    v.Updated,
	}
	res.Meta = unmarshalDeviceMetaSummaryResponseBodyToDataviewsDeviceMetaSummaryView(v.Meta)
	res.Data = unmarshalDeviceDataSummaryResponseBodyToDataviewsDeviceDataSummaryView(v.Data)

	return res
}

// unmarshalDeviceMetaSummaryResponseBodyToDataviewsDeviceMetaSummaryView
// builds a value of type *dataviews.DeviceMetaSummaryView from a value of type
// *DeviceMetaSummaryResponseBody.
func unmarshalDeviceMetaSummaryResponseBodyToDataviewsDeviceMetaSummaryView(v *DeviceMetaSummaryResponseBody) *dataviews.DeviceMetaSummaryView {
	res := &dataviews.DeviceMetaSummaryView{
		Size:  v.Size,
		First: v.First,
		Last:  v.Last,
	}

	return res
}

// unmarshalDeviceDataSummaryResponseBodyToDataviewsDeviceDataSummaryView
// builds a value of type *dataviews.DeviceDataSummaryView from a value of type
// *DeviceDataSummaryResponseBody.
func unmarshalDeviceDataSummaryResponseBodyToDataviewsDeviceDataSummaryView(v *DeviceDataSummaryResponseBody) *dataviews.DeviceDataSummaryView {
	res := &dataviews.DeviceDataSummaryView{
		Size:  v.Size,
		First: v.First,
		Last:  v.Last,
	}

	return res
}
