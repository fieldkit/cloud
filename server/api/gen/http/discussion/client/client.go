// Code generated by goa v3.2.4, DO NOT EDIT.
//
// discussion client HTTP transport
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the discussion service endpoint HTTP clients.
type Client struct {
	// Project Doer is the HTTP client used to make requests to the project
	// endpoint.
	ProjectDoer goahttp.Doer

	// Data Doer is the HTTP client used to make requests to the data endpoint.
	DataDoer goahttp.Doer

	// PostMessage Doer is the HTTP client used to make requests to the post
	// message endpoint.
	PostMessageDoer goahttp.Doer

	// UpdateMessage Doer is the HTTP client used to make requests to the update
	// message endpoint.
	UpdateMessageDoer goahttp.Doer

	// DeleteMessage Doer is the HTTP client used to make requests to the delete
	// message endpoint.
	DeleteMessageDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the discussion service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ProjectDoer:         doer,
		DataDoer:            doer,
		PostMessageDoer:     doer,
		UpdateMessageDoer:   doer,
		DeleteMessageDoer:   doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Project returns an endpoint that makes HTTP requests to the discussion
// service project server.
func (c *Client) Project() goa.Endpoint {
	var (
		encodeRequest  = EncodeProjectRequest(c.encoder)
		decodeResponse = DecodeProjectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildProjectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ProjectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("discussion", "project", err)
		}
		return decodeResponse(resp)
	}
}

// Data returns an endpoint that makes HTTP requests to the discussion service
// data server.
func (c *Client) Data() goa.Endpoint {
	var (
		encodeRequest  = EncodeDataRequest(c.encoder)
		decodeResponse = DecodeDataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DataDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("discussion", "data", err)
		}
		return decodeResponse(resp)
	}
}

// PostMessage returns an endpoint that makes HTTP requests to the discussion
// service post message server.
func (c *Client) PostMessage() goa.Endpoint {
	var (
		encodeRequest  = EncodePostMessageRequest(c.encoder)
		decodeResponse = DecodePostMessageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPostMessageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PostMessageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("discussion", "post message", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateMessage returns an endpoint that makes HTTP requests to the discussion
// service update message server.
func (c *Client) UpdateMessage() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateMessageRequest(c.encoder)
		decodeResponse = DecodeUpdateMessageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateMessageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateMessageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("discussion", "update message", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteMessage returns an endpoint that makes HTTP requests to the discussion
// service delete message server.
func (c *Client) DeleteMessage() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteMessageRequest(c.encoder)
		decodeResponse = DecodeDeleteMessageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteMessageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteMessageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("discussion", "delete message", err)
		}
		return decodeResponse(resp)
	}
}
