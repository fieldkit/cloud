// Code generated by goa v3.2.4, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	"unicode/utf8"

	user "github.com/fieldkit/cloud/server/api/gen/user"
	userviews "github.com/fieldkit/cloud/server/api/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "user" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RecoveryLookupRequestBody is the type of the "user" service "recovery
// lookup" endpoint HTTP request body.
type RecoveryLookupRequestBody struct {
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// RecoveryRequestBody is the type of the "user" service "recovery" endpoint
// HTTP request body.
type RecoveryRequestBody struct {
	Token    *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RefreshRequestBody is the type of the "user" service "refresh" endpoint HTTP
// request body.
type RefreshRequestBody struct {
	RefreshToken *string `form:"refreshToken,omitempty" json:"refreshToken,omitempty" xml:"refreshToken,omitempty"`
}

// AddRequestBody is the type of the "user" service "add" endpoint HTTP request
// body.
type AddRequestBody struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email       *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password    *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	InviteToken *string `form:"invite_token,omitempty" json:"invite_token,omitempty" xml:"invite_token,omitempty"`
}

// UpdateRequestBody is the type of the "user" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Name  *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Bio   *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
}

// ChangePasswordRequestBody is the type of the "user" service "change
// password" endpoint HTTP request body.
type ChangePasswordRequestBody struct {
	OldPassword *string `form:"oldPassword,omitempty" json:"oldPassword,omitempty" xml:"oldPassword,omitempty"`
	NewPassword *string `form:"newPassword,omitempty" json:"newPassword,omitempty" xml:"newPassword,omitempty"`
}

// AdminDeleteRequestBody is the type of the "user" service "admin delete"
// endpoint HTTP request body.
type AdminDeleteRequestBody struct {
	Email    *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RolesResponseBody is the type of the "user" service "roles" endpoint HTTP
// response body.
type RolesResponseBody struct {
	Roles []*AvailableRoleResponseBody `form:"roles" json:"roles" xml:"roles"`
}

// DownloadPhotoResponseBody is the type of the "user" service "download photo"
// endpoint HTTP response body.
type DownloadPhotoResponseBody struct {
	Length      int64  `form:"length" json:"length" xml:"length"`
	Body        []byte `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	ContentType string `form:"contentType" json:"contentType" xml:"contentType"`
	Etag        string `form:"etag" json:"etag" xml:"etag"`
}

// AddResponseBody is the type of the "user" service "add" endpoint HTTP
// response body.
type AddResponseBody struct {
	ID        int32                  `form:"id" json:"id" xml:"id"`
	Name      string                 `form:"name" json:"name" xml:"name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Bio       string                 `form:"bio" json:"bio" xml:"bio"`
	Photo     *UserPhotoResponseBody `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	Admin     bool                   `form:"admin" json:"admin" xml:"admin"`
	UpdatedAt int64                  `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// UpdateResponseBody is the type of the "user" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	ID        int32                  `form:"id" json:"id" xml:"id"`
	Name      string                 `form:"name" json:"name" xml:"name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Bio       string                 `form:"bio" json:"bio" xml:"bio"`
	Photo     *UserPhotoResponseBody `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	Admin     bool                   `form:"admin" json:"admin" xml:"admin"`
	UpdatedAt int64                  `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// ChangePasswordResponseBody is the type of the "user" service "change
// password" endpoint HTTP response body.
type ChangePasswordResponseBody struct {
	ID        int32                  `form:"id" json:"id" xml:"id"`
	Name      string                 `form:"name" json:"name" xml:"name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Bio       string                 `form:"bio" json:"bio" xml:"bio"`
	Photo     *UserPhotoResponseBody `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	Admin     bool                   `form:"admin" json:"admin" xml:"admin"`
	UpdatedAt int64                  `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// GetCurrentResponseBody is the type of the "user" service "get current"
// endpoint HTTP response body.
type GetCurrentResponseBody struct {
	ID        int32                  `form:"id" json:"id" xml:"id"`
	Name      string                 `form:"name" json:"name" xml:"name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Bio       string                 `form:"bio" json:"bio" xml:"bio"`
	Photo     *UserPhotoResponseBody `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	Admin     bool                   `form:"admin" json:"admin" xml:"admin"`
	UpdatedAt int64                  `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// ListByProjectResponseBody is the type of the "user" service "list by
// project" endpoint HTTP response body.
type ListByProjectResponseBody struct {
	Users ProjectUserResponseBodyCollection `form:"users" json:"users" xml:"users"`
}

// IssueTransmissionTokenResponseBody is the type of the "user" service "issue
// transmission token" endpoint HTTP response body.
type IssueTransmissionTokenResponseBody struct {
	Token string `form:"token" json:"token" xml:"token"`
	URL   string `form:"url" json:"url" xml:"url"`
}

// ProjectRoleResponseCollection is the type of the "user" service "project
// roles" endpoint HTTP response body.
type ProjectRoleResponseCollection []*ProjectRoleResponse

// AdminSearchResponseBody is the type of the "user" service "admin search"
// endpoint HTTP response body.
type AdminSearchResponseBody struct {
	Users UserCollectionResponseBody `form:"users" json:"users" xml:"users"`
}

// RolesUnauthorizedResponseBody is the type of the "user" service "roles"
// endpoint HTTP response body for the "unauthorized" error.
type RolesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RolesForbiddenResponseBody is the type of the "user" service "roles"
// endpoint HTTP response body for the "forbidden" error.
type RolesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RolesNotFoundResponseBody is the type of the "user" service "roles" endpoint
// HTTP response body for the "not-found" error.
type RolesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RolesBadRequestResponseBody is the type of the "user" service "roles"
// endpoint HTTP response body for the "bad-request" error.
type RolesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteUnauthorizedResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "unauthorized" error.
type DeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteForbiddenResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "forbidden" error.
type DeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "not-found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "user" service "delete"
// endpoint HTTP response body for the "bad-request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadPhotoUnauthorizedResponseBody is the type of the "user" service
// "upload photo" endpoint HTTP response body for the "unauthorized" error.
type UploadPhotoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadPhotoForbiddenResponseBody is the type of the "user" service "upload
// photo" endpoint HTTP response body for the "forbidden" error.
type UploadPhotoForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadPhotoNotFoundResponseBody is the type of the "user" service "upload
// photo" endpoint HTTP response body for the "not-found" error.
type UploadPhotoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadPhotoBadRequestResponseBody is the type of the "user" service "upload
// photo" endpoint HTTP response body for the "bad-request" error.
type UploadPhotoBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoUnauthorizedResponseBody is the type of the "user" service
// "download photo" endpoint HTTP response body for the "unauthorized" error.
type DownloadPhotoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoForbiddenResponseBody is the type of the "user" service
// "download photo" endpoint HTTP response body for the "forbidden" error.
type DownloadPhotoForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoNotFoundResponseBody is the type of the "user" service
// "download photo" endpoint HTTP response body for the "not-found" error.
type DownloadPhotoNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DownloadPhotoBadRequestResponseBody is the type of the "user" service
// "download photo" endpoint HTTP response body for the "bad-request" error.
type DownloadPhotoBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginUserUnverifiedResponseBody is the type of the "user" service "login"
// endpoint HTTP response body for the "user-unverified" error.
type LoginUserUnverifiedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginForbiddenResponseBody is the type of the "user" service "login"
// endpoint HTTP response body for the "forbidden" error.
type LoginForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginUnauthorizedResponseBody is the type of the "user" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginNotFoundResponseBody is the type of the "user" service "login" endpoint
// HTTP response body for the "not-found" error.
type LoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginBadRequestResponseBody is the type of the "user" service "login"
// endpoint HTTP response body for the "bad-request" error.
type LoginBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryLookupUnauthorizedResponseBody is the type of the "user" service
// "recovery lookup" endpoint HTTP response body for the "unauthorized" error.
type RecoveryLookupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryLookupForbiddenResponseBody is the type of the "user" service
// "recovery lookup" endpoint HTTP response body for the "forbidden" error.
type RecoveryLookupForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryLookupNotFoundResponseBody is the type of the "user" service
// "recovery lookup" endpoint HTTP response body for the "not-found" error.
type RecoveryLookupNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryLookupBadRequestResponseBody is the type of the "user" service
// "recovery lookup" endpoint HTTP response body for the "bad-request" error.
type RecoveryLookupBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryUnauthorizedResponseBody is the type of the "user" service
// "recovery" endpoint HTTP response body for the "unauthorized" error.
type RecoveryUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryForbiddenResponseBody is the type of the "user" service "recovery"
// endpoint HTTP response body for the "forbidden" error.
type RecoveryForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryNotFoundResponseBody is the type of the "user" service "recovery"
// endpoint HTTP response body for the "not-found" error.
type RecoveryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RecoveryBadRequestResponseBody is the type of the "user" service "recovery"
// endpoint HTTP response body for the "bad-request" error.
type RecoveryBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResumeUnauthorizedResponseBody is the type of the "user" service "resume"
// endpoint HTTP response body for the "unauthorized" error.
type ResumeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResumeForbiddenResponseBody is the type of the "user" service "resume"
// endpoint HTTP response body for the "forbidden" error.
type ResumeForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResumeNotFoundResponseBody is the type of the "user" service "resume"
// endpoint HTTP response body for the "not-found" error.
type ResumeNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResumeBadRequestResponseBody is the type of the "user" service "resume"
// endpoint HTTP response body for the "bad-request" error.
type ResumeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutUnauthorizedResponseBody is the type of the "user" service "logout"
// endpoint HTTP response body for the "unauthorized" error.
type LogoutUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutForbiddenResponseBody is the type of the "user" service "logout"
// endpoint HTTP response body for the "forbidden" error.
type LogoutForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutNotFoundResponseBody is the type of the "user" service "logout"
// endpoint HTTP response body for the "not-found" error.
type LogoutNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutBadRequestResponseBody is the type of the "user" service "logout"
// endpoint HTTP response body for the "bad-request" error.
type LogoutBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshUnauthorizedResponseBody is the type of the "user" service "refresh"
// endpoint HTTP response body for the "unauthorized" error.
type RefreshUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshForbiddenResponseBody is the type of the "user" service "refresh"
// endpoint HTTP response body for the "forbidden" error.
type RefreshForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshNotFoundResponseBody is the type of the "user" service "refresh"
// endpoint HTTP response body for the "not-found" error.
type RefreshNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// RefreshBadRequestResponseBody is the type of the "user" service "refresh"
// endpoint HTTP response body for the "bad-request" error.
type RefreshBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendValidationUnauthorizedResponseBody is the type of the "user" service
// "send validation" endpoint HTTP response body for the "unauthorized" error.
type SendValidationUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendValidationForbiddenResponseBody is the type of the "user" service "send
// validation" endpoint HTTP response body for the "forbidden" error.
type SendValidationForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendValidationNotFoundResponseBody is the type of the "user" service "send
// validation" endpoint HTTP response body for the "not-found" error.
type SendValidationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SendValidationBadRequestResponseBody is the type of the "user" service "send
// validation" endpoint HTTP response body for the "bad-request" error.
type SendValidationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ValidateUnauthorizedResponseBody is the type of the "user" service
// "validate" endpoint HTTP response body for the "unauthorized" error.
type ValidateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ValidateForbiddenResponseBody is the type of the "user" service "validate"
// endpoint HTTP response body for the "forbidden" error.
type ValidateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ValidateNotFoundResponseBody is the type of the "user" service "validate"
// endpoint HTTP response body for the "not-found" error.
type ValidateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ValidateBadRequestResponseBody is the type of the "user" service "validate"
// endpoint HTTP response body for the "bad-request" error.
type ValidateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddUserEmailRegisteredResponseBody is the type of the "user" service "add"
// endpoint HTTP response body for the "user-email-registered" error.
type AddUserEmailRegisteredResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddBadRequestResponseBody is the type of the "user" service "add" endpoint
// HTTP response body for the "bad-request" error.
type AddBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddUnauthorizedResponseBody is the type of the "user" service "add" endpoint
// HTTP response body for the "unauthorized" error.
type AddUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddForbiddenResponseBody is the type of the "user" service "add" endpoint
// HTTP response body for the "forbidden" error.
type AddForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddNotFoundResponseBody is the type of the "user" service "add" endpoint
// HTTP response body for the "not-found" error.
type AddNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateUnauthorizedResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "unauthorized" error.
type UpdateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateForbiddenResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "forbidden" error.
type UpdateForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNotFoundResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "not-found" error.
type UpdateNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "user" service "update"
// endpoint HTTP response body for the "bad-request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChangePasswordUnauthorizedResponseBody is the type of the "user" service
// "change password" endpoint HTTP response body for the "unauthorized" error.
type ChangePasswordUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChangePasswordForbiddenResponseBody is the type of the "user" service
// "change password" endpoint HTTP response body for the "forbidden" error.
type ChangePasswordForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChangePasswordNotFoundResponseBody is the type of the "user" service "change
// password" endpoint HTTP response body for the "not-found" error.
type ChangePasswordNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ChangePasswordBadRequestResponseBody is the type of the "user" service
// "change password" endpoint HTTP response body for the "bad-request" error.
type ChangePasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCurrentUnauthorizedResponseBody is the type of the "user" service "get
// current" endpoint HTTP response body for the "unauthorized" error.
type GetCurrentUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCurrentForbiddenResponseBody is the type of the "user" service "get
// current" endpoint HTTP response body for the "forbidden" error.
type GetCurrentForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCurrentNotFoundResponseBody is the type of the "user" service "get
// current" endpoint HTTP response body for the "not-found" error.
type GetCurrentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCurrentBadRequestResponseBody is the type of the "user" service "get
// current" endpoint HTTP response body for the "bad-request" error.
type GetCurrentBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListByProjectUnauthorizedResponseBody is the type of the "user" service
// "list by project" endpoint HTTP response body for the "unauthorized" error.
type ListByProjectUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListByProjectForbiddenResponseBody is the type of the "user" service "list
// by project" endpoint HTTP response body for the "forbidden" error.
type ListByProjectForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListByProjectNotFoundResponseBody is the type of the "user" service "list by
// project" endpoint HTTP response body for the "not-found" error.
type ListByProjectNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListByProjectBadRequestResponseBody is the type of the "user" service "list
// by project" endpoint HTTP response body for the "bad-request" error.
type ListByProjectBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IssueTransmissionTokenUnauthorizedResponseBody is the type of the "user"
// service "issue transmission token" endpoint HTTP response body for the
// "unauthorized" error.
type IssueTransmissionTokenUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IssueTransmissionTokenForbiddenResponseBody is the type of the "user"
// service "issue transmission token" endpoint HTTP response body for the
// "forbidden" error.
type IssueTransmissionTokenForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IssueTransmissionTokenNotFoundResponseBody is the type of the "user" service
// "issue transmission token" endpoint HTTP response body for the "not-found"
// error.
type IssueTransmissionTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// IssueTransmissionTokenBadRequestResponseBody is the type of the "user"
// service "issue transmission token" endpoint HTTP response body for the
// "bad-request" error.
type IssueTransmissionTokenBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectRolesUnauthorizedResponseBody is the type of the "user" service
// "project roles" endpoint HTTP response body for the "unauthorized" error.
type ProjectRolesUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectRolesForbiddenResponseBody is the type of the "user" service "project
// roles" endpoint HTTP response body for the "forbidden" error.
type ProjectRolesForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectRolesNotFoundResponseBody is the type of the "user" service "project
// roles" endpoint HTTP response body for the "not-found" error.
type ProjectRolesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectRolesBadRequestResponseBody is the type of the "user" service
// "project roles" endpoint HTTP response body for the "bad-request" error.
type ProjectRolesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminDeleteUnauthorizedResponseBody is the type of the "user" service "admin
// delete" endpoint HTTP response body for the "unauthorized" error.
type AdminDeleteUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminDeleteForbiddenResponseBody is the type of the "user" service "admin
// delete" endpoint HTTP response body for the "forbidden" error.
type AdminDeleteForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminDeleteNotFoundResponseBody is the type of the "user" service "admin
// delete" endpoint HTTP response body for the "not-found" error.
type AdminDeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminDeleteBadRequestResponseBody is the type of the "user" service "admin
// delete" endpoint HTTP response body for the "bad-request" error.
type AdminDeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchUnauthorizedResponseBody is the type of the "user" service "admin
// search" endpoint HTTP response body for the "unauthorized" error.
type AdminSearchUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchForbiddenResponseBody is the type of the "user" service "admin
// search" endpoint HTTP response body for the "forbidden" error.
type AdminSearchForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchNotFoundResponseBody is the type of the "user" service "admin
// search" endpoint HTTP response body for the "not-found" error.
type AdminSearchNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AdminSearchBadRequestResponseBody is the type of the "user" service "admin
// search" endpoint HTTP response body for the "bad-request" error.
type AdminSearchBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AvailableRoleResponseBody is used to define fields on response body types.
type AvailableRoleResponseBody struct {
	ID   int32  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// UserPhotoResponseBody is used to define fields on response body types.
type UserPhotoResponseBody struct {
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// ProjectUserResponseBodyCollection is used to define fields on response body
// types.
type ProjectUserResponseBodyCollection []*ProjectUserResponseBody

// ProjectUserResponseBody is used to define fields on response body types.
type ProjectUserResponseBody struct {
	User       *UserResponseBody `form:"user" json:"user" xml:"user"`
	Role       string            `form:"role" json:"role" xml:"role"`
	Membership string            `form:"membership" json:"membership" xml:"membership"`
	Invited    bool              `form:"invited" json:"invited" xml:"invited"`
	Accepted   bool              `form:"accepted" json:"accepted" xml:"accepted"`
	Rejected   bool              `form:"rejected" json:"rejected" xml:"rejected"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	ID        int32                  `form:"id" json:"id" xml:"id"`
	Name      string                 `form:"name" json:"name" xml:"name"`
	Email     string                 `form:"email" json:"email" xml:"email"`
	Bio       string                 `form:"bio" json:"bio" xml:"bio"`
	Photo     *UserPhotoResponseBody `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
	Admin     bool                   `form:"admin" json:"admin" xml:"admin"`
	UpdatedAt int64                  `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// ProjectRoleResponse is used to define fields on response body types.
type ProjectRoleResponse struct {
	ID   int32  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// UserCollectionResponseBody is used to define fields on response body types.
type UserCollectionResponseBody []*UserResponseBody

// NewRolesResponseBody builds the HTTP response body from the result of the
// "roles" endpoint of the "user" service.
func NewRolesResponseBody(res *userviews.AvailableRolesView) *RolesResponseBody {
	body := &RolesResponseBody{}
	if res.Roles != nil {
		body.Roles = make([]*AvailableRoleResponseBody, len(res.Roles))
		for i, val := range res.Roles {
			body.Roles[i] = marshalUserviewsAvailableRoleViewToAvailableRoleResponseBody(val)
		}
	}
	return body
}

// NewDownloadPhotoResponseBody builds the HTTP response body from the result
// of the "download photo" endpoint of the "user" service.
func NewDownloadPhotoResponseBody(res *userviews.DownloadedPhotoView) *DownloadPhotoResponseBody {
	body := &DownloadPhotoResponseBody{
		Length:      *res.Length,
		ContentType: *res.ContentType,
		Etag:        *res.Etag,
		Body:        res.Body,
	}
	return body
}

// NewAddResponseBody builds the HTTP response body from the result of the
// "add" endpoint of the "user" service.
func NewAddResponseBody(res *userviews.UserView) *AddResponseBody {
	body := &AddResponseBody{
		ID:        *res.ID,
		Name:      *res.Name,
		Email:     *res.Email,
		Bio:       *res.Bio,
		Admin:     *res.Admin,
		UpdatedAt: *res.UpdatedAt,
	}
	if res.Photo != nil {
		body.Photo = marshalUserviewsUserPhotoViewToUserPhotoResponseBody(res.Photo)
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "user" service.
func NewUpdateResponseBody(res *userviews.UserView) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:        *res.ID,
		Name:      *res.Name,
		Email:     *res.Email,
		Bio:       *res.Bio,
		Admin:     *res.Admin,
		UpdatedAt: *res.UpdatedAt,
	}
	if res.Photo != nil {
		body.Photo = marshalUserviewsUserPhotoViewToUserPhotoResponseBody(res.Photo)
	}
	return body
}

// NewChangePasswordResponseBody builds the HTTP response body from the result
// of the "change password" endpoint of the "user" service.
func NewChangePasswordResponseBody(res *userviews.UserView) *ChangePasswordResponseBody {
	body := &ChangePasswordResponseBody{
		ID:        *res.ID,
		Name:      *res.Name,
		Email:     *res.Email,
		Bio:       *res.Bio,
		Admin:     *res.Admin,
		UpdatedAt: *res.UpdatedAt,
	}
	if res.Photo != nil {
		body.Photo = marshalUserviewsUserPhotoViewToUserPhotoResponseBody(res.Photo)
	}
	return body
}

// NewGetCurrentResponseBody builds the HTTP response body from the result of
// the "get current" endpoint of the "user" service.
func NewGetCurrentResponseBody(res *userviews.UserView) *GetCurrentResponseBody {
	body := &GetCurrentResponseBody{
		ID:        *res.ID,
		Name:      *res.Name,
		Email:     *res.Email,
		Bio:       *res.Bio,
		Admin:     *res.Admin,
		UpdatedAt: *res.UpdatedAt,
	}
	if res.Photo != nil {
		body.Photo = marshalUserviewsUserPhotoViewToUserPhotoResponseBody(res.Photo)
	}
	return body
}

// NewListByProjectResponseBody builds the HTTP response body from the result
// of the "list by project" endpoint of the "user" service.
func NewListByProjectResponseBody(res *userviews.ProjectUsersView) *ListByProjectResponseBody {
	body := &ListByProjectResponseBody{}
	if res.Users != nil {
		body.Users = make([]*ProjectUserResponseBody, len(res.Users))
		for i, val := range res.Users {
			body.Users[i] = marshalUserviewsProjectUserViewToProjectUserResponseBody(val)
		}
	}
	return body
}

// NewIssueTransmissionTokenResponseBody builds the HTTP response body from the
// result of the "issue transmission token" endpoint of the "user" service.
func NewIssueTransmissionTokenResponseBody(res *userviews.TransmissionTokenView) *IssueTransmissionTokenResponseBody {
	body := &IssueTransmissionTokenResponseBody{
		Token: *res.Token,
		URL:   *res.URL,
	}
	return body
}

// NewProjectRoleResponseCollection builds the HTTP response body from the
// result of the "project roles" endpoint of the "user" service.
func NewProjectRoleResponseCollection(res userviews.ProjectRoleCollectionView) ProjectRoleResponseCollection {
	body := make([]*ProjectRoleResponse, len(res))
	for i, val := range res {
		body[i] = marshalUserviewsProjectRoleViewToProjectRoleResponse(val)
	}
	return body
}

// NewAdminSearchResponseBody builds the HTTP response body from the result of
// the "admin search" endpoint of the "user" service.
func NewAdminSearchResponseBody(res *user.AdminSearchResult) *AdminSearchResponseBody {
	body := &AdminSearchResponseBody{}
	if res.Users != nil {
		body.Users = make([]*UserResponseBody, len(res.Users))
		for i, val := range res.Users {
			body.Users[i] = marshalUserUserToUserResponseBody(val)
		}
	}
	return body
}

// NewRolesUnauthorizedResponseBody builds the HTTP response body from the
// result of the "roles" endpoint of the "user" service.
func NewRolesUnauthorizedResponseBody(res *goa.ServiceError) *RolesUnauthorizedResponseBody {
	body := &RolesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRolesForbiddenResponseBody builds the HTTP response body from the result
// of the "roles" endpoint of the "user" service.
func NewRolesForbiddenResponseBody(res *goa.ServiceError) *RolesForbiddenResponseBody {
	body := &RolesForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRolesNotFoundResponseBody builds the HTTP response body from the result
// of the "roles" endpoint of the "user" service.
func NewRolesNotFoundResponseBody(res *goa.ServiceError) *RolesNotFoundResponseBody {
	body := &RolesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRolesBadRequestResponseBody builds the HTTP response body from the result
// of the "roles" endpoint of the "user" service.
func NewRolesBadRequestResponseBody(res *goa.ServiceError) *RolesBadRequestResponseBody {
	body := &RolesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "user" service.
func NewDeleteUnauthorizedResponseBody(res *goa.ServiceError) *DeleteUnauthorizedResponseBody {
	body := &DeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteForbiddenResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "user" service.
func NewDeleteForbiddenResponseBody(res *goa.ServiceError) *DeleteForbiddenResponseBody {
	body := &DeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "user" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "user" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadPhotoUnauthorizedResponseBody builds the HTTP response body from
// the result of the "upload photo" endpoint of the "user" service.
func NewUploadPhotoUnauthorizedResponseBody(res *goa.ServiceError) *UploadPhotoUnauthorizedResponseBody {
	body := &UploadPhotoUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadPhotoForbiddenResponseBody builds the HTTP response body from the
// result of the "upload photo" endpoint of the "user" service.
func NewUploadPhotoForbiddenResponseBody(res *goa.ServiceError) *UploadPhotoForbiddenResponseBody {
	body := &UploadPhotoForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadPhotoNotFoundResponseBody builds the HTTP response body from the
// result of the "upload photo" endpoint of the "user" service.
func NewUploadPhotoNotFoundResponseBody(res *goa.ServiceError) *UploadPhotoNotFoundResponseBody {
	body := &UploadPhotoNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadPhotoBadRequestResponseBody builds the HTTP response body from the
// result of the "upload photo" endpoint of the "user" service.
func NewUploadPhotoBadRequestResponseBody(res *goa.ServiceError) *UploadPhotoBadRequestResponseBody {
	body := &UploadPhotoBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoUnauthorizedResponseBody builds the HTTP response body from
// the result of the "download photo" endpoint of the "user" service.
func NewDownloadPhotoUnauthorizedResponseBody(res *goa.ServiceError) *DownloadPhotoUnauthorizedResponseBody {
	body := &DownloadPhotoUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoForbiddenResponseBody builds the HTTP response body from the
// result of the "download photo" endpoint of the "user" service.
func NewDownloadPhotoForbiddenResponseBody(res *goa.ServiceError) *DownloadPhotoForbiddenResponseBody {
	body := &DownloadPhotoForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoNotFoundResponseBody builds the HTTP response body from the
// result of the "download photo" endpoint of the "user" service.
func NewDownloadPhotoNotFoundResponseBody(res *goa.ServiceError) *DownloadPhotoNotFoundResponseBody {
	body := &DownloadPhotoNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDownloadPhotoBadRequestResponseBody builds the HTTP response body from
// the result of the "download photo" endpoint of the "user" service.
func NewDownloadPhotoBadRequestResponseBody(res *goa.ServiceError) *DownloadPhotoBadRequestResponseBody {
	body := &DownloadPhotoBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginUserUnverifiedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "user" service.
func NewLoginUserUnverifiedResponseBody(res *goa.ServiceError) *LoginUserUnverifiedResponseBody {
	body := &LoginUserUnverifiedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginForbiddenResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "user" service.
func NewLoginForbiddenResponseBody(res *goa.ServiceError) *LoginForbiddenResponseBody {
	body := &LoginForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "user" service.
func NewLoginUnauthorizedResponseBody(res *goa.ServiceError) *LoginUnauthorizedResponseBody {
	body := &LoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginNotFoundResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "user" service.
func NewLoginNotFoundResponseBody(res *goa.ServiceError) *LoginNotFoundResponseBody {
	body := &LoginNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginBadRequestResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "user" service.
func NewLoginBadRequestResponseBody(res *goa.ServiceError) *LoginBadRequestResponseBody {
	body := &LoginBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryLookupUnauthorizedResponseBody builds the HTTP response body from
// the result of the "recovery lookup" endpoint of the "user" service.
func NewRecoveryLookupUnauthorizedResponseBody(res *goa.ServiceError) *RecoveryLookupUnauthorizedResponseBody {
	body := &RecoveryLookupUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryLookupForbiddenResponseBody builds the HTTP response body from
// the result of the "recovery lookup" endpoint of the "user" service.
func NewRecoveryLookupForbiddenResponseBody(res *goa.ServiceError) *RecoveryLookupForbiddenResponseBody {
	body := &RecoveryLookupForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryLookupNotFoundResponseBody builds the HTTP response body from the
// result of the "recovery lookup" endpoint of the "user" service.
func NewRecoveryLookupNotFoundResponseBody(res *goa.ServiceError) *RecoveryLookupNotFoundResponseBody {
	body := &RecoveryLookupNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryLookupBadRequestResponseBody builds the HTTP response body from
// the result of the "recovery lookup" endpoint of the "user" service.
func NewRecoveryLookupBadRequestResponseBody(res *goa.ServiceError) *RecoveryLookupBadRequestResponseBody {
	body := &RecoveryLookupBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryUnauthorizedResponseBody builds the HTTP response body from the
// result of the "recovery" endpoint of the "user" service.
func NewRecoveryUnauthorizedResponseBody(res *goa.ServiceError) *RecoveryUnauthorizedResponseBody {
	body := &RecoveryUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryForbiddenResponseBody builds the HTTP response body from the
// result of the "recovery" endpoint of the "user" service.
func NewRecoveryForbiddenResponseBody(res *goa.ServiceError) *RecoveryForbiddenResponseBody {
	body := &RecoveryForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryNotFoundResponseBody builds the HTTP response body from the
// result of the "recovery" endpoint of the "user" service.
func NewRecoveryNotFoundResponseBody(res *goa.ServiceError) *RecoveryNotFoundResponseBody {
	body := &RecoveryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRecoveryBadRequestResponseBody builds the HTTP response body from the
// result of the "recovery" endpoint of the "user" service.
func NewRecoveryBadRequestResponseBody(res *goa.ServiceError) *RecoveryBadRequestResponseBody {
	body := &RecoveryBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResumeUnauthorizedResponseBody builds the HTTP response body from the
// result of the "resume" endpoint of the "user" service.
func NewResumeUnauthorizedResponseBody(res *goa.ServiceError) *ResumeUnauthorizedResponseBody {
	body := &ResumeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResumeForbiddenResponseBody builds the HTTP response body from the result
// of the "resume" endpoint of the "user" service.
func NewResumeForbiddenResponseBody(res *goa.ServiceError) *ResumeForbiddenResponseBody {
	body := &ResumeForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResumeNotFoundResponseBody builds the HTTP response body from the result
// of the "resume" endpoint of the "user" service.
func NewResumeNotFoundResponseBody(res *goa.ServiceError) *ResumeNotFoundResponseBody {
	body := &ResumeNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewResumeBadRequestResponseBody builds the HTTP response body from the
// result of the "resume" endpoint of the "user" service.
func NewResumeBadRequestResponseBody(res *goa.ServiceError) *ResumeBadRequestResponseBody {
	body := &ResumeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutUnauthorizedResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "user" service.
func NewLogoutUnauthorizedResponseBody(res *goa.ServiceError) *LogoutUnauthorizedResponseBody {
	body := &LogoutUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutForbiddenResponseBody builds the HTTP response body from the result
// of the "logout" endpoint of the "user" service.
func NewLogoutForbiddenResponseBody(res *goa.ServiceError) *LogoutForbiddenResponseBody {
	body := &LogoutForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutNotFoundResponseBody builds the HTTP response body from the result
// of the "logout" endpoint of the "user" service.
func NewLogoutNotFoundResponseBody(res *goa.ServiceError) *LogoutNotFoundResponseBody {
	body := &LogoutNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutBadRequestResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "user" service.
func NewLogoutBadRequestResponseBody(res *goa.ServiceError) *LogoutBadRequestResponseBody {
	body := &LogoutBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshUnauthorizedResponseBody builds the HTTP response body from the
// result of the "refresh" endpoint of the "user" service.
func NewRefreshUnauthorizedResponseBody(res *goa.ServiceError) *RefreshUnauthorizedResponseBody {
	body := &RefreshUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshForbiddenResponseBody builds the HTTP response body from the
// result of the "refresh" endpoint of the "user" service.
func NewRefreshForbiddenResponseBody(res *goa.ServiceError) *RefreshForbiddenResponseBody {
	body := &RefreshForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshNotFoundResponseBody builds the HTTP response body from the result
// of the "refresh" endpoint of the "user" service.
func NewRefreshNotFoundResponseBody(res *goa.ServiceError) *RefreshNotFoundResponseBody {
	body := &RefreshNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshBadRequestResponseBody builds the HTTP response body from the
// result of the "refresh" endpoint of the "user" service.
func NewRefreshBadRequestResponseBody(res *goa.ServiceError) *RefreshBadRequestResponseBody {
	body := &RefreshBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendValidationUnauthorizedResponseBody builds the HTTP response body from
// the result of the "send validation" endpoint of the "user" service.
func NewSendValidationUnauthorizedResponseBody(res *goa.ServiceError) *SendValidationUnauthorizedResponseBody {
	body := &SendValidationUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendValidationForbiddenResponseBody builds the HTTP response body from
// the result of the "send validation" endpoint of the "user" service.
func NewSendValidationForbiddenResponseBody(res *goa.ServiceError) *SendValidationForbiddenResponseBody {
	body := &SendValidationForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendValidationNotFoundResponseBody builds the HTTP response body from the
// result of the "send validation" endpoint of the "user" service.
func NewSendValidationNotFoundResponseBody(res *goa.ServiceError) *SendValidationNotFoundResponseBody {
	body := &SendValidationNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSendValidationBadRequestResponseBody builds the HTTP response body from
// the result of the "send validation" endpoint of the "user" service.
func NewSendValidationBadRequestResponseBody(res *goa.ServiceError) *SendValidationBadRequestResponseBody {
	body := &SendValidationBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewValidateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "user" service.
func NewValidateUnauthorizedResponseBody(res *goa.ServiceError) *ValidateUnauthorizedResponseBody {
	body := &ValidateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewValidateForbiddenResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "user" service.
func NewValidateForbiddenResponseBody(res *goa.ServiceError) *ValidateForbiddenResponseBody {
	body := &ValidateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewValidateNotFoundResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "user" service.
func NewValidateNotFoundResponseBody(res *goa.ServiceError) *ValidateNotFoundResponseBody {
	body := &ValidateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewValidateBadRequestResponseBody builds the HTTP response body from the
// result of the "validate" endpoint of the "user" service.
func NewValidateBadRequestResponseBody(res *goa.ServiceError) *ValidateBadRequestResponseBody {
	body := &ValidateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddUserEmailRegisteredResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "user" service.
func NewAddUserEmailRegisteredResponseBody(res *goa.ServiceError) *AddUserEmailRegisteredResponseBody {
	body := &AddUserEmailRegisteredResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddBadRequestResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "user" service.
func NewAddBadRequestResponseBody(res *goa.ServiceError) *AddBadRequestResponseBody {
	body := &AddBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddUnauthorizedResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "user" service.
func NewAddUnauthorizedResponseBody(res *goa.ServiceError) *AddUnauthorizedResponseBody {
	body := &AddUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddForbiddenResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "user" service.
func NewAddForbiddenResponseBody(res *goa.ServiceError) *AddForbiddenResponseBody {
	body := &AddForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddNotFoundResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "user" service.
func NewAddNotFoundResponseBody(res *goa.ServiceError) *AddNotFoundResponseBody {
	body := &AddNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateUnauthorizedResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "user" service.
func NewUpdateUnauthorizedResponseBody(res *goa.ServiceError) *UpdateUnauthorizedResponseBody {
	body := &UpdateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateForbiddenResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "user" service.
func NewUpdateForbiddenResponseBody(res *goa.ServiceError) *UpdateForbiddenResponseBody {
	body := &UpdateForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "user" service.
func NewUpdateNotFoundResponseBody(res *goa.ServiceError) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "user" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChangePasswordUnauthorizedResponseBody builds the HTTP response body from
// the result of the "change password" endpoint of the "user" service.
func NewChangePasswordUnauthorizedResponseBody(res *goa.ServiceError) *ChangePasswordUnauthorizedResponseBody {
	body := &ChangePasswordUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChangePasswordForbiddenResponseBody builds the HTTP response body from
// the result of the "change password" endpoint of the "user" service.
func NewChangePasswordForbiddenResponseBody(res *goa.ServiceError) *ChangePasswordForbiddenResponseBody {
	body := &ChangePasswordForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChangePasswordNotFoundResponseBody builds the HTTP response body from the
// result of the "change password" endpoint of the "user" service.
func NewChangePasswordNotFoundResponseBody(res *goa.ServiceError) *ChangePasswordNotFoundResponseBody {
	body := &ChangePasswordNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewChangePasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "change password" endpoint of the "user" service.
func NewChangePasswordBadRequestResponseBody(res *goa.ServiceError) *ChangePasswordBadRequestResponseBody {
	body := &ChangePasswordBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCurrentUnauthorizedResponseBody builds the HTTP response body from the
// result of the "get current" endpoint of the "user" service.
func NewGetCurrentUnauthorizedResponseBody(res *goa.ServiceError) *GetCurrentUnauthorizedResponseBody {
	body := &GetCurrentUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCurrentForbiddenResponseBody builds the HTTP response body from the
// result of the "get current" endpoint of the "user" service.
func NewGetCurrentForbiddenResponseBody(res *goa.ServiceError) *GetCurrentForbiddenResponseBody {
	body := &GetCurrentForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCurrentNotFoundResponseBody builds the HTTP response body from the
// result of the "get current" endpoint of the "user" service.
func NewGetCurrentNotFoundResponseBody(res *goa.ServiceError) *GetCurrentNotFoundResponseBody {
	body := &GetCurrentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCurrentBadRequestResponseBody builds the HTTP response body from the
// result of the "get current" endpoint of the "user" service.
func NewGetCurrentBadRequestResponseBody(res *goa.ServiceError) *GetCurrentBadRequestResponseBody {
	body := &GetCurrentBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListByProjectUnauthorizedResponseBody builds the HTTP response body from
// the result of the "list by project" endpoint of the "user" service.
func NewListByProjectUnauthorizedResponseBody(res *goa.ServiceError) *ListByProjectUnauthorizedResponseBody {
	body := &ListByProjectUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListByProjectForbiddenResponseBody builds the HTTP response body from the
// result of the "list by project" endpoint of the "user" service.
func NewListByProjectForbiddenResponseBody(res *goa.ServiceError) *ListByProjectForbiddenResponseBody {
	body := &ListByProjectForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListByProjectNotFoundResponseBody builds the HTTP response body from the
// result of the "list by project" endpoint of the "user" service.
func NewListByProjectNotFoundResponseBody(res *goa.ServiceError) *ListByProjectNotFoundResponseBody {
	body := &ListByProjectNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListByProjectBadRequestResponseBody builds the HTTP response body from
// the result of the "list by project" endpoint of the "user" service.
func NewListByProjectBadRequestResponseBody(res *goa.ServiceError) *ListByProjectBadRequestResponseBody {
	body := &ListByProjectBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIssueTransmissionTokenUnauthorizedResponseBody builds the HTTP response
// body from the result of the "issue transmission token" endpoint of the
// "user" service.
func NewIssueTransmissionTokenUnauthorizedResponseBody(res *goa.ServiceError) *IssueTransmissionTokenUnauthorizedResponseBody {
	body := &IssueTransmissionTokenUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIssueTransmissionTokenForbiddenResponseBody builds the HTTP response body
// from the result of the "issue transmission token" endpoint of the "user"
// service.
func NewIssueTransmissionTokenForbiddenResponseBody(res *goa.ServiceError) *IssueTransmissionTokenForbiddenResponseBody {
	body := &IssueTransmissionTokenForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIssueTransmissionTokenNotFoundResponseBody builds the HTTP response body
// from the result of the "issue transmission token" endpoint of the "user"
// service.
func NewIssueTransmissionTokenNotFoundResponseBody(res *goa.ServiceError) *IssueTransmissionTokenNotFoundResponseBody {
	body := &IssueTransmissionTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewIssueTransmissionTokenBadRequestResponseBody builds the HTTP response
// body from the result of the "issue transmission token" endpoint of the
// "user" service.
func NewIssueTransmissionTokenBadRequestResponseBody(res *goa.ServiceError) *IssueTransmissionTokenBadRequestResponseBody {
	body := &IssueTransmissionTokenBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectRolesUnauthorizedResponseBody builds the HTTP response body from
// the result of the "project roles" endpoint of the "user" service.
func NewProjectRolesUnauthorizedResponseBody(res *goa.ServiceError) *ProjectRolesUnauthorizedResponseBody {
	body := &ProjectRolesUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectRolesForbiddenResponseBody builds the HTTP response body from the
// result of the "project roles" endpoint of the "user" service.
func NewProjectRolesForbiddenResponseBody(res *goa.ServiceError) *ProjectRolesForbiddenResponseBody {
	body := &ProjectRolesForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectRolesNotFoundResponseBody builds the HTTP response body from the
// result of the "project roles" endpoint of the "user" service.
func NewProjectRolesNotFoundResponseBody(res *goa.ServiceError) *ProjectRolesNotFoundResponseBody {
	body := &ProjectRolesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectRolesBadRequestResponseBody builds the HTTP response body from the
// result of the "project roles" endpoint of the "user" service.
func NewProjectRolesBadRequestResponseBody(res *goa.ServiceError) *ProjectRolesBadRequestResponseBody {
	body := &ProjectRolesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminDeleteUnauthorizedResponseBody builds the HTTP response body from
// the result of the "admin delete" endpoint of the "user" service.
func NewAdminDeleteUnauthorizedResponseBody(res *goa.ServiceError) *AdminDeleteUnauthorizedResponseBody {
	body := &AdminDeleteUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminDeleteForbiddenResponseBody builds the HTTP response body from the
// result of the "admin delete" endpoint of the "user" service.
func NewAdminDeleteForbiddenResponseBody(res *goa.ServiceError) *AdminDeleteForbiddenResponseBody {
	body := &AdminDeleteForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminDeleteNotFoundResponseBody builds the HTTP response body from the
// result of the "admin delete" endpoint of the "user" service.
func NewAdminDeleteNotFoundResponseBody(res *goa.ServiceError) *AdminDeleteNotFoundResponseBody {
	body := &AdminDeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "admin delete" endpoint of the "user" service.
func NewAdminDeleteBadRequestResponseBody(res *goa.ServiceError) *AdminDeleteBadRequestResponseBody {
	body := &AdminDeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchUnauthorizedResponseBody builds the HTTP response body from
// the result of the "admin search" endpoint of the "user" service.
func NewAdminSearchUnauthorizedResponseBody(res *goa.ServiceError) *AdminSearchUnauthorizedResponseBody {
	body := &AdminSearchUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchForbiddenResponseBody builds the HTTP response body from the
// result of the "admin search" endpoint of the "user" service.
func NewAdminSearchForbiddenResponseBody(res *goa.ServiceError) *AdminSearchForbiddenResponseBody {
	body := &AdminSearchForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchNotFoundResponseBody builds the HTTP response body from the
// result of the "admin search" endpoint of the "user" service.
func NewAdminSearchNotFoundResponseBody(res *goa.ServiceError) *AdminSearchNotFoundResponseBody {
	body := &AdminSearchNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAdminSearchBadRequestResponseBody builds the HTTP response body from the
// result of the "admin search" endpoint of the "user" service.
func NewAdminSearchBadRequestResponseBody(res *goa.ServiceError) *AdminSearchBadRequestResponseBody {
	body := &AdminSearchBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRolesPayload builds a user service roles endpoint payload.
func NewRolesPayload(auth string) *user.RolesPayload {
	v := &user.RolesPayload{}
	v.Auth = auth

	return v
}

// NewDeletePayload builds a user service delete endpoint payload.
func NewDeletePayload(userID int32, auth string) *user.DeletePayload {
	v := &user.DeletePayload{}
	v.UserID = userID
	v.Auth = auth

	return v
}

// NewUploadPhotoPayload builds a user service upload photo endpoint payload.
func NewUploadPhotoPayload(contentType string, contentLength int64, auth string) *user.UploadPhotoPayload {
	v := &user.UploadPhotoPayload{}
	v.ContentType = contentType
	v.ContentLength = contentLength
	v.Auth = auth

	return v
}

// NewDownloadPhotoPayload builds a user service download photo endpoint
// payload.
func NewDownloadPhotoPayload(userID int32, size *int32, ifNoneMatch *string) *user.DownloadPhotoPayload {
	v := &user.DownloadPhotoPayload{}
	v.UserID = userID
	v.Size = size
	v.IfNoneMatch = ifNoneMatch

	return v
}

// NewLoginPayload builds a user service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *user.LoginPayload {
	v := &user.LoginFields{
		Email:    *body.Email,
		Password: *body.Password,
	}
	res := &user.LoginPayload{
		Login: v,
	}

	return res
}

// NewRecoveryLookupPayload builds a user service recovery lookup endpoint
// payload.
func NewRecoveryLookupPayload(body *RecoveryLookupRequestBody) *user.RecoveryLookupPayload {
	v := &user.RecoveryLookupFields{
		Email: *body.Email,
	}
	res := &user.RecoveryLookupPayload{
		Recovery: v,
	}

	return res
}

// NewRecoveryPayload builds a user service recovery endpoint payload.
func NewRecoveryPayload(body *RecoveryRequestBody) *user.RecoveryPayload {
	v := &user.RecoveryFields{
		Token:    *body.Token,
		Password: *body.Password,
	}
	res := &user.RecoveryPayload{
		Recovery: v,
	}

	return res
}

// NewResumePayload builds a user service resume endpoint payload.
func NewResumePayload(body struct {
	Token *string `form:"token" json:"token" xml:"token"`
}) *user.ResumePayload {
	v := &user.ResumePayload{}
	if body.Token != nil {
		v.Token = *body.Token
	}

	return v
}

// NewLogoutPayload builds a user service logout endpoint payload.
func NewLogoutPayload(auth string) *user.LogoutPayload {
	v := &user.LogoutPayload{}
	v.Auth = auth

	return v
}

// NewRefreshPayload builds a user service refresh endpoint payload.
func NewRefreshPayload(body *RefreshRequestBody) *user.RefreshPayload {
	v := &user.RefreshPayload{
		RefreshToken: *body.RefreshToken,
	}

	return v
}

// NewSendValidationPayload builds a user service send validation endpoint
// payload.
func NewSendValidationPayload(userID int32) *user.SendValidationPayload {
	v := &user.SendValidationPayload{}
	v.UserID = userID

	return v
}

// NewValidatePayload builds a user service validate endpoint payload.
func NewValidatePayload(token string) *user.ValidatePayload {
	v := &user.ValidatePayload{}
	v.Token = token

	return v
}

// NewAddPayload builds a user service add endpoint payload.
func NewAddPayload(body *AddRequestBody) *user.AddPayload {
	v := &user.AddUserFields{
		Name:        *body.Name,
		Email:       *body.Email,
		Password:    *body.Password,
		InviteToken: body.InviteToken,
	}
	res := &user.AddPayload{
		User: v,
	}

	return res
}

// NewUpdatePayload builds a user service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, userID int32, auth string) *user.UpdatePayload {
	v := &user.UpdateUserFields{
		Name:  *body.Name,
		Email: *body.Email,
		Bio:   *body.Bio,
	}
	res := &user.UpdatePayload{
		Update: v,
	}
	res.UserID = userID
	res.Auth = auth

	return res
}

// NewChangePasswordPayload builds a user service change password endpoint
// payload.
func NewChangePasswordPayload(body *ChangePasswordRequestBody, userID int32, auth string) *user.ChangePasswordPayload {
	v := &user.UpdateUserPasswordFields{
		OldPassword: *body.OldPassword,
		NewPassword: *body.NewPassword,
	}
	res := &user.ChangePasswordPayload{
		Change: v,
	}
	res.UserID = userID
	res.Auth = auth

	return res
}

// NewGetCurrentPayload builds a user service get current endpoint payload.
func NewGetCurrentPayload(auth string) *user.GetCurrentPayload {
	v := &user.GetCurrentPayload{}
	v.Auth = auth

	return v
}

// NewListByProjectPayload builds a user service list by project endpoint
// payload.
func NewListByProjectPayload(projectID int32, auth string) *user.ListByProjectPayload {
	v := &user.ListByProjectPayload{}
	v.ProjectID = projectID
	v.Auth = auth

	return v
}

// NewIssueTransmissionTokenPayload builds a user service issue transmission
// token endpoint payload.
func NewIssueTransmissionTokenPayload(auth string) *user.IssueTransmissionTokenPayload {
	v := &user.IssueTransmissionTokenPayload{}
	v.Auth = auth

	return v
}

// NewAdminDeletePayload builds a user service admin delete endpoint payload.
func NewAdminDeletePayload(body *AdminDeleteRequestBody, auth string) *user.AdminDeletePayload {
	v := &user.AdminDeleteFields{
		Email:    *body.Email,
		Password: *body.Password,
	}
	res := &user.AdminDeletePayload{
		Delete: v,
	}
	res.Auth = auth

	return res
}

// NewAdminSearchPayload builds a user service admin search endpoint payload.
func NewAdminSearchPayload(query string, auth string) *user.AdminSearchPayload {
	v := &user.AdminSearchPayload{}
	v.Query = query
	v.Auth = auth

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Email != nil {
		if utf8.RuneCountInString(*body.Email) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", *body.Email, utf8.RuneCountInString(*body.Email), 40, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 10, true))
		}
	}
	return
}

// ValidateRecoveryLookupRequestBody runs the validations defined on Recovery
// LookupRequestBody
func ValidateRecoveryLookupRequestBody(body *RecoveryLookupRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateRecoveryRequestBody runs the validations defined on
// RecoveryRequestBody
func ValidateRecoveryRequestBody(body *RecoveryRequestBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 10, true))
		}
	}
	return
}

// ValidateRefreshRequestBody runs the validations defined on RefreshRequestBody
func ValidateRefreshRequestBody(body *RefreshRequestBody) (err error) {
	if body.RefreshToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refreshToken", "body"))
	}
	return
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", *body.Name, "\\S"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 256, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Email != nil {
		if utf8.RuneCountInString(*body.Email) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", *body.Email, utf8.RuneCountInString(*body.Email), 40, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 10, true))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Bio == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bio", "body"))
	}
	if body.Name != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.name", *body.Name, "\\S"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 256 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 256, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Email != nil {
		if utf8.RuneCountInString(*body.Email) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", *body.Email, utf8.RuneCountInString(*body.Email), 40, false))
		}
	}
	return
}

// ValidateChangePasswordRequestBody runs the validations defined on Change
// PasswordRequestBody
func ValidateChangePasswordRequestBody(body *ChangePasswordRequestBody) (err error) {
	if body.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("oldPassword", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("newPassword", "body"))
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.oldPassword", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 10, true))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.newPassword", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 10, true))
		}
	}
	return
}

// ValidateAdminDeleteRequestBody runs the validations defined on Admin
// DeleteRequestBody
func ValidateAdminDeleteRequestBody(body *AdminDeleteRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
