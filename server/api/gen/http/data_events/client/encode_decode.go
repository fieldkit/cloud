// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data events HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	dataevents "github.com/fieldkit/cloud/server/api/gen/data_events"
	dataeventsviews "github.com/fieldkit/cloud/server/api/gen/data_events/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildDataEventsEndpointRequest instantiates a HTTP request object with
// method and path set to call the "data events" service "data events" endpoint
func (c *Client) BuildDataEventsEndpointRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DataEventsEndpointDataEventsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data events", "data events", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDataEventsEndpointRequest returns an encoder for requests sent to the
// data events data events server.
func EncodeDataEventsEndpointRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*dataevents.DataEventsPayload)
		if !ok {
			return goahttp.ErrInvalidType("data events", "data events", "*dataevents.DataEventsPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		values.Add("bookmark", p.Bookmark)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeDataEventsEndpointResponse returns a decoder for responses returned by
// the data events data events endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDataEventsEndpointResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "not-found" (type *goa.ServiceError): http.StatusNotFound
//   - "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDataEventsEndpointResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DataEventsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "data events", err)
			}
			p := NewDataEventsViewOK(&body)
			view := "default"
			vres := &dataeventsviews.DataEvents{Projected: p, View: view}
			if err = dataeventsviews.ValidateDataEvents(vres); err != nil {
				return nil, goahttp.ErrValidationError("data events", "data events", err)
			}
			res := dataevents.NewDataEvents(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body DataEventsUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "data events", err)
			}
			err = ValidateDataEventsUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "data events", err)
			}
			return nil, NewDataEventsUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DataEventsForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "data events", err)
			}
			err = ValidateDataEventsForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "data events", err)
			}
			return nil, NewDataEventsForbidden(&body)
		case http.StatusNotFound:
			var (
				body DataEventsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "data events", err)
			}
			err = ValidateDataEventsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "data events", err)
			}
			return nil, NewDataEventsNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DataEventsBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "data events", err)
			}
			err = ValidateDataEventsBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "data events", err)
			}
			return nil, NewDataEventsBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data events", "data events", resp.StatusCode, string(body))
		}
	}
}

// BuildAddDataEventRequest instantiates a HTTP request object with method and
// path set to call the "data events" service "add data event" endpoint
func (c *Client) BuildAddDataEventRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddDataEventDataEventsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data events", "add data event", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddDataEventRequest returns an encoder for requests sent to the data
// events add data event server.
func EncodeAddDataEventRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*dataevents.AddDataEventPayload)
		if !ok {
			return goahttp.ErrInvalidType("data events", "add data event", "*dataevents.AddDataEventPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewAddDataEventRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("data events", "add data event", err)
		}
		return nil
	}
}

// DecodeAddDataEventResponse returns a decoder for responses returned by the
// data events add data event endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeAddDataEventResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "not-found" (type *goa.ServiceError): http.StatusNotFound
//   - "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeAddDataEventResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddDataEventResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "add data event", err)
			}
			err = ValidateAddDataEventResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "add data event", err)
			}
			res := NewAddDataEventResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body AddDataEventUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "add data event", err)
			}
			err = ValidateAddDataEventUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "add data event", err)
			}
			return nil, NewAddDataEventUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body AddDataEventForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "add data event", err)
			}
			err = ValidateAddDataEventForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "add data event", err)
			}
			return nil, NewAddDataEventForbidden(&body)
		case http.StatusNotFound:
			var (
				body AddDataEventNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "add data event", err)
			}
			err = ValidateAddDataEventNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "add data event", err)
			}
			return nil, NewAddDataEventNotFound(&body)
		case http.StatusBadRequest:
			var (
				body AddDataEventBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "add data event", err)
			}
			err = ValidateAddDataEventBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "add data event", err)
			}
			return nil, NewAddDataEventBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data events", "add data event", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateDataEventRequest instantiates a HTTP request object with method
// and path set to call the "data events" service "update data event" endpoint
func (c *Client) BuildUpdateDataEventRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		eventID int64
	)
	{
		p, ok := v.(*dataevents.UpdateDataEventPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data events", "update data event", "*dataevents.UpdateDataEventPayload", v)
		}
		eventID = p.EventID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDataEventDataEventsPath(eventID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data events", "update data event", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateDataEventRequest returns an encoder for requests sent to the
// data events update data event server.
func EncodeUpdateDataEventRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*dataevents.UpdateDataEventPayload)
		if !ok {
			return goahttp.ErrInvalidType("data events", "update data event", "*dataevents.UpdateDataEventPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateDataEventRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("data events", "update data event", err)
		}
		return nil
	}
}

// DecodeUpdateDataEventResponse returns a decoder for responses returned by
// the data events update data event endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateDataEventResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "not-found" (type *goa.ServiceError): http.StatusNotFound
//   - "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeUpdateDataEventResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateDataEventResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "update data event", err)
			}
			err = ValidateUpdateDataEventResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "update data event", err)
			}
			res := NewUpdateDataEventResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateDataEventUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "update data event", err)
			}
			err = ValidateUpdateDataEventUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "update data event", err)
			}
			return nil, NewUpdateDataEventUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UpdateDataEventForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "update data event", err)
			}
			err = ValidateUpdateDataEventForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "update data event", err)
			}
			return nil, NewUpdateDataEventForbidden(&body)
		case http.StatusNotFound:
			var (
				body UpdateDataEventNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "update data event", err)
			}
			err = ValidateUpdateDataEventNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "update data event", err)
			}
			return nil, NewUpdateDataEventNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateDataEventBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "update data event", err)
			}
			err = ValidateUpdateDataEventBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "update data event", err)
			}
			return nil, NewUpdateDataEventBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data events", "update data event", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteDataEventRequest instantiates a HTTP request object with method
// and path set to call the "data events" service "delete data event" endpoint
func (c *Client) BuildDeleteDataEventRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		eventID int64
	)
	{
		p, ok := v.(*dataevents.DeleteDataEventPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("data events", "delete data event", "*dataevents.DeleteDataEventPayload", v)
		}
		eventID = p.EventID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteDataEventDataEventsPath(eventID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("data events", "delete data event", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteDataEventRequest returns an encoder for requests sent to the
// data events delete data event server.
func EncodeDeleteDataEventRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*dataevents.DeleteDataEventPayload)
		if !ok {
			return goahttp.ErrInvalidType("data events", "delete data event", "*dataevents.DeleteDataEventPayload", v)
		}
		{
			head := p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteDataEventResponse returns a decoder for responses returned by
// the data events delete data event endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteDataEventResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "forbidden" (type *goa.ServiceError): http.StatusForbidden
//   - "not-found" (type *goa.ServiceError): http.StatusNotFound
//   - "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteDataEventResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeleteDataEventUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "delete data event", err)
			}
			err = ValidateDeleteDataEventUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "delete data event", err)
			}
			return nil, NewDeleteDataEventUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body DeleteDataEventForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "delete data event", err)
			}
			err = ValidateDeleteDataEventForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "delete data event", err)
			}
			return nil, NewDeleteDataEventForbidden(&body)
		case http.StatusNotFound:
			var (
				body DeleteDataEventNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "delete data event", err)
			}
			err = ValidateDeleteDataEventNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "delete data event", err)
			}
			return nil, NewDeleteDataEventNotFound(&body)
		case http.StatusBadRequest:
			var (
				body DeleteDataEventBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("data events", "delete data event", err)
			}
			err = ValidateDeleteDataEventBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("data events", "delete data event", err)
			}
			return nil, NewDeleteDataEventBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("data events", "delete data event", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDataEventResponseBodyToDataeventsviewsDataEventView builds a value
// of type *dataeventsviews.DataEventView from a value of type
// *DataEventResponseBody.
func unmarshalDataEventResponseBodyToDataeventsviewsDataEventView(v *DataEventResponseBody) *dataeventsviews.DataEventView {
	res := &dataeventsviews.DataEventView{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		Title:       v.Title,
		Description: v.Description,
		Bookmark:    v.Bookmark,
		Start:       v.Start,
		End:         v.End,
	}
	res.Author = unmarshalPostAuthorResponseBodyToDataeventsviewsPostAuthorView(v.Author)

	return res
}

// unmarshalPostAuthorResponseBodyToDataeventsviewsPostAuthorView builds a
// value of type *dataeventsviews.PostAuthorView from a value of type
// *PostAuthorResponseBody.
func unmarshalPostAuthorResponseBodyToDataeventsviewsPostAuthorView(v *PostAuthorResponseBody) *dataeventsviews.PostAuthorView {
	res := &dataeventsviews.PostAuthorView{
		ID:   v.ID,
		Name: v.Name,
	}
	if v.Photo != nil {
		res.Photo = unmarshalAuthorPhotoResponseBodyToDataeventsviewsAuthorPhotoView(v.Photo)
	}

	return res
}

// unmarshalAuthorPhotoResponseBodyToDataeventsviewsAuthorPhotoView builds a
// value of type *dataeventsviews.AuthorPhotoView from a value of type
// *AuthorPhotoResponseBody.
func unmarshalAuthorPhotoResponseBodyToDataeventsviewsAuthorPhotoView(v *AuthorPhotoResponseBody) *dataeventsviews.AuthorPhotoView {
	if v == nil {
		return nil
	}
	res := &dataeventsviews.AuthorPhotoView{
		URL: v.URL,
	}

	return res
}

// marshalDataeventsNewDataEventToNewDataEventRequestBody builds a value of
// type *NewDataEventRequestBody from a value of type *dataevents.NewDataEvent.
func marshalDataeventsNewDataEventToNewDataEventRequestBody(v *dataevents.NewDataEvent) *NewDataEventRequestBody {
	res := &NewDataEventRequestBody{
		AllProjectSensors: v.AllProjectSensors,
		Bookmark:          v.Bookmark,
		Title:             v.Title,
		Description:       v.Description,
		Start:             v.Start,
		End:               v.End,
	}

	return res
}

// marshalNewDataEventRequestBodyToDataeventsNewDataEvent builds a value of
// type *dataevents.NewDataEvent from a value of type *NewDataEventRequestBody.
func marshalNewDataEventRequestBodyToDataeventsNewDataEvent(v *NewDataEventRequestBody) *dataevents.NewDataEvent {
	res := &dataevents.NewDataEvent{
		AllProjectSensors: v.AllProjectSensors,
		Bookmark:          v.Bookmark,
		Title:             v.Title,
		Description:       v.Description,
		Start:             v.Start,
		End:               v.End,
	}

	return res
}

// unmarshalDataEventResponseBodyToDataeventsDataEvent builds a value of type
// *dataevents.DataEvent from a value of type *DataEventResponseBody.
func unmarshalDataEventResponseBodyToDataeventsDataEvent(v *DataEventResponseBody) *dataevents.DataEvent {
	res := &dataevents.DataEvent{
		ID:          *v.ID,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
		Title:       *v.Title,
		Description: *v.Description,
		Bookmark:    v.Bookmark,
		Start:       *v.Start,
		End:         *v.End,
	}
	res.Author = unmarshalPostAuthorResponseBodyToDataeventsPostAuthor(v.Author)

	return res
}

// unmarshalPostAuthorResponseBodyToDataeventsPostAuthor builds a value of type
// *dataevents.PostAuthor from a value of type *PostAuthorResponseBody.
func unmarshalPostAuthorResponseBodyToDataeventsPostAuthor(v *PostAuthorResponseBody) *dataevents.PostAuthor {
	res := &dataevents.PostAuthor{
		ID:   *v.ID,
		Name: *v.Name,
	}
	if v.Photo != nil {
		res.Photo = unmarshalAuthorPhotoResponseBodyToDataeventsAuthorPhoto(v.Photo)
	}

	return res
}

// unmarshalAuthorPhotoResponseBodyToDataeventsAuthorPhoto builds a value of
// type *dataevents.AuthorPhoto from a value of type *AuthorPhotoResponseBody.
func unmarshalAuthorPhotoResponseBodyToDataeventsAuthorPhoto(v *AuthorPhotoResponseBody) *dataevents.AuthorPhoto {
	if v == nil {
		return nil
	}
	res := &dataevents.AuthorPhoto{
		URL: *v.URL,
	}

	return res
}
