// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data events client HTTP transport
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the data events service endpoint HTTP clients.
type Client struct {
	// DataEventsEndpoint Doer is the HTTP client used to make requests to the data
	// events endpoint.
	DataEventsEndpointDoer goahttp.Doer

	// AddDataEvent Doer is the HTTP client used to make requests to the add data
	// event endpoint.
	AddDataEventDoer goahttp.Doer

	// UpdateDataEvent Doer is the HTTP client used to make requests to the update
	// data event endpoint.
	UpdateDataEventDoer goahttp.Doer

	// DeleteDataEvent Doer is the HTTP client used to make requests to the delete
	// data event endpoint.
	DeleteDataEventDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the data events service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		DataEventsEndpointDoer: doer,
		AddDataEventDoer:       doer,
		UpdateDataEventDoer:    doer,
		DeleteDataEventDoer:    doer,
		CORSDoer:               doer,
		RestoreResponseBody:    restoreBody,
		scheme:                 scheme,
		host:                   host,
		decoder:                dec,
		encoder:                enc,
	}
}

// DataEventsEndpoint returns an endpoint that makes HTTP requests to the data
// events service data events server.
func (c *Client) DataEventsEndpoint() goa.Endpoint {
	var (
		encodeRequest  = EncodeDataEventsEndpointRequest(c.encoder)
		decodeResponse = DecodeDataEventsEndpointResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDataEventsEndpointRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DataEventsEndpointDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data events", "data events", err)
		}
		return decodeResponse(resp)
	}
}

// AddDataEvent returns an endpoint that makes HTTP requests to the data events
// service add data event server.
func (c *Client) AddDataEvent() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddDataEventRequest(c.encoder)
		decodeResponse = DecodeAddDataEventResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddDataEventRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddDataEventDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data events", "add data event", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateDataEvent returns an endpoint that makes HTTP requests to the data
// events service update data event server.
func (c *Client) UpdateDataEvent() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateDataEventRequest(c.encoder)
		decodeResponse = DecodeUpdateDataEventResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateDataEventRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateDataEventDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data events", "update data event", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteDataEvent returns an endpoint that makes HTTP requests to the data
// events service delete data event server.
func (c *Client) DeleteDataEvent() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteDataEventRequest(c.encoder)
		decodeResponse = DecodeDeleteDataEventResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteDataEventRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteDataEventDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("data events", "delete data event", err)
		}
		return decodeResponse(resp)
	}
}
