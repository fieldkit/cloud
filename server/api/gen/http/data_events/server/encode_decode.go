// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data events HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	dataevents "github.com/fieldkit/cloud/server/api/gen/data_events"
	dataeventsviews "github.com/fieldkit/cloud/server/api/gen/data_events/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeDataEventsEndpointResponse returns an encoder for responses returned
// by the data events data events endpoint.
func EncodeDataEventsEndpointResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*dataeventsviews.DataEvents)
		enc := encoder(ctx, w)
		body := NewDataEventsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDataEventsEndpointRequest returns a decoder for requests sent to the
// data events data events endpoint.
func DecodeDataEventsEndpointRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			bookmark string
			auth     *string
			err      error
		)
		bookmark = r.URL.Query().Get("bookmark")
		if bookmark == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("bookmark", "query string"))
		}
		authRaw := r.Header.Get("Authorization")
		if authRaw != "" {
			auth = &authRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDataEventsPayload(bookmark, auth)
		if payload.Auth != nil {
			if strings.Contains(*payload.Auth, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Auth, " ", 2)[1]
				payload.Auth = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDataEventsEndpointError returns an encoder for errors returned by the
// data events data events endpoint.
func EncodeDataEventsEndpointError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDataEventsUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDataEventsForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not-found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDataEventsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad-request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDataEventsBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad-request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeAddDataEventResponse returns an encoder for responses returned by the
// data events add data event endpoint.
func EncodeAddDataEventResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*dataevents.AddDataEventResult)
		enc := encoder(ctx, w)
		body := NewAddDataEventResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddDataEventRequest returns a decoder for requests sent to the data
// events add data event endpoint.
func DecodeAddDataEventRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddDataEventRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddDataEventRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			auth string
		)
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewAddDataEventPayload(&body, auth)
		if strings.Contains(payload.Auth, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Auth, " ", 2)[1]
			payload.Auth = cred
		}

		return payload, nil
	}
}

// EncodeAddDataEventError returns an encoder for errors returned by the add
// data event data events endpoint.
func EncodeAddDataEventError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAddDataEventUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAddDataEventForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not-found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAddDataEventNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad-request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAddDataEventBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad-request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateDataEventResponse returns an encoder for responses returned by
// the data events update data event endpoint.
func EncodeUpdateDataEventResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*dataevents.UpdateDataEventResult)
		enc := encoder(ctx, w)
		body := NewUpdateDataEventResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateDataEventRequest returns a decoder for requests sent to the data
// events update data event endpoint.
func DecodeUpdateDataEventRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateDataEventRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateDataEventRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			eventID int64
			auth    string

			params = mux.Vars(r)
		)
		{
			eventIDRaw := params["eventId"]
			v, err2 := strconv.ParseInt(eventIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("eventID", eventIDRaw, "integer"))
			}
			eventID = v
		}
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateDataEventPayload(&body, eventID, auth)
		if strings.Contains(payload.Auth, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Auth, " ", 2)[1]
			payload.Auth = cred
		}

		return payload, nil
	}
}

// EncodeUpdateDataEventError returns an encoder for errors returned by the
// update data event data events endpoint.
func EncodeUpdateDataEventError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateDataEventUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateDataEventForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not-found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateDataEventNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad-request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdateDataEventBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad-request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteDataEventResponse returns an encoder for responses returned by
// the data events delete data event endpoint.
func EncodeDeleteDataEventResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteDataEventRequest returns a decoder for requests sent to the data
// events delete data event endpoint.
func DecodeDeleteDataEventRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			eventID int64
			auth    string
			err     error

			params = mux.Vars(r)
		)
		{
			eventIDRaw := params["eventId"]
			v, err2 := strconv.ParseInt(eventIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("eventID", eventIDRaw, "integer"))
			}
			eventID = v
		}
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteDataEventPayload(eventID, auth)
		if strings.Contains(payload.Auth, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Auth, " ", 2)[1]
			payload.Auth = cred
		}

		return payload, nil
	}
}

// EncodeDeleteDataEventError returns an encoder for errors returned by the
// delete data event data events endpoint.
func EncodeDeleteDataEventError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "unauthorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteDataEventUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "forbidden":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteDataEventForbiddenResponseBody(res)
			}
			w.Header().Set("goa-error", "forbidden")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not-found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteDataEventNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not-found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "bad-request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewDeleteDataEventBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad-request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalDataeventsviewsDataEventViewToDataEventResponseBody builds a value of
// type *DataEventResponseBody from a value of type
// *dataeventsviews.DataEventView.
func marshalDataeventsviewsDataEventViewToDataEventResponseBody(v *dataeventsviews.DataEventView) *DataEventResponseBody {
	res := &DataEventResponseBody{
		ID:          *v.ID,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
		Title:       *v.Title,
		Description: *v.Description,
		Bookmark:    v.Bookmark,
		Start:       *v.Start,
		End:         *v.End,
	}
	if v.Author != nil {
		res.Author = marshalDataeventsviewsPostAuthorViewToPostAuthorResponseBody(v.Author)
	}

	return res
}

// marshalDataeventsviewsPostAuthorViewToPostAuthorResponseBody builds a value
// of type *PostAuthorResponseBody from a value of type
// *dataeventsviews.PostAuthorView.
func marshalDataeventsviewsPostAuthorViewToPostAuthorResponseBody(v *dataeventsviews.PostAuthorView) *PostAuthorResponseBody {
	res := &PostAuthorResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}
	if v.Photo != nil {
		res.Photo = marshalDataeventsviewsAuthorPhotoViewToAuthorPhotoResponseBody(v.Photo)
	}

	return res
}

// marshalDataeventsviewsAuthorPhotoViewToAuthorPhotoResponseBody builds a
// value of type *AuthorPhotoResponseBody from a value of type
// *dataeventsviews.AuthorPhotoView.
func marshalDataeventsviewsAuthorPhotoViewToAuthorPhotoResponseBody(v *dataeventsviews.AuthorPhotoView) *AuthorPhotoResponseBody {
	if v == nil {
		return nil
	}
	res := &AuthorPhotoResponseBody{
		URL: *v.URL,
	}

	return res
}

// unmarshalNewDataEventRequestBodyToDataeventsNewDataEvent builds a value of
// type *dataevents.NewDataEvent from a value of type *NewDataEventRequestBody.
func unmarshalNewDataEventRequestBodyToDataeventsNewDataEvent(v *NewDataEventRequestBody) *dataevents.NewDataEvent {
	res := &dataevents.NewDataEvent{
		AllProjectSensors: *v.AllProjectSensors,
		Bookmark:          v.Bookmark,
		Title:             *v.Title,
		Description:       *v.Description,
		Start:             *v.Start,
		End:               *v.End,
	}

	return res
}

// marshalDataeventsDataEventToDataEventResponseBody builds a value of type
// *DataEventResponseBody from a value of type *dataevents.DataEvent.
func marshalDataeventsDataEventToDataEventResponseBody(v *dataevents.DataEvent) *DataEventResponseBody {
	res := &DataEventResponseBody{
		ID:          v.ID,
		CreatedAt:   v.CreatedAt,
		UpdatedAt:   v.UpdatedAt,
		Title:       v.Title,
		Description: v.Description,
		Bookmark:    v.Bookmark,
		Start:       v.Start,
		End:         v.End,
	}
	if v.Author != nil {
		res.Author = marshalDataeventsPostAuthorToPostAuthorResponseBody(v.Author)
	}

	return res
}

// marshalDataeventsPostAuthorToPostAuthorResponseBody builds a value of type
// *PostAuthorResponseBody from a value of type *dataevents.PostAuthor.
func marshalDataeventsPostAuthorToPostAuthorResponseBody(v *dataevents.PostAuthor) *PostAuthorResponseBody {
	res := &PostAuthorResponseBody{
		ID:   v.ID,
		Name: v.Name,
	}
	if v.Photo != nil {
		res.Photo = marshalDataeventsAuthorPhotoToAuthorPhotoResponseBody(v.Photo)
	}

	return res
}

// marshalDataeventsAuthorPhotoToAuthorPhotoResponseBody builds a value of type
// *AuthorPhotoResponseBody from a value of type *dataevents.AuthorPhoto.
func marshalDataeventsAuthorPhotoToAuthorPhotoResponseBody(v *dataevents.AuthorPhoto) *AuthorPhotoResponseBody {
	if v == nil {
		return nil
	}
	res := &AuthorPhotoResponseBody{
		URL: v.URL,
	}

	return res
}
