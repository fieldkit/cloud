// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data events HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	dataevents "github.com/fieldkit/cloud/server/api/gen/data_events"
	dataeventsviews "github.com/fieldkit/cloud/server/api/gen/data_events/views"
	goa "goa.design/goa/v3/pkg"
)

// AddDataEventRequestBody is the type of the "data events" service "add data
// event" endpoint HTTP request body.
type AddDataEventRequestBody struct {
	Event *NewDataEventRequestBody `form:"event,omitempty" json:"event,omitempty" xml:"event,omitempty"`
}

// UpdateDataEventRequestBody is the type of the "data events" service "update
// data event" endpoint HTTP request body.
type UpdateDataEventRequestBody struct {
	Title       *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Start       *int64  `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End         *int64  `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// DataEventsResponseBody is the type of the "data events" service "data
// events" endpoint HTTP response body.
type DataEventsResponseBody struct {
	Events []*DataEventResponseBody `form:"events" json:"events" xml:"events"`
}

// AddDataEventResponseBody is the type of the "data events" service "add data
// event" endpoint HTTP response body.
type AddDataEventResponseBody struct {
	Event *DataEventResponseBody `form:"event" json:"event" xml:"event"`
}

// UpdateDataEventResponseBody is the type of the "data events" service "update
// data event" endpoint HTTP response body.
type UpdateDataEventResponseBody struct {
	Event *DataEventResponseBody `form:"event" json:"event" xml:"event"`
}

// DataEventsUnauthorizedResponseBody is the type of the "data events" service
// "data events" endpoint HTTP response body for the "unauthorized" error.
type DataEventsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataEventsForbiddenResponseBody is the type of the "data events" service
// "data events" endpoint HTTP response body for the "forbidden" error.
type DataEventsForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataEventsNotFoundResponseBody is the type of the "data events" service
// "data events" endpoint HTTP response body for the "not-found" error.
type DataEventsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataEventsBadRequestResponseBody is the type of the "data events" service
// "data events" endpoint HTTP response body for the "bad-request" error.
type DataEventsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddDataEventUnauthorizedResponseBody is the type of the "data events"
// service "add data event" endpoint HTTP response body for the "unauthorized"
// error.
type AddDataEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddDataEventForbiddenResponseBody is the type of the "data events" service
// "add data event" endpoint HTTP response body for the "forbidden" error.
type AddDataEventForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddDataEventNotFoundResponseBody is the type of the "data events" service
// "add data event" endpoint HTTP response body for the "not-found" error.
type AddDataEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddDataEventBadRequestResponseBody is the type of the "data events" service
// "add data event" endpoint HTTP response body for the "bad-request" error.
type AddDataEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateDataEventUnauthorizedResponseBody is the type of the "data events"
// service "update data event" endpoint HTTP response body for the
// "unauthorized" error.
type UpdateDataEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateDataEventForbiddenResponseBody is the type of the "data events"
// service "update data event" endpoint HTTP response body for the "forbidden"
// error.
type UpdateDataEventForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateDataEventNotFoundResponseBody is the type of the "data events" service
// "update data event" endpoint HTTP response body for the "not-found" error.
type UpdateDataEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateDataEventBadRequestResponseBody is the type of the "data events"
// service "update data event" endpoint HTTP response body for the
// "bad-request" error.
type UpdateDataEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDataEventUnauthorizedResponseBody is the type of the "data events"
// service "delete data event" endpoint HTTP response body for the
// "unauthorized" error.
type DeleteDataEventUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDataEventForbiddenResponseBody is the type of the "data events"
// service "delete data event" endpoint HTTP response body for the "forbidden"
// error.
type DeleteDataEventForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDataEventNotFoundResponseBody is the type of the "data events" service
// "delete data event" endpoint HTTP response body for the "not-found" error.
type DeleteDataEventNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteDataEventBadRequestResponseBody is the type of the "data events"
// service "delete data event" endpoint HTTP response body for the
// "bad-request" error.
type DeleteDataEventBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DataEventResponseBody is used to define fields on response body types.
type DataEventResponseBody struct {
	ID          int64                   `form:"id" json:"id" xml:"id"`
	CreatedAt   int64                   `form:"createdAt" json:"createdAt" xml:"createdAt"`
	UpdatedAt   int64                   `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
	Author      *PostAuthorResponseBody `form:"author" json:"author" xml:"author"`
	Title       string                  `form:"title" json:"title" xml:"title"`
	Description string                  `form:"description" json:"description" xml:"description"`
	Bookmark    *string                 `form:"bookmark,omitempty" json:"bookmark,omitempty" xml:"bookmark,omitempty"`
	Start       int64                   `form:"start" json:"start" xml:"start"`
	End         int64                   `form:"end" json:"end" xml:"end"`
}

// PostAuthorResponseBody is used to define fields on response body types.
type PostAuthorResponseBody struct {
	ID    int32                    `form:"id" json:"id" xml:"id"`
	Name  string                   `form:"name" json:"name" xml:"name"`
	Photo *AuthorPhotoResponseBody `form:"photo,omitempty" json:"photo,omitempty" xml:"photo,omitempty"`
}

// AuthorPhotoResponseBody is used to define fields on response body types.
type AuthorPhotoResponseBody struct {
	URL string `form:"url" json:"url" xml:"url"`
}

// NewDataEventRequestBody is used to define fields on request body types.
type NewDataEventRequestBody struct {
	AllProjectSensors *bool   `form:"allProjectSensors,omitempty" json:"allProjectSensors,omitempty" xml:"allProjectSensors,omitempty"`
	Bookmark          *string `form:"bookmark,omitempty" json:"bookmark,omitempty" xml:"bookmark,omitempty"`
	Title             *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Description       *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	Start             *int64  `form:"start,omitempty" json:"start,omitempty" xml:"start,omitempty"`
	End               *int64  `form:"end,omitempty" json:"end,omitempty" xml:"end,omitempty"`
}

// NewDataEventsResponseBody builds the HTTP response body from the result of
// the "data events" endpoint of the "data events" service.
func NewDataEventsResponseBody(res *dataeventsviews.DataEventsView) *DataEventsResponseBody {
	body := &DataEventsResponseBody{}
	if res.Events != nil {
		body.Events = make([]*DataEventResponseBody, len(res.Events))
		for i, val := range res.Events {
			body.Events[i] = marshalDataeventsviewsDataEventViewToDataEventResponseBody(val)
		}
	}
	return body
}

// NewAddDataEventResponseBody builds the HTTP response body from the result of
// the "add data event" endpoint of the "data events" service.
func NewAddDataEventResponseBody(res *dataevents.AddDataEventResult) *AddDataEventResponseBody {
	body := &AddDataEventResponseBody{}
	if res.Event != nil {
		body.Event = marshalDataeventsDataEventToDataEventResponseBody(res.Event)
	}
	return body
}

// NewUpdateDataEventResponseBody builds the HTTP response body from the result
// of the "update data event" endpoint of the "data events" service.
func NewUpdateDataEventResponseBody(res *dataevents.UpdateDataEventResult) *UpdateDataEventResponseBody {
	body := &UpdateDataEventResponseBody{}
	if res.Event != nil {
		body.Event = marshalDataeventsDataEventToDataEventResponseBody(res.Event)
	}
	return body
}

// NewDataEventsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "data events" endpoint of the "data events" service.
func NewDataEventsUnauthorizedResponseBody(res *goa.ServiceError) *DataEventsUnauthorizedResponseBody {
	body := &DataEventsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataEventsForbiddenResponseBody builds the HTTP response body from the
// result of the "data events" endpoint of the "data events" service.
func NewDataEventsForbiddenResponseBody(res *goa.ServiceError) *DataEventsForbiddenResponseBody {
	body := &DataEventsForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataEventsNotFoundResponseBody builds the HTTP response body from the
// result of the "data events" endpoint of the "data events" service.
func NewDataEventsNotFoundResponseBody(res *goa.ServiceError) *DataEventsNotFoundResponseBody {
	body := &DataEventsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataEventsBadRequestResponseBody builds the HTTP response body from the
// result of the "data events" endpoint of the "data events" service.
func NewDataEventsBadRequestResponseBody(res *goa.ServiceError) *DataEventsBadRequestResponseBody {
	body := &DataEventsBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddDataEventUnauthorizedResponseBody builds the HTTP response body from
// the result of the "add data event" endpoint of the "data events" service.
func NewAddDataEventUnauthorizedResponseBody(res *goa.ServiceError) *AddDataEventUnauthorizedResponseBody {
	body := &AddDataEventUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddDataEventForbiddenResponseBody builds the HTTP response body from the
// result of the "add data event" endpoint of the "data events" service.
func NewAddDataEventForbiddenResponseBody(res *goa.ServiceError) *AddDataEventForbiddenResponseBody {
	body := &AddDataEventForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddDataEventNotFoundResponseBody builds the HTTP response body from the
// result of the "add data event" endpoint of the "data events" service.
func NewAddDataEventNotFoundResponseBody(res *goa.ServiceError) *AddDataEventNotFoundResponseBody {
	body := &AddDataEventNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddDataEventBadRequestResponseBody builds the HTTP response body from the
// result of the "add data event" endpoint of the "data events" service.
func NewAddDataEventBadRequestResponseBody(res *goa.ServiceError) *AddDataEventBadRequestResponseBody {
	body := &AddDataEventBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateDataEventUnauthorizedResponseBody builds the HTTP response body
// from the result of the "update data event" endpoint of the "data events"
// service.
func NewUpdateDataEventUnauthorizedResponseBody(res *goa.ServiceError) *UpdateDataEventUnauthorizedResponseBody {
	body := &UpdateDataEventUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateDataEventForbiddenResponseBody builds the HTTP response body from
// the result of the "update data event" endpoint of the "data events" service.
func NewUpdateDataEventForbiddenResponseBody(res *goa.ServiceError) *UpdateDataEventForbiddenResponseBody {
	body := &UpdateDataEventForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateDataEventNotFoundResponseBody builds the HTTP response body from
// the result of the "update data event" endpoint of the "data events" service.
func NewUpdateDataEventNotFoundResponseBody(res *goa.ServiceError) *UpdateDataEventNotFoundResponseBody {
	body := &UpdateDataEventNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateDataEventBadRequestResponseBody builds the HTTP response body from
// the result of the "update data event" endpoint of the "data events" service.
func NewUpdateDataEventBadRequestResponseBody(res *goa.ServiceError) *UpdateDataEventBadRequestResponseBody {
	body := &UpdateDataEventBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDataEventUnauthorizedResponseBody builds the HTTP response body
// from the result of the "delete data event" endpoint of the "data events"
// service.
func NewDeleteDataEventUnauthorizedResponseBody(res *goa.ServiceError) *DeleteDataEventUnauthorizedResponseBody {
	body := &DeleteDataEventUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDataEventForbiddenResponseBody builds the HTTP response body from
// the result of the "delete data event" endpoint of the "data events" service.
func NewDeleteDataEventForbiddenResponseBody(res *goa.ServiceError) *DeleteDataEventForbiddenResponseBody {
	body := &DeleteDataEventForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDataEventNotFoundResponseBody builds the HTTP response body from
// the result of the "delete data event" endpoint of the "data events" service.
func NewDeleteDataEventNotFoundResponseBody(res *goa.ServiceError) *DeleteDataEventNotFoundResponseBody {
	body := &DeleteDataEventNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteDataEventBadRequestResponseBody builds the HTTP response body from
// the result of the "delete data event" endpoint of the "data events" service.
func NewDeleteDataEventBadRequestResponseBody(res *goa.ServiceError) *DeleteDataEventBadRequestResponseBody {
	body := &DeleteDataEventBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDataEventsPayload builds a data events service data events endpoint
// payload.
func NewDataEventsPayload(bookmark string, auth *string) *dataevents.DataEventsPayload {
	v := &dataevents.DataEventsPayload{}
	v.Bookmark = bookmark
	v.Auth = auth

	return v
}

// NewAddDataEventPayload builds a data events service add data event endpoint
// payload.
func NewAddDataEventPayload(body *AddDataEventRequestBody, auth string) *dataevents.AddDataEventPayload {
	v := &dataevents.AddDataEventPayload{}
	v.Event = unmarshalNewDataEventRequestBodyToDataeventsNewDataEvent(body.Event)
	v.Auth = auth

	return v
}

// NewUpdateDataEventPayload builds a data events service update data event
// endpoint payload.
func NewUpdateDataEventPayload(body *UpdateDataEventRequestBody, eventID int64, auth string) *dataevents.UpdateDataEventPayload {
	v := &dataevents.UpdateDataEventPayload{
		Title:       *body.Title,
		Description: *body.Description,
		Start:       *body.Start,
		End:         *body.End,
	}
	v.EventID = eventID
	v.Auth = auth

	return v
}

// NewDeleteDataEventPayload builds a data events service delete data event
// endpoint payload.
func NewDeleteDataEventPayload(eventID int64, auth string) *dataevents.DeleteDataEventPayload {
	v := &dataevents.DeleteDataEventPayload{}
	v.EventID = eventID
	v.Auth = auth

	return v
}

// ValidateAddDataEventRequestBody runs the validations defined on Add Data
// EventRequestBody
func ValidateAddDataEventRequestBody(body *AddDataEventRequestBody) (err error) {
	if body.Event == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("event", "body"))
	}
	if body.Event != nil {
		if err2 := ValidateNewDataEventRequestBody(body.Event); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateDataEventRequestBody runs the validations defined on Update
// Data EventRequestBody
func ValidateUpdateDataEventRequestBody(body *UpdateDataEventRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Start == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start", "body"))
	}
	if body.End == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end", "body"))
	}
	return
}

// ValidateNewDataEventRequestBody runs the validations defined on
// NewDataEventRequestBody
func ValidateNewDataEventRequestBody(body *NewDataEventRequestBody) (err error) {
	if body.AllProjectSensors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("allProjectSensors", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Start == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start", "body"))
	}
	if body.End == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end", "body"))
	}
	return
}
