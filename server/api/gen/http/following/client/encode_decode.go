// Code generated by goa v3.2.4, DO NOT EDIT.
//
// following HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	following "github.com/fieldkit/cloud/server/api/gen/following"
	followingviews "github.com/fieldkit/cloud/server/api/gen/following/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildFollowRequest instantiates a HTTP request object with method and path
// set to call the "following" service "follow" endpoint
func (c *Client) BuildFollowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*following.FollowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("following", "follow", "*following.FollowPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FollowFollowingPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("following", "follow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFollowRequest returns an encoder for requests sent to the following
// follow server.
func EncodeFollowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*following.FollowPayload)
		if !ok {
			return goahttp.ErrInvalidType("following", "follow", "*following.FollowPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeFollowResponse returns a decoder for responses returned by the
// following follow endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeFollowResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeFollowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body FollowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "follow", err)
			}
			err = ValidateFollowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "follow", err)
			}
			return nil, NewFollowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body FollowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "follow", err)
			}
			err = ValidateFollowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "follow", err)
			}
			return nil, NewFollowForbidden(&body)
		case http.StatusNotFound:
			var (
				body FollowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "follow", err)
			}
			err = ValidateFollowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "follow", err)
			}
			return nil, NewFollowNotFound(&body)
		case http.StatusBadRequest:
			var (
				body FollowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "follow", err)
			}
			err = ValidateFollowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "follow", err)
			}
			return nil, NewFollowBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("following", "follow", resp.StatusCode, string(body))
		}
	}
}

// BuildUnfollowRequest instantiates a HTTP request object with method and path
// set to call the "following" service "unfollow" endpoint
func (c *Client) BuildUnfollowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*following.UnfollowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("following", "unfollow", "*following.UnfollowPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnfollowFollowingPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("following", "unfollow", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnfollowRequest returns an encoder for requests sent to the following
// unfollow server.
func EncodeUnfollowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*following.UnfollowPayload)
		if !ok {
			return goahttp.ErrInvalidType("following", "unfollow", "*following.UnfollowPayload", v)
		}
		if p.Auth != nil {
			head := *p.Auth
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUnfollowResponse returns a decoder for responses returned by the
// following unfollow endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUnfollowResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUnfollowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body UnfollowUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "unfollow", err)
			}
			err = ValidateUnfollowUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "unfollow", err)
			}
			return nil, NewUnfollowUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body UnfollowForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "unfollow", err)
			}
			err = ValidateUnfollowForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "unfollow", err)
			}
			return nil, NewUnfollowForbidden(&body)
		case http.StatusNotFound:
			var (
				body UnfollowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "unfollow", err)
			}
			err = ValidateUnfollowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "unfollow", err)
			}
			return nil, NewUnfollowNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UnfollowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "unfollow", err)
			}
			err = ValidateUnfollowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "unfollow", err)
			}
			return nil, NewUnfollowBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("following", "unfollow", resp.StatusCode, string(body))
		}
	}
}

// BuildFollowersRequest instantiates a HTTP request object with method and
// path set to call the "following" service "followers" endpoint
func (c *Client) BuildFollowersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*following.FollowersPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("following", "followers", "*following.FollowersPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FollowersFollowingPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("following", "followers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFollowersRequest returns an encoder for requests sent to the following
// followers server.
func EncodeFollowersRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*following.FollowersPayload)
		if !ok {
			return goahttp.ErrInvalidType("following", "followers", "*following.FollowersPayload", v)
		}
		values := req.URL.Query()
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeFollowersResponse returns a decoder for responses returned by the
// following followers endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeFollowersResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "forbidden" (type *goa.ServiceError): http.StatusForbidden
//	- "not-found" (type *goa.ServiceError): http.StatusNotFound
//	- "bad-request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeFollowersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FollowersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "followers", err)
			}
			p := NewFollowersPageViewOK(&body)
			view := "default"
			vres := &followingviews.FollowersPage{Projected: p, View: view}
			if err = followingviews.ValidateFollowersPage(vres); err != nil {
				return nil, goahttp.ErrValidationError("following", "followers", err)
			}
			res := following.NewFollowersPage(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body FollowersUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "followers", err)
			}
			err = ValidateFollowersUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "followers", err)
			}
			return nil, NewFollowersUnauthorized(&body)
		case http.StatusForbidden:
			var (
				body FollowersForbiddenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "followers", err)
			}
			err = ValidateFollowersForbiddenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "followers", err)
			}
			return nil, NewFollowersForbidden(&body)
		case http.StatusNotFound:
			var (
				body FollowersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "followers", err)
			}
			err = ValidateFollowersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "followers", err)
			}
			return nil, NewFollowersNotFound(&body)
		case http.StatusBadRequest:
			var (
				body FollowersBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("following", "followers", err)
			}
			err = ValidateFollowersBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("following", "followers", err)
			}
			return nil, NewFollowersBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("following", "followers", resp.StatusCode, string(body))
		}
	}
}

// unmarshalFollowerResponseBodyToFollowingviewsFollowerView builds a value of
// type *followingviews.FollowerView from a value of type *FollowerResponseBody.
func unmarshalFollowerResponseBodyToFollowingviewsFollowerView(v *FollowerResponseBody) *followingviews.FollowerView {
	res := &followingviews.FollowerView{
		ID:   v.ID,
		Name: v.Name,
	}
	if v.Avatar != nil {
		res.Avatar = unmarshalAvatarResponseBodyToFollowingviewsAvatarView(v.Avatar)
	}

	return res
}

// unmarshalAvatarResponseBodyToFollowingviewsAvatarView builds a value of type
// *followingviews.AvatarView from a value of type *AvatarResponseBody.
func unmarshalAvatarResponseBodyToFollowingviewsAvatarView(v *AvatarResponseBody) *followingviews.AvatarView {
	if v == nil {
		return nil
	}
	res := &followingviews.AvatarView{
		URL: v.URL,
	}

	return res
}
