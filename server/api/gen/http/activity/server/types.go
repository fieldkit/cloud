// Code generated by goa v3.2.4, DO NOT EDIT.
//
// activity HTTP server types
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package server

import (
	activity "github.com/fieldkit/cloud/server/api/gen/activity"
	activityviews "github.com/fieldkit/cloud/server/api/gen/activity/views"
	goa "goa.design/goa/v3/pkg"
)

// StationResponseBody is the type of the "activity" service "station" endpoint
// HTTP response body.
type StationResponseBody struct {
	Activities ActivityEntryResponseBodyCollection `form:"activities" json:"activities" xml:"activities"`
	Total      int32                               `form:"total" json:"total" xml:"total"`
	Page       int32                               `form:"page" json:"page" xml:"page"`
}

// ProjectResponseBody is the type of the "activity" service "project" endpoint
// HTTP response body.
type ProjectResponseBody struct {
	Activities ActivityEntryResponseBodyCollection `form:"activities" json:"activities" xml:"activities"`
	Total      int32                               `form:"total" json:"total" xml:"total"`
	Page       int32                               `form:"page" json:"page" xml:"page"`
}

// StationUnauthorizedResponseBody is the type of the "activity" service
// "station" endpoint HTTP response body for the "unauthorized" error.
type StationUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationForbiddenResponseBody is the type of the "activity" service "station"
// endpoint HTTP response body for the "forbidden" error.
type StationForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationNotFoundResponseBody is the type of the "activity" service "station"
// endpoint HTTP response body for the "not-found" error.
type StationNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// StationBadRequestResponseBody is the type of the "activity" service
// "station" endpoint HTTP response body for the "bad-request" error.
type StationBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectUnauthorizedResponseBody is the type of the "activity" service
// "project" endpoint HTTP response body for the "unauthorized" error.
type ProjectUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectForbiddenResponseBody is the type of the "activity" service "project"
// endpoint HTTP response body for the "forbidden" error.
type ProjectForbiddenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectNotFoundResponseBody is the type of the "activity" service "project"
// endpoint HTTP response body for the "not-found" error.
type ProjectNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ProjectBadRequestResponseBody is the type of the "activity" service
// "project" endpoint HTTP response body for the "bad-request" error.
type ProjectBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ActivityEntryResponseBodyCollection is used to define fields on response
// body types.
type ActivityEntryResponseBodyCollection []*ActivityEntryResponseBody

// ActivityEntryResponseBody is used to define fields on response body types.
type ActivityEntryResponseBody struct {
	ID        int64                       `form:"id" json:"id" xml:"id"`
	Key       string                      `form:"key" json:"key" xml:"key"`
	Project   *ProjectSummaryResponseBody `form:"project" json:"project" xml:"project"`
	Station   *StationSummaryResponseBody `form:"station" json:"station" xml:"station"`
	CreatedAt int64                       `form:"created_at" json:"created_at" xml:"created_at"`
	Type      string                      `form:"type" json:"type" xml:"type"`
	Meta      interface{}                 `form:"meta" json:"meta" xml:"meta"`
}

// ProjectSummaryResponseBody is used to define fields on response body types.
type ProjectSummaryResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// StationSummaryResponseBody is used to define fields on response body types.
type StationSummaryResponseBody struct {
	ID   int64  `form:"id" json:"id" xml:"id"`
	Name string `form:"name" json:"name" xml:"name"`
}

// NewStationResponseBody builds the HTTP response body from the result of the
// "station" endpoint of the "activity" service.
func NewStationResponseBody(res *activityviews.StationActivityPageView) *StationResponseBody {
	body := &StationResponseBody{
		Total: *res.Total,
		Page:  *res.Page,
	}
	if res.Activities != nil {
		body.Activities = make([]*ActivityEntryResponseBody, len(res.Activities))
		for i, val := range res.Activities {
			body.Activities[i] = marshalActivityviewsActivityEntryViewToActivityEntryResponseBody(val)
		}
	}
	return body
}

// NewProjectResponseBody builds the HTTP response body from the result of the
// "project" endpoint of the "activity" service.
func NewProjectResponseBody(res *activityviews.ProjectActivityPageView) *ProjectResponseBody {
	body := &ProjectResponseBody{
		Total: *res.Total,
		Page:  *res.Page,
	}
	if res.Activities != nil {
		body.Activities = make([]*ActivityEntryResponseBody, len(res.Activities))
		for i, val := range res.Activities {
			body.Activities[i] = marshalActivityviewsActivityEntryViewToActivityEntryResponseBody(val)
		}
	}
	return body
}

// NewStationUnauthorizedResponseBody builds the HTTP response body from the
// result of the "station" endpoint of the "activity" service.
func NewStationUnauthorizedResponseBody(res *goa.ServiceError) *StationUnauthorizedResponseBody {
	body := &StationUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationForbiddenResponseBody builds the HTTP response body from the
// result of the "station" endpoint of the "activity" service.
func NewStationForbiddenResponseBody(res *goa.ServiceError) *StationForbiddenResponseBody {
	body := &StationForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationNotFoundResponseBody builds the HTTP response body from the result
// of the "station" endpoint of the "activity" service.
func NewStationNotFoundResponseBody(res *goa.ServiceError) *StationNotFoundResponseBody {
	body := &StationNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationBadRequestResponseBody builds the HTTP response body from the
// result of the "station" endpoint of the "activity" service.
func NewStationBadRequestResponseBody(res *goa.ServiceError) *StationBadRequestResponseBody {
	body := &StationBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectUnauthorizedResponseBody builds the HTTP response body from the
// result of the "project" endpoint of the "activity" service.
func NewProjectUnauthorizedResponseBody(res *goa.ServiceError) *ProjectUnauthorizedResponseBody {
	body := &ProjectUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectForbiddenResponseBody builds the HTTP response body from the
// result of the "project" endpoint of the "activity" service.
func NewProjectForbiddenResponseBody(res *goa.ServiceError) *ProjectForbiddenResponseBody {
	body := &ProjectForbiddenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectNotFoundResponseBody builds the HTTP response body from the result
// of the "project" endpoint of the "activity" service.
func NewProjectNotFoundResponseBody(res *goa.ServiceError) *ProjectNotFoundResponseBody {
	body := &ProjectNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewProjectBadRequestResponseBody builds the HTTP response body from the
// result of the "project" endpoint of the "activity" service.
func NewProjectBadRequestResponseBody(res *goa.ServiceError) *ProjectBadRequestResponseBody {
	body := &ProjectBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewStationPayload builds a activity service station endpoint payload.
func NewStationPayload(id int64, page *int64, auth *string) *activity.StationPayload {
	v := &activity.StationPayload{}
	v.ID = id
	v.Page = page
	v.Auth = auth

	return v
}

// NewProjectPayload builds a activity service project endpoint payload.
func NewProjectPayload(id int64, page *int64, auth *string) *activity.ProjectPayload {
	v := &activity.ProjectPayload{}
	v.ID = id
	v.Page = page
	v.Auth = auth

	return v
}
