// Code generated by goa v3.2.4, DO NOT EDIT.
//
// maps views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Map is the viewed result type that is projected based on a view.
type Map struct {
	// Type to project
	Projected *MapView
	// View to render
	View string
}

// MapView is a type that runs validations on a projected type.
type MapView struct {
	Features []*MapGeoJSONView
}

// MapGeoJSONView is a type that runs validations on a projected type.
type MapGeoJSONView struct {
	Type       *string
	Geometry   *MapGeometryView
	Properties map[string]string
}

// MapGeometryView is a type that runs validations on a projected type.
type MapGeometryView struct {
	Type        *string
	Coordinates []float64
}

var (
	// MapMap is a map of attribute names in result type Map indexed by view name.
	MapMap = map[string][]string{
		"default": []string{
			"features",
		},
	}
	// MapGeoJSONMap is a map of attribute names in result type MapGeoJSON indexed
	// by view name.
	MapGeoJSONMap = map[string][]string{
		"default": []string{
			"type",
			"geometry",
			"properties",
		},
	}
	// MapGeometryMap is a map of attribute names in result type MapGeometry
	// indexed by view name.
	MapGeometryMap = map[string][]string{
		"default": []string{
			"type",
			"coordinates",
		},
	}
)

// ValidateMap runs the validations defined on the viewed result type Map.
func ValidateMap(result *Map) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMapView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateMapView runs the validations defined on MapView using the "default"
// view.
func ValidateMapView(result *MapView) (err error) {
	if result.Features == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("features", "result"))
	}
	for _, e := range result.Features {
		if e != nil {
			if err2 := ValidateMapGeoJSONView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateMapGeoJSONView runs the validations defined on MapGeoJSONView using
// the "default" view.
func ValidateMapGeoJSONView(result *MapGeoJSONView) (err error) {
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Properties == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("properties", "result"))
	}
	if result.Geometry != nil {
		if err2 := ValidateMapGeometryView(result.Geometry); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateMapGeometryView runs the validations defined on MapGeometryView
// using the "default" view.
func ValidateMapGeometryView(result *MapGeometryView) (err error) {
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Coordinates == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("coordinates", "result"))
	}
	return
}
