// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data events endpoints
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package dataevents

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "data events" service endpoints.
type Endpoints struct {
	DataEventsEndpoint goa.Endpoint
	AddDataEvent       goa.Endpoint
	UpdateDataEvent    goa.Endpoint
	DeleteDataEvent    goa.Endpoint
}

// NewEndpoints wraps the methods of the "data events" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		DataEventsEndpoint: NewDataEventsEndpointEndpoint(s, a.JWTAuth),
		AddDataEvent:       NewAddDataEventEndpoint(s, a.JWTAuth),
		UpdateDataEvent:    NewUpdateDataEventEndpoint(s, a.JWTAuth),
		DeleteDataEvent:    NewDeleteDataEventEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "data events" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.DataEventsEndpoint = m(e.DataEventsEndpoint)
	e.AddDataEvent = m(e.AddDataEvent)
	e.UpdateDataEvent = m(e.UpdateDataEvent)
	e.DeleteDataEvent = m(e.DeleteDataEvent)
}

// NewDataEventsEndpointEndpoint returns an endpoint function that calls the
// method "data events" of service "data events".
func NewDataEventsEndpointEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DataEventsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Auth != nil {
			token = *p.Auth
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.DataEventsEndpoint(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedDataEvents(res, "default")
		return vres, nil
	}
}

// NewAddDataEventEndpoint returns an endpoint function that calls the method
// "add data event" of service "data events".
func NewAddDataEventEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AddDataEventPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return s.AddDataEvent(ctx, p)
	}
}

// NewUpdateDataEventEndpoint returns an endpoint function that calls the
// method "update data event" of service "data events".
func NewUpdateDataEventEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateDataEventPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateDataEvent(ctx, p)
	}
}

// NewDeleteDataEventEndpoint returns an endpoint function that calls the
// method "delete data event" of service "data events".
func NewDeleteDataEventEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteDataEventPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteDataEvent(ctx, p)
	}
}
