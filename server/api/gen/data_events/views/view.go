// Code generated by goa v3.2.4, DO NOT EDIT.
//
// data events views
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// DataEvents is the viewed result type that is projected based on a view.
type DataEvents struct {
	// Type to project
	Projected *DataEventsView
	// View to render
	View string
}

// DataEventsView is a type that runs validations on a projected type.
type DataEventsView struct {
	Events []*DataEventView
}

// DataEventView is a type that runs validations on a projected type.
type DataEventView struct {
	ID          *int64
	CreatedAt   *int64
	UpdatedAt   *int64
	Author      *PostAuthorView
	Title       *string
	Description *string
	Bookmark    *string
	Start       *int64
	End         *int64
}

// PostAuthorView is a type that runs validations on a projected type.
type PostAuthorView struct {
	ID    *int32
	Name  *string
	Photo *AuthorPhotoView
}

// AuthorPhotoView is a type that runs validations on a projected type.
type AuthorPhotoView struct {
	URL *string
}

var (
	// DataEventsMap is a map of attribute names in result type DataEvents indexed
	// by view name.
	DataEventsMap = map[string][]string{
		"default": []string{
			"events",
		},
	}
	// DataEventMap is a map of attribute names in result type DataEvent indexed by
	// view name.
	DataEventMap = map[string][]string{
		"default": []string{
			"id",
			"createdAt",
			"updatedAt",
			"author",
			"title",
			"description",
			"bookmark",
			"start",
			"end",
		},
	}
)

// ValidateDataEvents runs the validations defined on the viewed result type
// DataEvents.
func ValidateDataEvents(result *DataEvents) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateDataEventsView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateDataEventsView runs the validations defined on DataEventsView using
// the "default" view.
func ValidateDataEventsView(result *DataEventsView) (err error) {
	if result.Events == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("events", "result"))
	}
	for _, e := range result.Events {
		if e != nil {
			if err2 := ValidateDataEventView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDataEventView runs the validations defined on DataEventView using
// the "default" view.
func ValidateDataEventView(result *DataEventView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updatedAt", "result"))
	}
	if result.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Start == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start", "result"))
	}
	if result.End == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end", "result"))
	}
	if result.Author != nil {
		if err2 := ValidatePostAuthorView(result.Author); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePostAuthorView runs the validations defined on PostAuthorView.
func ValidatePostAuthorView(result *PostAuthorView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Photo != nil {
		if err2 := ValidateAuthorPhotoView(result.Photo); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAuthorPhotoView runs the validations defined on AuthorPhotoView.
func ValidateAuthorPhotoView(result *AuthorPhotoView) (err error) {
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	return
}
