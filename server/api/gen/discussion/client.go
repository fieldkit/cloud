// Code generated by goa v3.2.4, DO NOT EDIT.
//
// discussion client
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package discussion

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "discussion" service client.
type Client struct {
	ProjectEndpoint       goa.Endpoint
	DataEndpoint          goa.Endpoint
	PostMessageEndpoint   goa.Endpoint
	UpdateMessageEndpoint goa.Endpoint
	DeleteMessageEndpoint goa.Endpoint
}

// NewClient initializes a "discussion" service client given the endpoints.
func NewClient(project, data, postMessage, updateMessage, deleteMessage goa.Endpoint) *Client {
	return &Client{
		ProjectEndpoint:       project,
		DataEndpoint:          data,
		PostMessageEndpoint:   postMessage,
		UpdateMessageEndpoint: updateMessage,
		DeleteMessageEndpoint: deleteMessage,
	}
}

// Project calls the "project" endpoint of the "discussion" service.
func (c *Client) Project(ctx context.Context, p *ProjectPayload) (res *Discussion, err error) {
	var ires interface{}
	ires, err = c.ProjectEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Discussion), nil
}

// Data calls the "data" endpoint of the "discussion" service.
func (c *Client) Data(ctx context.Context, p *DataPayload) (res *Discussion, err error) {
	var ires interface{}
	ires, err = c.DataEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Discussion), nil
}

// PostMessage calls the "post message" endpoint of the "discussion" service.
func (c *Client) PostMessage(ctx context.Context, p *PostMessagePayload) (res *PostMessageResult, err error) {
	var ires interface{}
	ires, err = c.PostMessageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PostMessageResult), nil
}

// UpdateMessage calls the "update message" endpoint of the "discussion"
// service.
func (c *Client) UpdateMessage(ctx context.Context, p *UpdateMessagePayload) (res *UpdateMessageResult, err error) {
	var ires interface{}
	ires, err = c.UpdateMessageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*UpdateMessageResult), nil
}

// DeleteMessage calls the "delete message" endpoint of the "discussion"
// service.
func (c *Client) DeleteMessage(ctx context.Context, p *DeleteMessagePayload) (err error) {
	_, err = c.DeleteMessageEndpoint(ctx, p)
	return
}
