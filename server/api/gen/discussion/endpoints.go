// Code generated by goa v3.2.4, DO NOT EDIT.
//
// discussion endpoints
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package discussion

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "discussion" service endpoints.
type Endpoints struct {
	Project       goa.Endpoint
	Data          goa.Endpoint
	PostMessage   goa.Endpoint
	UpdateMessage goa.Endpoint
	DeleteMessage goa.Endpoint
}

// NewEndpoints wraps the methods of the "discussion" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Project:       NewProjectEndpoint(s, a.JWTAuth),
		Data:          NewDataEndpoint(s, a.JWTAuth),
		PostMessage:   NewPostMessageEndpoint(s, a.JWTAuth),
		UpdateMessage: NewUpdateMessageEndpoint(s, a.JWTAuth),
		DeleteMessage: NewDeleteMessageEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "discussion" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Project = m(e.Project)
	e.Data = m(e.Data)
	e.PostMessage = m(e.PostMessage)
	e.UpdateMessage = m(e.UpdateMessage)
	e.DeleteMessage = m(e.DeleteMessage)
}

// NewProjectEndpoint returns an endpoint function that calls the method
// "project" of service "discussion".
func NewProjectEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ProjectPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Project(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedDiscussion(res, "default")
		return vres, nil
	}
}

// NewDataEndpoint returns an endpoint function that calls the method "data" of
// service "discussion".
func NewDataEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DataPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Data(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedDiscussion(res, "default")
		return vres, nil
	}
}

// NewPostMessageEndpoint returns an endpoint function that calls the method
// "post message" of service "discussion".
func NewPostMessageEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PostMessagePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return s.PostMessage(ctx, p)
	}
}

// NewUpdateMessageEndpoint returns an endpoint function that calls the method
// "update message" of service "discussion".
func NewUpdateMessageEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateMessagePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateMessage(ctx, p)
	}
}

// NewDeleteMessageEndpoint returns an endpoint function that calls the method
// "delete message" of service "discussion".
func NewDeleteMessageEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteMessagePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteMessage(ctx, p)
	}
}
