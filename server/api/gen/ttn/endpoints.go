// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ttn endpoints
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package ttn

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "ttn" service endpoints.
type Endpoints struct {
	Webhook goa.Endpoint
}

// WebhookRequestData holds both the payload and the HTTP request body reader
// of the "webhook" method.
type WebhookRequestData struct {
	// Payload is the method payload.
	Payload *WebhookPayload
	// Body streams the HTTP request body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "ttn" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Webhook: NewWebhookEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "ttn" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Webhook = m(e.Webhook)
}

// NewWebhookEndpoint returns an endpoint function that calls the method
// "webhook" of service "ttn".
func NewWebhookEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*WebhookRequestData)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{},
		}
		var token string
		if ep.Payload.Auth != nil {
			token = *ep.Payload.Auth
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Webhook(ctx, ep.Payload, ep.Body)
	}
}
