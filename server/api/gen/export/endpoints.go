// Code generated by goa v3.2.4, DO NOT EDIT.
//
// export endpoints
//
// Command:
// $ goa gen github.com/fieldkit/cloud/server/api/design

package export

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "export" service endpoints.
type Endpoints struct {
	ListMine  goa.Endpoint
	Status    goa.Endpoint
	Download  goa.Endpoint
	Csv       goa.Endpoint
	JSONLines goa.Endpoint
}

// DownloadResponseData holds both the result and the HTTP response body reader
// of the "download" method.
type DownloadResponseData struct {
	// Result is the method result.
	Result *DownloadResult
	// Body streams the HTTP response body.
	Body io.ReadCloser
}

// NewEndpoints wraps the methods of the "export" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ListMine:  NewListMineEndpoint(s, a.JWTAuth),
		Status:    NewStatusEndpoint(s, a.JWTAuth),
		Download:  NewDownloadEndpoint(s),
		Csv:       NewCsvEndpoint(s, a.JWTAuth),
		JSONLines: NewJSONLinesEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "export" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListMine = m(e.ListMine)
	e.Status = m(e.Status)
	e.Download = m(e.Download)
	e.Csv = m(e.Csv)
	e.JSONLines = m(e.JSONLines)
}

// NewListMineEndpoint returns an endpoint function that calls the method "list
// mine" of service "export".
func NewListMineEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListMinePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.ListMine(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedUserExports(res, "default")
		return vres, nil
	}
}

// NewStatusEndpoint returns an endpoint function that calls the method
// "status" of service "export".
func NewStatusEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*StatusPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Status(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedExportStatus(res, "default")
		return vres, nil
	}
}

// NewDownloadEndpoint returns an endpoint function that calls the method
// "download" of service "export".
func NewDownloadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DownloadPayload)
		res, body, err := s.Download(ctx, p)
		if err != nil {
			return nil, err
		}
		return &DownloadResponseData{Result: res, Body: body}, nil
	}
}

// NewCsvEndpoint returns an endpoint function that calls the method "csv" of
// service "export".
func NewCsvEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CsvPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return s.Csv(ctx, p)
	}
}

// NewJSONLinesEndpoint returns an endpoint function that calls the method
// "json lines" of service "export".
func NewJSONLinesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*JSONLinesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access", "api:admin", "api:ingestion"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Auth, &sc)
		if err != nil {
			return nil, err
		}
		return s.JSONLines(ctx, p)
	}
}
