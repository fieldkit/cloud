@Library('conservify') _

def getCopyArtifactsJob(stackName, branch) {
	if (stackName == "portal-stack") {
		return "cloud/" + branch
	}
	if (stackName == "charting-stack") {
		return "cloud/" + branch
	}
	return "aws-build-stacks/" + branch
}

timestamps {
	node ("main") {
		try {
			def isDev = params.WorkEnv.indexOf("dev") >= 0
			def stackName = params.DeployStack ?: "portal-stack"
			def branchName = params.DeployBranch
			def artifactsUrl = params.ArtifactsUrl
			def statusUrl = isDev ? "https://api.fkdev.org/status" : "https://api.fieldkit.org/status"
			def selector = params.WhichBuild ? specific(params.WhichBuild) : lastSuccessful()

			slackSend channel: '#automation', color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Starting (stack = ${stackName}) (<${env.BUILD_URL}|Open>)"

			println("Params=${params} ArtifactsUrl=${artifactsUrl} BranchName=${branchName}")

			stage ('prepare') {
				if (artifactsUrl != null) {
					sh "rm -f archive.zip"
					sh "wget -O archive.zip ${artifactsUrl}"
					sh "unzip -oj archive.zip"
				}
				else if (branchName != null) {
					def job = getCopyArtifactsJob(stackName, branchName)
					copyArtifacts(projectName: job, flatten: true, selector: selector)
				}
				else {
					return
				}
				sh "ls -alh"
				sh "ls -alh ${stackName}.tar"
			}

			stage ('deploy') {
				def ws = conservifyTerraformWorkspace(env: params.WorkEnv)

				sshagent (credentials: ['ssh-fkdev-deploy']) {
					def known_hosts = "/var/jenkins_home/.ssh/known_hosts"
					def prepare = ws.servers.value.collectEntries {
			            if (fileExists(known_hosts)) {
					sh "ssh-keygen -f ${known_hosts} -R ${it.ip}"
			            }

			            [(it): {
			                println(it.sshAt)
			                sh "ssh -o StrictHostKeyChecking=no ${it.sshAt} whoami"
							sh "ssh -o StrictHostKeyChecking=no ${it.sshAt} sudo rm -f ${stackName}.tar"
							sh "scp -o StrictHostKeyChecking=no ${stackName}.tar ${it.sshAt}:"
			            }]
			        }
			        
			        parallel(prepare)

					def deploy = ws.servers.value.collectEntries {
			            [(it): {
			                println(it.sshAt)
							sh "ssh -o StrictHostKeyChecking=no ${it.sshAt} sudo mv ${stackName}.tar /tmp/incoming-stacks"
			            }]
			        }

					parallel(deploy)
				}

				if (stackName == "portal-stack") {
					def value = watchDeployment(url: statusUrl, seconds: 180)
					println(value)
					println("done")
				}
			}
		}
		catch (Exception e) {
			notifyFailure(e)
			throw e
		}
	}
}
