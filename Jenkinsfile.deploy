@Library('conservify') _

def getJobWithArtifacts(stackName, branch) {
	if (stackName == "portal-stack") {
		return "cloud"
	}
	return "aws-build-stacks"
}

def getCopyArtifactsJob(stackName, branch) {
	if (stackName == "portal-stack") {
		return "cloud/" + branch
	}
	if (stackName == "charting-stack") {
		return "cloud/" + branch
	}
	return "aws-build-stacks/" + branch
}

def getStackURL(user, password, branch, stackName) {
	def job = getJobWithArtifacts(stackName, branch)
	return "https://${user}:${password}@code.conservify.org/jenkins/job/fk/job/${job}/job/${branch}/lastSuccessfulBuild/artifact/dev-ops/amis/build/${stackName}.tar"
}

timestamps {
	node ("main") {
		try {
			def isDev = params.WorkEnv.indexOf("dev") >= 0
			def stackName = params.DeployStack ?: "portal-stack"
			def branchName = params.DeployBranch ?: "main"
			def statusUrl = isDev ? "https://api.fkdev.org/status" : "https://api.fieldkit.org/status"

			slackSend channel: '#automation', color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Starting (stack = ${stackName}) (<${env.BUILD_URL}|Open>)"

			stage ('prepare') {
				def job = getCopyArtifactsJob(stackName, branchName)
				copyArtifacts(projectName: job, flatten: true)
				sh "ls -alh"
				sh "ls -alh ${stackName}.tar"
			}

			stage ('deploy') {
				def ws = conservifyTerraformWorkspace(env: params.WorkEnv)

				sshagent (credentials: ['ssh-fkdev-deploy']) {
					for (def server in ws.servers.value) {
						print(server.sshAt)
						sh "ssh-keygen -f '/var/jenkins_home/.ssh/known_hosts' -R ${server.ip}"
						sh "ssh -o StrictHostKeyChecking=no ${server.sshAt} whoami"
					}

					for (def server in ws.servers.value) {
						print(server.sshAt)
						sh "scp -o StrictHostKeyChecking=no ${stackName}.tar ${servver.sshAt}:"
					}

					for (def server in ws.servers.value) {
						print(server.sshAt)
						sh "ssh -o StrictHostKeyChecking=no ${servver.sshAt} sudo mv ${stackName}.tar /tmp/incoming-stacks"
					}
				}

				if (stackName == "portal-stack") {
					def value = watchDeployment(url: statusUrl, seconds: 180)
					println(value)
					println("done")
				}
			}
		}
		catch (Exception e) {
			notifyFailure(e)
			throw e
		}
	}
}
